#!/usr/bin/python3
import sys, bugzilla, time, requests
from bugzilla.utils import get_bugzilla_api, check_being_logged_in, make_unique, make_url, format_time

RETRIES, INITIAL_BACKOFF = 9, 1

def show_creation_date(bug_list, cve_list):
    bugs_by_id, bugs_by_cve = [], []
    backoff, waiting = INITIAL_BACKOFF, 1
    for i in range(1, RETRIES):
        try:
            bzapi = get_bugzilla_api()
            if not check_being_logged_in(bzapi):
                sys.exit(3)
            if bug_list and not bugs_by_id:
                bugs_by_id = bzapi.getbugs(bug_list, include_fields=["id", "creation_time", "alias", "assigned_to", "priority"])
            if cve_list and not bugs_by_cve:
                bugs_by_cve = bzapi.query(bzapi.build_query(alias=cve_list, include_fields=["id", "creation_time", "alias", "assigned_to", "priority"]))
        except Exception as e:
            try:
                print(f"Couldn't query bugzilla ({e}) retrying in {backoff * 2} seconds!", file=sys.stderr)
                backoff *= 2
                waiting += backoff
                time.sleep(backoff)
            except KeyboardInterrupt:
                print(f"The script was interrupted after {i + 1} attempts and less than {waiting} seconds", file=sys.stderr)
                sys.exit(i + 1)
            continue
        else:
            break
    else:
        print(f"Couldn't query bugzilla after {RETRIES} attempts and {waiting} seconds!", file=sys.stderr)
        sys.exit(RETRIES)
    c_id = { b.id: b.creation_time for b in bugs_by_id }
    c_cve = { make_unique(b.alias): b.creation_time for b in bugs_by_cve }
    a_id = { b.id: b.assigned_to for b in bugs_by_id }
    a_cve = { make_unique(b.alias): b.assigned_to for b in bugs_by_cve }
    p_id = { b.id: b.priority for b in bugs_by_id }
    p_cve = { make_unique(b.alias): b.priority for b in bugs_by_cve }
    for b in bug_list:
        try:
            print(f'{make_url(b)};{format_time(c_id.get(b, 0))};{a_id.get(b, "")};{p_id.get(b, "")}')
        except Exception as e:
            print(f"Couldn't fetch creation time for: {b} ({e})", file=sys.stderr)
    for c in cve_list:
        try:
            print(f'{make_url(c)};{format_time(c_cve.get(c, 0))};{a_cve.get(c, "")};{p_cve.get(c, "")}')
        except Exception as e:
            print(f"Couldn't fetch creation time for: {c} ({e})", file=sys.stderr)

def main(argv):
   if len(argv) < 2:
      print("You must provide at least one argument!", file=sys.stderr)
      sys.exit(1)

   bug_list, cve_list = [], []
   try:
      bug_list = [ int(b) for b in argv[1:] if not b.startswith('CVE-') ]
      cve_list = [ b for b in argv[1:] if b.startswith('CVE-') ]
   except:
      print(f"Inputs must be bug numbers or CVE numbers: {argv[1:]}", file=sys.stderr)
      sys.exit(2)

   show_creation_date(bug_list, cve_list)

main(sys.argv)
