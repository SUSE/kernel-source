#!/usr/bin/python3
import sys, bugzilla
from bugzilla.utils import get_bugzilla_api, check_being_logged_in, make_unique, make_url, format_time

def show_creation_date(bug_list, cve_list):
    bzapi = get_bugzilla_api()
    if not check_being_logged_in(bzapi):
        sys.exit(3)
    bugs_by_id, bugs_by_cve = [], []
    try:
        if bug_list:
            bugs_by_id = bzapi.getbugs(bug_list, include_fields=["id", "creation_time", "alias"])
        if cve_list:
            bugs_by_cve = bzapi.query(bzapi.build_query(alias=cve_list, include_fields=["id", "creation_time", "alias"]))
    except Exception as e:
        print(f"Couldn't query bugzilla: {e}", file=sys.stderr)
        sys.exit(1)
    table_time = { b.id: b.creation_time for b in bugs_by_id }
    table_cve = { make_unique(b.alias): b.creation_time for b in bugs_by_cve }
    for b in bug_list:
        try:
            print(f'{make_url(b)};{format_time(table_time.get(b, 0))}')
        except Exception as e:
            print(f"Couldn't fetch creation time for: {b} ({e})", file=sys.stderr)
    for c in cve_list:
        try:
            print(f'{make_url(c)};{format_time(table_cve.get(c, 0))}')
        except Exception as e:
            print(f"Couldn't fetch creation time for: {c} ({e})", file=sys.stderr)

def main(argv):
   if len(argv) < 2:
      print("You must provide at least one argument!", file=sys.stderr)
      sys.exit(1)

   bug_list, cve_list = [], []
   try:
      bug_list = [ int(b) for b in argv[1:] if not b.startswith('CVE-') ]
      cve_list = [ b for b in argv[1:] if b.startswith('CVE-') ]
   except:
      print(f"Inputs must be bug numbers or CVE numbers: {argv[1:]}", file=sys.stderr)
      sys.exit(2)

   show_creation_date(bug_list, cve_list)

main(sys.argv)
