#!/usr/bin/python3
import sys, re, os, argparse, datetime
import bugzilla
from bugzilla._cli import DEFAULT_BZ
import git_sort.pygit2_wrapper as git

# dashboard kss script - work in progress

CVE_PATTERN = re.compile(r"CVE-[0-9]{4}-[0-9]{4,}")
CVSS_PATTERN = re.compile(r"CVSSv3.1:SUSE:CVE-[0-9]{4}-[0-9]{4,}:([0-9].[0-9])")
VECTOR_PATTERN = re.compile(r"CVSSv3.1:SUSE:CVE-[0-9]{4}-[0-9]{4,}:[0-9]{1,}.[0-9]:\(AV:(.)\/AC:(.)\/PR:(.)\/UI:(.)\/S:(.)\/C:(.)\/I:(.)\/A:(.)\)")
FIXES_PATTERN = re.compile(r"Fixes: ([0-9a-f]{12,})")
PATCH_PATTERN = re.compile(r"\+\+\+ b/([^ ]{1,})\n")
COMMENT_BANLIST = [ 'swamp@suse.de', 'bwiedemann+obsbugzillabot@suse.com', 'maint-coord+maintenance-robot@suse.de', 'smash_bz@suse.de' ]

T_RED = "\033[01;31m"
T_GREEN = "\033[01;32m"
T_YELLOW = "\033[01;33m"
T_BLUE = "\033[01;34m"
T_PURPLE = "\033[01;35m"
T_END = "\033[0m"
show_colors = os.isatty(sys.stdout.fileno())
today = datetime.date.today()

def check_envvar(var):
    result = os.environ.get(var)
    if not result:
        print("Please set {} environment variable!\n\nThe script requires a clone of https://git.kernel.org/pub/scm/linux/security/vulns.git in VULNS_GIT\n"\
              "and a clone of https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git in LINUX_GIT ".format(var), file=sys.stderr)
        sys.exit(1)
    return result

def check_being_logged_in(bzapi):
    if not bzapi.logged_in:
        print("You are not logged in the bugzilla!\n\nGo to https://bugzilla.suse.com/, log in via web interace with your credentials.\n"\
              "Then go to Preferences, click on the tab API KEYS and generate a new api key\nif you don't have one already.  Then store "\
              "the api_key in a file ~/.bugzillarc\nin the following format...\n\n# ~/.bugzillarc\n[apibugzilla.suse.com]\napi_key = YOUR_API_KEY")
        sys.exit(1)

def format_time(t):
    return datetime.datetime.strptime(str(t), '%Y%m%dT%H:%M:%S')

def color_format(color, msg):
    if show_colors and msg:
        return "{}{}{}".format(color, msg, T_END)
    return msg

def get_cve(s):
    m = re.search(CVE_PATTERN, s)
    return m.group(0) if m else ''

def get_score(s):
    m = re.search(CVSS_PATTERN, s)
    return m.group(1) if m else ''

def fetch_cves():
    repo = git.Repository(check_envvar('VULNS_GIT'))
    tree_index = git.Index()
    tree_index.read_tree(repo.revparse_single('origin/master').tree)
    return ( { get_cve(t.path): repo[t.id].data.decode('ascii').rstrip() for t in tree_index if t.path.startswith('cve/published/') and t.path.endswith('.sha1') },
             { get_cve(t.path): repo[t.id].data.decode('ascii').rstrip() for t in tree_index if t.path.startswith('cve/rejected/') and t.path.endswith('.sha1') } )

def show_patch(p, h):
    print('--- Begin {} ---'.format(h))
    for l in p.splitlines():
        if l.startswith('-'):
            print(color_format(T_RED, l))
        elif l.startswith('+'):
            print(color_format(T_GREEN, l))
        else:
            print(l)
    print('--- End {} ---'.format(h))

def show_stats(linux_git, h):
    print("     changes:", color_format(T_PURPLE, "{:>4}".format(linux_git.pstats[h]['added'] + linux_git.pstats[h]['removed'])), "   (",
          color_format(T_GREEN, "{:>4}".format("{0:+}".format(linux_git.pstats[h]['added']))), ",",
          color_format(T_RED, "{:>4}".format("{0:+}".format(-linux_git.pstats[h]['removed']))),
          ")    files: {}".format(linux_git.pstats[h]['files']))

class ScoreVector:
    def __init__(self, vector):
        tav = { 'P': color_format(T_BLUE, 'Physical'), 'L': color_format(T_GREEN, 'Local   '),
                'A': color_format(T_YELLOW, 'Adjacent'), 'N': color_format(T_RED, 'Network ') }
        ttt = { 'N': color_format(T_RED, 'None'), 'H': color_format(T_GREEN, 'High'),
                'L': color_format(T_YELLOW, 'Low '), 'R': color_format(T_YELLOW, 'Required'),
                'U': color_format(T_YELLOW, 'Unchanged'), 'C': color_format(T_RED, 'Changed  ') }
        tim = { 'N': color_format(T_GREEN, 'None'), 'L': color_format(T_YELLOW, 'Low '),
                'H': color_format(T_RED, 'High') }
        self.m = re.search(VECTOR_PATTERN, vector)
        if self.m:
            self.vals= [
                ('Attack Vector', tav.get(self.m.group(1))),
                ('Attack Complexity', ttt.get(self.m.group(2))),
                ('Privileges Required', ttt.get(self.m.group(3))),
                ('User Interaction', ttt.get(self.m.group(4))),
                ('Scope', ttt.get(self.m.group(5))),
                ('Confidentiality Impact', tim.get(self.m.group(6))),
                ('Integrity Impact', tim.get(self.m.group(7))),
                ('Availability Impact', tim.get(self.m.group(8)))]

    def __str__(self):
        return ' | '.join("{}: {}{}".format(i[0], i[1], T_END) for i in self.vals)

class MainlineRepo:
    def __init__(self):
        self.repo = git.Repository(check_envvar('LINUX_GIT'))
        self.patches = dict()
        self.pstats = dict()

    def get_all_fixes(self, h):
        msg = self.repo[h].raw_message.decode('utf8')
        return { str(self.repo.revparse_single(f).id) for f in re.findall(FIXES_PATTERN, msg) }

    def get_patch(self, h):
        if h not in self.patches:
            t0 = self.repo.revparse_single(h + "^")
            t1 = self.repo.revparse_single(h)
            self.patches[h] = self.repo.diff(t0, t1).patch
            self.pstats[h] = dict()
            self.pstats[h]['added'] = 0
            self.pstats[h]['removed'] = 0
            self.pstats[h]['files'] = 0
            for l in self.patches[h].splitlines():
                if l.startswith('-') and not l.startswith('---'):
                    self.pstats[h]['removed'] += 1
                elif l.startswith('+') and not l.startswith('+++'):
                    self.pstats[h]['added'] += 1
                elif l.startswith('diff '):
                    self.pstats[h]['files'] += 1
        return self.patches[h]

    def get_all_paths(self, h):
        return { p.lstrip() for p in re.findall(PATCH_PATTERN, self.get_patch(h)) }

class BugData:
    def __init__(self, bug, published, rejected):
        self.is_rejected = False
        self.data = bug
        self.cve = get_cve(self.data.summary)
        self.sha = published.get(self.cve, '')
        if not self.sha:
            self.sha = rejected.get(self.cve, '')
            if self.sha:
                self.is_rejected = True
        self.score = get_score(self.data.status_whiteboard)
        self.mtime = format_time(bug.last_change_time)
        self.btime = format_time(bug.creation_time)
        self.age = (today - self.btime.date()).days
        self.paths = None
        self.vector = None
        self.comments = []
        self.matched_comments = []
        self.changes = 0

    def grep_paths(self, regex, linux_git):
        if not self.sha:
            return False
        self.paths = linux_git.get_all_paths(self.sha)
        if [ p for p in self.paths if re.search(regex, p) ]:
            return True

    def get_stats(self, linux_git):
        if self.sha:
            linux_git.get_patch(self.sha)
            self.changes = linux_git.pstats[self.sha]['added'] + linux_git.pstats[self.sha]['removed']
        return self.changes

    def grep_patch(self, regex, linux_git):
        if not self.sha:
            return False
        patch = linux_git.get_patch(self.sha)
        return re.search(regex, patch)

    def store_comments(self, raw_comments):
        self.comments = [ { 'no': rc['count'], 'time': format_time(rc['time']), 'text': rc['text'], 'author': rc['creator'] } for rc in raw_comments
                          if rc['creator'] not in COMMENT_BANLIST ]
        self.mtime = self.comments[-1]['time'] if self.comments else self.btime;
        return self

    def grep_comments(self, regex):
        for c in self.comments:
            m = re.search(regex, c['text'])
            if m:
                text = '--- At {0} comment #{1} by <{2}> ---\n'.format(c['time'], c['no'], c['author'])
                text += c['text'].replace(m.group(0), color_format(T_YELLOW, m.group(0)))
                text +='\n--- Bugzilla url https://bugzilla.suse.com/show_bug.cgi?id={}#c{} ---\n'.format(self.data.id, c['no'])
                self.matched_comments.append(text)
        return self.matched_comments

    def with_score_vector(self):
        self.vector = ScoreVector(self.data.status_whiteboard)
        return self

def banlist_emails_in_bz_query(query, emails):
    for n, e in enumerate(emails, 1):
        query['query_format'] = 'advanced'
        query['email{}'.format(n)] = e
        query['emailassigned_to{}'.format(n)] = True
        query['emailtype{}'.format(n)] = 'notequals'

class BZApi:
    def __init__(self):
        self.bzapi = bugzilla.Bugzilla(DEFAULT_BZ)
        check_being_logged_in(self.bzapi)

    def fetch_comments(self, bugs):
        bug_ids = [ b.data.id for b in bugs ]
        comments = self.bzapi.get_comments(bug_ids)
        for b in bugs:
            b.store_comments(comments['bugs'][str(b.data.id)]['comments'])

    def fetch_bugs(self, email):
        kvargs = { 'status': ['NEW', 'IN_PROGRESS', 'CONFIRMED', 'REOPENED'],
                   'product': 'SUSE Security Incidents',
                   'component': 'Incidents',
                   'include_fields': ["id", "status", "summary", "status_whiteboard", "last_change_time", "creation_time", "assigned_to"] }
        if email:
            kvargs['assigned_to'] = email

        query = self.bzapi.build_query(**kvargs)

        # this is unfortunate, but build_query is not powerful enough
        if not email:
            banlist_emails_in_bz_query(query, ['cve-kpm@suse.de', 'security-team@suse.de', 'kernel-bugs@suse.de'])
            query['short_desc'] = 'VUL- kernel'
            query['short_desc_type'] = 'allwordssubstr'

        return self.bzapi.query(query)

def show_bug(n, b, linux_git, short, files, birth, print_patch, stats):
    color = T_RED
    fixes = []
    paths = []
    if b.sha:
        fixes = linux_git.get_all_fixes(b.sha)
        if fixes and b.score and b.sha:
            color = T_GREEN
        if files:
            if b.paths:
                paths = b.paths
            else:
                paths = linux_git.get_all_paths(b.sha)
        if short:
            fixes = []
    if not short:
        print("{:>3};".format(n), end=' ')
    print("{} ; {:<11} ; {:<14} ; {:<40}".format(b.data.id, b.data.status, color_format(T_RED, b.cve) if b.is_rejected else b.cve, color_format(color, b.sha)), end=' ')
    print("; {:>4} ; {} ; {:>3} ; {}".format(b.score, b.btime if birth else b.mtime, b.age, color_format(T_RED, '[cve is rejected] ') + b.data.summary if b.is_rejected else b.data.summary))
    for f in fixes:
        print("{:>46}{}".format('', f))
    if not short and b.data.assigned_to not in ('kernel-bugs@suse.de', 'cve-kpm@suse.de'):
        if b.comments:
            print("     [{no:>3}] at {time} by <{author}> (https://bugzilla.suse.com/show_bug.cgi?id={0}#c{no})".format(b.data.id, **b.comments[-1]))
        else:
            print(color_format(T_RED, "     no comment"))
    if print_patch and b.sha:
        show_patch(linux_git.get_patch(b.sha), b.sha)
    else:
        for p in sorted(paths):
            print("{:>46}{}".format('', color_format(T_PURPLE, p)))
    if stats and b.sha:
        linux_git.get_patch(b.sha)
        show_stats(linux_git, b.sha)
    for c in b.matched_comments:
        print(c)
    if b.vector:
        print('> ', b.vector, ' <\n')

def check_kernel_fix(b):
    print("./scripts/check-kernel-fix -s {0} -b {1} {2} > /tmp/kss.{2}.bsc{1}".format(b.score, b.data.id, b.cve))

def handle_grep(regex):
    if not regex:
        return None
    try:
        return re.compile(regex)
    except Exception as e:
        print(regex, ": ", e, file=sys.stderr)
    sys.exit(1)

def handle_modulo(qr):
    if not qr:
        return 0, 0
    try:
        q, r = qr.split(':')
        q = int(q)
        r = int(r)
        if q < 1 or r < 0 or r >= q:
            raise Exception()
        return (q, r)
    except Exception:
        print(qr, ": expected format is Q:R were Q > 0 and R < Q", file=sys.stderr)
    sys.exit(1)

def handle_ages(ages):
    if not ages:
        return (None, None)
    try:
        if ':' in ages:
            x, y = ages.split(':')
            x = int(x)
            y = int(y)
            if x < y or x < 0 or y < 0:
                raise Exception()
            return (x, y)
        else:
            x = int(ages)
            if x < 0:
                raise Exception()
            return (x, None)
    except Exception:
        print(ages, ": expected format is X or X:Y were X >= 0 and Y >= 0 and X >= Y", file=sys.stderr)
    sys.exit(1)

def handle_email(email):
    if len(email) < 9 or "@suse." not in email:
        print("no valid bz email provided", file=sys.stderr)
        sys.exit(1)
    return email

def parse_args():
    parser = argparse.ArgumentParser(description="KSS Dashboard")
    c_group = parser.add_mutually_exclusive_group()
    c_group.add_argument("-c", "--colors", help="show colors unconditionally (by default they show only in terminal); this is useful for piping into \"less -iR\"", action="store_true", default=False)
    c_group.add_argument("-C", "--no-colors", help="do not show colors unconditionally (by default they show only in terminal)", action="store_true", default=False)
    w_group = parser.add_mutually_exclusive_group()
    w_group.add_argument("-w", "--whiteboard", help="show only bugs with whiteboard set (thus CVSS score set)", action="store_true", default=False)
    w_group.add_argument("-W", "--no-whiteboard", help="show only bugs with whiteboard not set (thus no CVSS score)", action="store_true", default=False)
    s_group = parser.add_mutually_exclusive_group()
    s_group.add_argument("-s", "--short", help="show only bug headers (one bug per line; no fixes tags)", action="store_true", default=False)
    s_group.add_argument("-p", "--patch", help="show the entire fixing patch; incompatible with --short", action="store_true", default=False)
    s_group.add_argument("-f", "--files", help="show paths from the patch; incompatible with --short and --grep-paths", action="store_true", default=False)
    s_group.add_argument("-A", "--analyze-vector", help="show all CVSSv3.1 components (https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator) and nothing else", action="store_true", default=False)
    s_group.add_argument("-0", "--check-kernel-fix", help="prints ./scripts/check-kernel-fix cli", action="store_true", default=False)
    parser.add_argument("-i", "--stats-info", help="show patch statistics; # of changed files, # of added lines, # of removed lines", action="store_true", default=False)
    parser.add_argument("-b", "--birth-time", help="show the reported time instead of the last modification time", action="store_true", default=False)
    parser.add_argument("-S", "--sort-score", help="sort bugs by CVSS score instead of their bug ids, implies -w (--whiteboard)", action="store_true", default=False)
    parser.add_argument("-N", "--sort-cve", help="sort bugs by CVE number instead of their bug ids", action="store_true", default=False)
    parser.add_argument("-t", "--sort-time", help="sort bugs by the last comment (excluding the bots)", action="store_true", default=False)
    parser.add_argument("-M", "--sort-changes", help="sort by the number of insertion/deletion introduced by the patch", action="store_true", default=False)
    parser.add_argument("-r", "--reverse", help="sort bugs in reverse order (descending)", action="store_true", default=False)
    q_group = parser.add_mutually_exclusive_group()
    q_group.add_argument("-e", "--email", help="instead of incoming CVE queue, display CVE queue for another email; including info about the last comment for each bug", default='kernel-bugs@suse.de', type=str)
    q_group.add_argument("-k", "--cve-kpm", help="show CVE Kernel Patch Monkey queue", action="store_true", default=False)
    q_group.add_argument("-q", "--assigned-queue", help="show already assigned bugs", action="store_true", default=False)
    parser.add_argument("-R", "--rejected", help="show rejected CVEs if any", action="store_true", default=False)
    parser.add_argument("-g", "--grep", help="grep summary for REGEX and show only bugs that match it", default=None, type=str)
    parser.add_argument("-G", "--grep-paths", help="grep fix commit paths for REGEX and show only bugs with fix commits that match it", default=None, type=str)
    parser.add_argument("-P", "--grep-patch", help="grep fix commit patch for REGEX and show only bugs with fix commits that match it", default=None, type=str)
    parser.add_argument("-T", "--grep-comments", help="grep bugzilla comments and show only bugs that match including the matching comments (highlighted)", default=None, type=str)
    parser.add_argument("-a", "--ages", help="show only tickets of a particular age in days; X means X days old or older and X:Y means betwen X and Y days old, inclusive", default=None, type=str)
    parser.add_argument("-m", "--modulo", help="takes two integers in the format \"Q:R\" and shows only bugs with IDs that satisfy N %% Q == R", default=None, type=str)
    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()
    grep = handle_grep(args.grep)
    grep_paths = handle_grep(args.grep_paths)
    grep_patch = handle_grep(args.grep_patch)
    grep_comments = handle_grep(args.grep_comments)
    q, r = handle_modulo(args.modulo)
    x, y = handle_ages(args.ages)
    email = handle_email(args.email)
    if args.cve_kpm:
        email = 'cve-kpm@suse.de'
    if args.assigned_queue:
        email = None
    bzapi = BZApi()
    bugs = bzapi.fetch_bugs(email)
    published, rejected = fetch_cves()
    linux_git = MainlineRepo()

    if args.colors:
        show_colors = True
    elif args.no_colors:
        show_colors = False

    bugs = [ BugData(b, published, rejected) for b in bugs ]

    if args.rejected:
        bugs = [ b for b in bugs if b.is_rejected ]

    if args.whiteboard or args.sort_score or args.check_kernel_fix:
        bugs = [ b for b in bugs if b.data.status_whiteboard ]
    elif args.no_whiteboard:
        bugs = [ b for b in bugs if not b.data.status_whiteboard ]

    if grep:
        bugs = [ b for b in bugs if re.search(grep, b.data.summary) ]

    if grep_paths:
        bugs = [ b for b in bugs if b.grep_paths(grep_paths, linux_git) ]
        args.files = True

    if grep_patch:
        bugs = [ b for b in bugs if b.grep_patch(grep_patch, linux_git) ]

    if q:
        bugs = [ b for b in bugs if b.data.id % q == r ]

    bzapi.fetch_comments(bugs)

    if grep_comments:
        bugs = [ b for b in bugs if b.grep_comments(grep_comments) ]

    if x is not None and y is None:
        bugs = [ b for b in bugs if b.age >= x ]
    elif x is not None and y is not None:
        bugs = [ b for b in bugs if b.age <= x and b.age >= y ]

    if args.analyze_vector and not args.short:
        bugs = [ b.with_score_vector() for b in bugs if b.data.status_whiteboard ]
        args.short = True

    if args.sort_score:
        keyf = lambda x: float(x.score or 0.0)
    elif args.sort_cve:
        keyf = lambda x: x.cve
    elif args.sort_time:
        keyf = lambda x: x.mtime
    elif args.sort_changes:
        bugs = [ b for b in bugs if b.get_stats(linux_git) > 0 ]
        keyf = lambda x: x.changes
    else:
        keyf = lambda x: x.data.id

    for n, b in enumerate(sorted(bugs, key=keyf, reverse=args.reverse), 1):
        if not args.check_kernel_fix:
            show_bug(n, b, linux_git, args.short, args.files, args.birth_time, args.patch, args.stats_info)
        else:
            check_kernel_fix(b)
