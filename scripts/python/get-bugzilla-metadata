#!/usr/bin/python3
import sys, bugzilla, time, requests, argparse, re
from bugzilla.utils import get_bugzilla_api, check_being_logged_in, make_unique, make_url, format_time

CVSS_PATTERN = re.compile(r"CVSSv3.1:SUSE:CVE-[0-9]{4}-[0-9]{4,}:([0-9].[0-9])")
inner_delimiter = None

def get_score(s):
    m = re.search(CVSS_PATTERN, s)
    return m.group(1) if m else ''

def inner_array_transform(a):
    return inner_delimiter.join(a)

def inner_string_transform(s):
    return s.replace(' ', inner_delimiter)

ALLOWED_FIELDS = {
    'bugzilla_url': ('id', make_url, ' - made from the bug ID'),
    'alias': ('alias', make_unique, ' - the same as "cve"'),
    'cve': ('alias', make_unique, ' - the same as "alias"'),
    'id': ('id', None, ' - the same as "bug"'),
    'bug': ('id', None, ' - the same as "id"'),
    'reported': ('creation_time', format_time, ' - timestamp; the same as "created"'),
    'created': ('creation_time', format_time, ' - timestamp; the same as "reported"'),
    'assignee': ('assigned_to', None, ' - an email'),
    'priority': ('priority', None, ' - P0 - P1'),
    'status': ('status', None, ' - NEW, RESOLVED, REOPENED, IN_PROGRESS,...'),
    'whiteboard': ('status_whiteboard', inner_string_transform, ' - typically contains CVE score vectors (v3.1 and v4.0)'),
    'modified': ('last_change_time', format_time, ' - timestamp; the same as "changed"'),
    'changed': ('last_change_time', format_time, ' - timestamp; the same as "modified"'),
    'url': ('url', None, ' - usually a link to SMASH'),
    'score': ('status_whiteboard', get_score, ' - CVSS v3.1 score'),
    'summary': ('summary', None, ' - the same as "subject"'),
    'subject': ('summary', None, ' - the same as "summary"'),
    'hw': ('platform', None, ' - the same as "arch"'),
    'arch': ('platform', None, ' - the same as "hw"'),
    'cc': ('cc', inner_array_transform, ' - cc list'),
    'product': ('product', None, ' - SUSE Linux Enterpriser Server, SUSE Security Incidents...'),
    'component': ('component', None, ' - Kernel, Incidents...'),
    'author': ('creator', None, ' - the same as "creator"'),
    'creator': ('creator', None, ' - the same as "author"'),
    'keywords': ('keywords', inner_array_transform, ' - keyword list'),
    'see_also': ('see_also', inner_array_transform, ' - usually urls to other bug trackers'),
    'tags': ('tags', inner_array_transform, ' - personal tags, nobody but you can see them'),
}

RETRIES, INITIAL_BACKOFF = 9, 1

def show_creation_date(delimiter, bug_order, field_list, bug_list, cve_list):
    fields_to_query= list({ ALLOWED_FIELDS[f][0] for f in field_list } | { 'id', 'alias' })
    bugs_by_id, bugs_by_cve = dict(), dict()
    backoff, waiting = INITIAL_BACKOFF, 1
    for i in range(1, RETRIES):
        try:
            bzapi = get_bugzilla_api()
            if not check_being_logged_in(bzapi):
                sys.exit(3)
            if bug_list and not bugs_by_id:
                tmp = bzapi.getbugs(bug_list, include_fields=fields_to_query)
                bugs_by_id = { b.id: b for b in tmp }
            if cve_list and not bugs_by_cve:
                tmp = bzapi.query(bzapi.build_query(alias=cve_list, include_fields=fields_to_query))
                bugs_by_cve = { make_unique(b.alias): b for b in tmp }
        except Exception as e:
            try:
                print(f"Couldn't query bugzilla ({e}) retrying in {backoff * 2} seconds!", file=sys.stderr)
                backoff *= 2
                waiting += backoff
                time.sleep(backoff)
            except KeyboardInterrupt:
                print(f"The script was interrupted after {i + 1} attempts and less than {waiting} seconds", file=sys.stderr)
                sys.exit(i + 1)
            continue
        else:
            break
    else:
        print(f"Couldn't query bugzilla after {RETRIES} attempts and {waiting} seconds!", file=sys.stderr)
        sys.exit(RETRIES)
    all_the_bugs = { **bugs_by_id, **bugs_by_cve }
    bugs = None
    try:
        bugs = [ all_the_bugs[b if b.startswith('CVE-') else int(b)] for b in bug_order ]
    except KeyError as e:
        print(f"Couldn't find {e}", file=sys.stderr)
        sys.exit(1)
    for b in bugs:
        for n, f in enumerate(field_list):
            value, fun, _ = ALLOWED_FIELDS[f]
            value = getattr(b, value)
            if n:
                print(delimiter, end='')
            if fun:
                value = fun(value)
            print(value, end='')
        print()

def handle_fields(field_list):
    ret = []
    for f in field_list.split(','):
        string = f.strip()
        if string in ALLOWED_FIELDS:
            ret.append(string)
        else:
            print(f'{f} is not an allowed field', file=sys.stderr)
    if not ret:
        print('You must provide at least one field!', file=sys.stderr)
        sys.exit(1)
    return ret

def parse_args():
    parser = argparse.ArgumentParser(description="get metadata", formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-d", "--delimiter", help="A string used as a delimiter (default: ';')", type=str, default=';')
    parser.add_argument("-D", "--inner-delimiter", help="A string used as a inner delimiter, used in cc or whiteboard lists (default: ' ')", type=str, default=' ')
    parser.add_argument("-i", "--stdin", help="Read the list of bugs from stdin, one per line.", action="store_true", default=False)
    parser.add_argument("-f", "--fields", help="Comma separated list of fields to display\n(default: 'bugzilla_url,reported,assignee,priority,status,alias')\n"
                        + "\n".join([ f'{k:>15}{ALLOWED_FIELDS[k][2]}' for k in sorted(ALLOWED_FIELDS.keys()) ]),
                        default="bugzilla_url,reported,assignee,priority,status,alias")
    parser.add_argument('list_of_bugs', nargs=argparse.REMAINDER, default=None)
    return parser.parse_args()

def main(argv):
    args = parse_args()

    global inner_delimiter
    inner_delimiter = args.inner_delimiter

    list_of_bugs = args.list_of_bugs
    if args.stdin:
        list_of_bugs = [ l.strip() for l in sys.stdin.readlines() ]

    if not list_of_bugs:
        print("You must provide at least one bug number or CVE number!", file=sys.stderr)
        sys.exit(1)

    for a in list_of_bugs:
        for c in a:
            if c not in 'CVE-0123456789':
                print(f"{a} contains '{c}', which is not allowed!", file=sys.stderr)
                sys.exit(1)

    field_list = handle_fields(args.fields)

    bug_list, cve_list = [], []
    try:
        bug_list = [ int(b) for b in list_of_bugs if not b.startswith('CVE-') ]
        cve_list = [ b for b in list_of_bugs if b.startswith('CVE-') ]
    except:
        print(f"Inputs must be bug numbers or CVE numbers: {list_of_bugs}", file=sys.stderr)
        sys.exit(2)

    show_creation_date(args.delimiter, list_of_bugs, field_list, bug_list, cve_list)

main(sys.argv)
