#!/usr/bin/python3

import argparse
import errno
import shutil
import subprocess
import sys
import os
import os.path

sys.path.append(os.path.join(os.path.dirname(__file__), "../python"))
from suse_git.patch import Patch

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Merge references in patch file")
    parser.add_argument("--ours", help="Only merge references, keep our version of patch")
    parser.add_argument("mergetool", nargs=4)

    args = parser.parse_args()
    local_path, base_path, remote_path, merged_path = args.mergetool

    local_patch = Patch(open(local_path, "rb"))
    base_patch = Patch(open(base_path, "r+b"))
    remote_patch = Patch(open(remote_path, "r+b"))
    shutil.copy(local_path, merged_path )
    merged_patch = Patch(open(merged_path, "r+b"))

    args.ours = os.stat(base_path).st_size == 0

    local_refs = local_patch.get_list_normalized("References")
    base_refs = base_patch.get_list_normalized("References")
    remote_refs = remote_patch.get_list_normalized("References")


    # Remove refs that remote removed and add refs that are new for us
    removed_refs = base_refs - remote_refs
    merged_refs = (local_refs - removed_refs) | remote_refs

    # Use trick from git_sort/merge_tool.py by resolving all but refs via `merge` utility
    # XXX refactor to a single function, incl. ENOENT const below
    for p in [merged_patch, base_patch, remote_patch]:
        try:
            p.change("References", " ".join(merged_refs), Patch.ChangeMode.ALL_WITH_ONE)
            p.writeback()
        except KeyError as e:
            if p == merged_patch:
                raise
            # References are alloed to be missing in unmerged sources

    result = 0
    if args.ours:
        print("Info: Using --ours")
    else:
        try:
            cmd = "merge"
            name_ours = "%s.ours%d" % (merged_path, os.getpid(),)
            result = subprocess.call([cmd, merged_path, base_path, remote_path])
        except OSError as e:
            if e.errno == 2:
                print("Error: could not run `%s`. Please make sure it is "
                      "installed (from the \"rcs\" package)." % (cmd,),
                      file=sys.stderr)
                sys.exit(1)
            else:
                raise
    if result != 0:
        name = "%s.merged%d" % (merged_path, os.getpid(),)
        print("Warning: conflicts outside of References:, leaving "
              "merged result in %s " % (name,))
        shutil.copy(merged_path, name)
    sys.exit(result)
