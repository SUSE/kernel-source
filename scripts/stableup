#!/usr/bin/perl
use strict;
use warnings;
use Error qw(:try);
use Git;
use Term::ANSIColor qw(colored);

if (scalar @ARGV < 1) {
	print "Usage: $0 stable_version [nonzero_to_force_removal]\n";
	exit 1;
}

die "LINUX_GIT not set" unless ($ENV{'LINUX_GIT'});

my $linux = Git->repository(Directory => $ENV{'LINUX_GIT'});
my $suse = Git->repository();
my $stable_ver = $ARGV[0];
my $force_removal = $ARGV[1] // 0;
my $old_version;
my $new_version;
my $bsc;

my %bsc_map = (
	'other' => '1012628',
);

if ($stable_ver !~ /^v?(([3-9]\.[0-9]+)\.([0-9]+))$/) {
	die "cannot understand stable version $stable_ver";
}
$new_version = $1;
$old_version = $2;
$bsc = $bsc_map{$old_version};
if ($3 ne 1) {
	$old_version .= '.' . ($3 - 1);
}

if (!defined $bsc) {
	print colored("Kernel version not found in the map, assuming Tumbleweed\n", 'red');
	$bsc = $bsc_map{'other'};
}

my $destdir = "patches.kernel.org";
mkdir $destdir if (! -d $destdir);
my $range = "v$old_version..v$new_version";
my @revs = $linux->command('rev-list', '--reverse', $range);
my @added_files;
my @removed_files;
my %ids;
my $digits = length scalar @revs;
my $counter = 1;
my $sha_re = qr/[0-9a-f]{40}/;

$digits = 3 if ($digits < 3);

# INSERT upstream patches

sub parse_commit($$$) {
	my ($rev, $shas, $unmatched_shas) = @_;
	my $cont = 0;

	my ($filename, @commit_log) = $linux->command('show', '--no-patch',
		'--format=%f%n%B', $rev);

	foreach (@commit_log) {
		if ($cont) {
			if (/^\s+($sha_re)\s*[\])]$/) {
				push @{$shas}, $1;
				$cont = 0;
				next;
			}
		}
		if (/^[Cc]ommit ($sha_re) upstream\.?$/ ||
			/^[\[(]\s*[Uu]pstream commit ($sha_re)\s*[\])]$/ ||
			/^[uU]pstream commit ($sha_re)\.$/ ||
			/^This is a backport of ($sha_re)$/) {
			push @{$shas}, $1;
		} elsif (/^\(cherry picked from commit ($sha_re)\)$/) {
			# if this is not the first SHA, it's likely DRM crap
			push(@{$shas}, $1) if (!scalar @{$shas});
		} elsif (/^[\[(]\s*[Uu]pstream commits ($sha_re)\s+and\s*$/) {
			push @{$shas}, $1;
			$cont = 1;
		} elsif (/^(Fixes:|This reverts commit) $sha_re(?: \(".*)?\.?$/ ||
			/^Link: .*lkml/) {
			# ignore
		} elsif (/\b$sha_re\b/) {
			push @{$unmatched_shas}, $_;
		}
	}

	# better than nothing
	if (!scalar @{$shas}) {
		push @{$shas}, $rev;
	}

	return $filename;
}

sub store_patch($$$) {
	my ($rev, $shas, $filename) = @_;
	my @patch = $linux->command('format-patch', '--stdout',
		'--signoff', '--no-renames',
		'-1', $rev,
		'--add-header', "References: bsc#$bsc",
		'--add-header', "Patch-mainline: $new_version",
		(map { ('--add-header', "Git-commit: $_") } @{$shas}));

	# drop From
	shift(@patch) =~ /^From/ or die "From line is not the first one?";

	my $newname = sprintf("${new_version}-%0${digits}d-%s", $counter,
		$filename);
	# 57 is what git-format-patch uses
	$newname =~ s/^(.{1,57}).*$/$1.patch/;
	my $newpath = "$destdir/$newname";

	open(my $patch_fd, '>', $newpath) or die "cannot output to $newpath";
	print $patch_fd join "\n", @patch;
	print $patch_fd "\n";
	close $patch_fd;

	return $newpath;
}

foreach my $rev (@revs) {
	my @shas;
	my @unmatched_shas;

	my $filename = parse_commit($rev, \@shas, \@unmatched_shas);
	my $newpath = store_patch($rev, \@shas, $filename);

	$ids{$newpath} = [ @shas ];

	$rev =~ /.{12}/;
	print colored($&, 'yellow'), " -> $newpath\n";
	foreach (@shas) {
		/.{12}/;
		print "\tUpstream SHA: ", colored("$&\n", "yellow");
	}
	foreach (@unmatched_shas) {
		print colored("\tUNMATCHED SHA:", 'bold red'), " $_\n";
	}

	push @added_files, $newpath;

	$counter++;
}

print colored("Adding to GIT\n", 'yellow');
$suse->command('add', @added_files);

# === REMOVE our patches ===

sub output_refs($@) {
	my ($fh, @refs) = @_;
	my %uniq = map { $_ => 1 } @refs;
	print $fh "References: ", join(' ', sort keys %uniq), "\n";
}

sub push_refs($@) {
	my ($dest, @refs) = @_;

	open(my $dest_fh, '<', $dest) or die "cannot open $dest for reading";
	my @dest = <$dest_fh>;
	close $dest_fh;

	open($dest_fh, '>', $dest) or die "cannot open $dest for writing";
	my $had_git_commit = 0;
	foreach my $line (@dest) {
		if (!$had_git_commit && $line =~ /^Git-commit: /) {
			output_refs($dest_fh, @refs);
			$had_git_commit = 1;
		} elsif ($line =~ /^References: (.*)$/) {
			chomp $1;
			push @refs, (split /[\s,]+/, $1);
			next;
		}
		print $dest_fh $line;
	}
	close $dest_fh;
}

my %files;
my $tags_re = qr/(?:Git-[Cc]ommit: |Patch-[Mm]ainline: |From )([0-9a-f]{40})/;

sub handle_removal($$) {
	my ($line, $dest) = @_;
	my ($file, $match) = $line =~ /^(.+)\x00($tags_re)?/;
	die "cannot match file in the git-grep output" unless defined $file;

	$files{$file} = 1;

	# weird git-commit tag or file may be deleted already
	return unless (defined $match && -f $file);

	print "\t$file\n";

	open(my $patch_fd, '<', $file) or die "cannot open $file";
	my %shas = ();
	my @refs = ();
	while (my $line = <$patch_fd>) {
		chomp $line;
		$shas{$1} = 1 if ($line =~ /^$tags_re/);
		if ($line =~ /^References: (.*)$/) {
			push @refs, (split /[\s,]+/, $1);
		}
	}
	close $patch_fd;

	return unless ($force_removal or scalar(keys %shas) == 1);

	try {
		$suse->command('rm', '--', $file);
	} catch Git::Error::Command with {
		# sometimes, they are dirty
	};

	push @removed_files, $file;

	if (scalar @refs) {
		if (-f $dest) {
			push_refs($dest, @refs);
		} else {
			print STDERR colored("\tmissed references:\n\t", 'red');
			output_refs(\*STDERR, @refs);
		}
	}
}

sub possibly_remove($) {
	my ($candidates) = @_;

	foreach my $patch (sort keys %ids) {
		my $re = join("|", @{$ids{$patch}});
		next if ($re eq "");

		try {
			foreach ($suse->command('grep', '-Ez', $re, '--',
					@{$candidates})) {
				handle_removal($_, $patch);
			}
		} catch Git::Error::Command with {
			# not found is OK
		};
	}
}

print colored("Removing superseded files\n", "yellow");
my $regexp = join "|", map @$_, values %ids;
if ($regexp eq "") {
	print STDERR colored("empty regexp computed? Skipping patches removal...\n", 'yellow');
} else {
	try {
		my @candidates = $suse->command('grep', '-El', $regexp, '--',
			'patches.*', ':^patches.kernel.org/');
		possibly_remove(\@candidates);
	} catch Git::Error::Command with {
		# not found is OK
	};
}

print colored("Updating series.conf\n", 'yellow');
open(my $series_fd, '<', 'series.conf') or die "cannot open series.conf for reading";
my $series;
{
	local $/;
	$series = <$series_fd>;
}
close $series_fd;

my $newfiles = join "\n", map { "\t$_" } @added_files;
unless ($series =~ s/(latest standard kernel patches(?:\n[^\n]+)+\n)\n/$1$newfiles\n\n/) {
	die "cannot find a place in series.conf to add a patch";
}

# we have to iterate as "empty or non-comment line" might have been the
# previous one (if we used the /g modifier)
foreach my $file (@removed_files) {
	$series =~ s@
		(?:
			# empty or non-comment line
			(^(?:$|[ \t]*[^ \t#].*)\n)
			# comment to be deleted
			[ \t]*\#.*\n
		)?
		[ \t]+\Q$file\E[ \t]*\n
		@$1 // ""@mex;
}

open($series_fd, '>', 'series.conf') or die "cannot open series.conf for writing";
print $series_fd $series;
close $series_fd;

# === REPORT weird entries ===

foreach my $file (keys %files) {
	next unless (-e $file);

	try {
		$suse->command_noisy('grep', '-E', $regexp, '--', $file);
	} catch Git::Error::Command with {
		# not found is OK
	};
}

0;
