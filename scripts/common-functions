#!/bin/bash
# vim: sw=4:sts=4:et

get_cache_dir()
{
    local CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/check-kernel-fix"
    mkdir -p "${CACHE_DIR}"
    echo "${CACHE_DIR}"
}

fetch_cache()
{
    local CACHE_URL=$1
    local CACHE_FILE=$2
    local EXPIRE=$3
    local REFRESH=$4

    [ -n "$REFRESH" ] && rm "$CACHE_FILE" 2>/dev/null
    if [[ $(find "$CACHE_FILE" -mtime -${EXPIRE:-7} -print 2>/dev/null) \
            && -s "$CACHE_FILE" ]]; then
        echo $CACHE_FILE
        return
    fi
    curl --fail -L "$CACHE_URL" -o "$CACHE_FILE" >/dev/null 2>&1
    [ -e "$CACHE_FILE" ] || fail "unable to fetch $CACHE_URL"
    echo $CACHE_FILE
}

fetch_branches()
{
    local CACHE_DIR="$(get_cache_dir)"
    local CACHED_BRANCHES="${CACHE_DIR}/branches.conf"
    local URL="https://kerncvs.suse.de/branches.conf"
    local REFRESH=$1
    fetch_cache $URL $CACHED_BRANCHES 7 $REFRESH
}

fetch_cve2bugzilla()
{
    local CACHE_DIR="$(get_cache_dir)"
    local CACHED_CVE2BSC="${CACHE_DIR}/cve2bugzilla"
    local URL="https://gitlab.suse.de/security/cve-database/-/raw/master/data/cve2bugzilla"
    local REFRESH=$1
    fetch_cache $URL $CACHED_CVE2BSC 1 $REFRESH
}

fetch_conf_file_map()
{
    local CACHE_DIR="$(get_cache_dir)"
    local CACHED_CONF_FILE_MAP="${CACHE_DIR}/conf_file_map.sqlite"
    local URL="https://kerncvs.suse.de/conf_file_map.sqlite"
    local REFRESH="$1"
    fetch_cache "$URL" "$CACHED_CONF_FILE_MAP" 7 "$REFRESH"
}

cve2bugzilla()
{
    local CVE=$1
    local CVE2BUGZILLA=$(fetch_cve2bugzilla $2)
    local NR_TO_REPORT=1
    # ./scripts/python/cve2bsc can take multiple CVEs or bug aliases and prints either a bug number or a zero
    # in case of lookup failure per line in the same order or just one zero in case of a complete failure
    local BSC=$(./scripts/python/cve2bsc $CVE)
    if [[ $BSC -gt 0 ]]; then
	echo -n "bsc#$BSC"
    else
	# The first bsc should be the actual report others are product specific (e.g. LP)
	for BSC in $(grep -w $CVE $CVE2BUGZILLA | cut -d: -f2 | head -n $NR_TO_REPORT)
	do
	    echo -n "bsc#$BSC"
	done
    fi
}

fetch_cve2cvss()
{
    local CACHE_DIR="$(get_cache_dir)"
    local CACHED_CVE2CVSS="${CACHE_DIR}/cve2cvss"
    local URL="http://ftp.suse.com/pub/projects/security/yaml/suse-cvss-scores.yaml"
    local REFRESH=$1
    fetch_cache $URL $CACHED_CVE2CVSS 1 $REFRESH
}

cve2cvss()
{
    local CVE=$1
    local REFRESH=$2
    local CVE2CVSS=$(fetch_cve2cvss $REFRESH)
    local cvss="$(grep -w $CVE -A3 $CVE2CVSS | grep score:)"

    echo ${cvss##*:}
}

cve2sha()
{
	local arg=$1
	local REFRESH=$2
	local sha="$(cd $VULNS_GIT; [ -n "$REFRESH" ] && git pull >/dev/null 2>&1; scripts/cve_search $arg 2>/dev/null | head -n1 | cut -d" " -f7)"
	
	if [ $(echo $sha | wc -c) -eq 41 ]
	then
		echo $sha
	fi
}

is_cve_rejected()
{
	local cve=$1
	local found=$(find $VULNS_GIT/cve/rejected/ -iname "$cve.sha1" 2>/dev/null | wc -l)
	[ $found -eq 1 ] && return 0
	return 1
}

sha2cve()
{
	local arg=$1
	local REFRESH=$2
	local greg_says
	greg_says="$(cd $VULNS_GIT; [ -n "$REFRESH" ] && git pull >/dev/null 2>&1; scripts/cve_search $arg 2>/dev/null)"
	[ $? -eq 0 ] || return
	local cve_sha="$(cut -d" " -f1,7 <<<"$greg_says")"
	echo ${cve_sha%% *}
}

sha2files()
{
	local sha="$1"
	git --git-dir=$LINUX_GIT/.git show --pretty="" --name-only "$sha" -- '*.c'
}

check_config()
{
	local branch="$1"
	local CONF_FILE_MAP="$2"
	shift 2
	declare -a files=()
	local failed=0
	local conf_num=0

	for file
	do
		# split and quote (for SQL syntax) and use doubled quotes when
		# a quote is in filename (likely impossible in the kernel)
		# D/ab.c  -> ('D', 'ab.c')    OR    D/a'b.c  ->  ('D', 'a''b.c')
		local dir="${file%/*}"
		dir="${dir//\'/\'\'}"
		file="${file##*/}"
		file="${file//\'/\'\'}"
		files+=( "('$dir', '$file')" )

	done
	local OLD_IFS="$IFS"
	IFS=,
	files="${files[*]}"
	IFS="$OLD_IFS"
	while read conf
	do
		conf_num=$(($conf_num+1))
		if ! git grep -qiE "$conf=(y|m)" origin/${branch#origin/} -- config
		then
			echo -e "\tWW $conf not enabled."
			failed=$(($failed+1))
		fi
	done < <(sqlite3 -batch -noheader -csv "$CONF_FILE_MAP" \
		"SELECT DISTINCT map.config
			FROM conf_file_map_view_raw_file AS map
			WHERE map.branch='$branch' AND
			map.file IN (SELECT file.id
				FROM file
				LEFT JOIN dir ON file.dir=dir.id
				WHERE (dir.dir, file.file) IN ($files))
			ORDER BY map.config;")

	if [ $failed -gt 0 -a $failed -lt $conf_num ]
	then
		echo -e "\tWW $failed out of $conf_num disabled."
	fi
}

print_merge_branches()
{
    local branches_conf="$1"
    local branch="$2"
    local merge_branch=

    [ -z "$branches_conf" ] && fail "megre_branches: No branches_conf provided"
    [ -z "$branch" ] && fail "merge_branches: No branch provided"

    local word=
    for word in $(grep -w "^$branch:" "$branches_conf") ; do
	if [ "${word#merge:}" != "$word" ] ; then
	    merge_branch="${word#merge:}"
	    merge_branch="${merge_branch#-}"
	    [ -z "$merge_branch" ] && fail "print_merge_branges: non supported syntax"
	    echo "$merge_branch"
	fi
    done
}

merge_topo_sort()
{
	local branches_conf=$1
	awk '	/^#/{next}
		/^(master|vanilla|linux-next|stable|slowroll)/{next}
		!/\<build\>/{next}
		{
			gsub("merge:-", "merge:")
			branch=substr($1, 0, length($1)-1)
			printf "%s %s\n", branch, branch
			for (w=2; w <= NR; w++) {
				if (index($w, "merge:")) {
					dep=substr($w, 7)
					printf "%s %s\n", dep, branch
				}
			}
		}' "$branches_conf" | tsort -
}

for_each_build_branch()
{
    local branches_conf="$1"
    local fn="$2"
    shift 2
    local args=("$@")

    while read line ; do
	line="${line%%\#*}"
	branch="${line%%:*}"

	# empty line or comment
	if [ -z "$branch" ] ; then
	   continue
	fi

	$fn "$branch" "${args[@]}" || break
    done < <(merge_topo_sort "$branches_conf")
}

for_each_build_branch_paralel()
{
    local branches_conf="$1"
    local fn="$2"
    shift 2
    local args=("$@")
    local pids=""

    while read line ; do
       line="${line%%\#*}"
       branch="${line%%:*}"

       # empty line or comment
       if [ -z "$branch" ] ; then
          continue
       fi

       $fn "$branch" "${args[@]}" &
       pids="$pids $!"
    done < <(merge_topo_sort "$branches_conf")

    wait $pids
}

fail()
{
	echo $* >&2
	exit 1
}

branch_base_ver()
{
    local branch="$1"
    git show-ref --verify --quiet "refs/remotes/origin/${branch#origin/}" || fail "$branch invalid branch. Please git fetch origin."

    local base_ver="v$(git grep SRCVERSION origin/${branch#origin/} -- rpm/config.sh | sed 's@.*=@@')"

    echo $base_ver
}

is_upstream_sha()
{
	local sha="$1"
	git --git-dir="$LINUX_GIT/.git" show "$sha" > /dev/null 2>&1
}

sha_get_upstream_git_fixes()
{
    local sha=$1
    local cve=$2
    local fix=""
    local fixes=""

    [ -z "$sha" ] && fail "No commit provided"
    [ -z "$LINUX_GIT" ] && fail "No upstream git tree"

    for fix in $(git --git-dir="$LINUX_GIT/.git" show $sha | grep -i "^[[:space:]]*fixes:" | awk '{print $2}')
    do
	    is_upstream_sha "$fix" && fixes="$fixes $fix"
    done

    # No Fixes tag
    if [ -z "$fixes" ]
    then
	    # Try revert first
	    fixes="$(git --git-dir="$LINUX_GIT/.git" show $sha | grep -i "This reverts commit" | sed 's@.* \([0-9a-f]\+\)\.@\1@')"

	    # Try ./cve/published/*/cve.vulnerable
	    if [ -z "$fixes" -a -n "$cve" -a -d "$VULNS_GIT" ]
	    then
		    has_vulnerable="$(find $VULNS_GIT/cve/published/ -iname "$cve.vulnerable")"
		    [ -f "$has_vulnerable" ] && fixes="$(cat $has_vulnerable)"
	    fi
    fi

    echo $fixes

    exit 1
}

print_upstream_sha_info()
{
    local sha=$1

    echo -n "$(git --git-dir="$LINUX_GIT/.git" show  -s --pretty='format:%h ("%s")' $sha) merged "
    git --git-dir="$LINUX_GIT/.git" describe --contains --abbrev=0 --match="v*" $sha
}

print_upstream_sha_summary()
{
    local sha=$1
    local fixes=$2
    local has_fixes=0

    print_upstream_sha_info $sha
    local fix=
    for fix in $fixes
    do
	    echo -n "Fixes: "
	    print_upstream_sha_info $fix
	    has_fixes=1
    done

    if [ $has_fixes -eq 0 ]
    then
	    echo "No Fixes tag. Requires manual review for affected branches."
    fi
}

sha_merged_in_upstream_tag()
{
    local sha=$1
    local base=$2

    [ -z "$sha" ] && fail "sha_merged_in_upstream_tag: No sha provided"
    [ -z "$base" ] && fail "sha_merged_in_upstream_tag: No base provided"

    git --git-dir="$LINUX_GIT/.git" merge-base --is-ancestor "$sha" "$base" 2>/dev/null
}

sha_in_upstream()
{
    local sha=$1

    [ -z "$sha" ] && fail "sha_in_upstream: No sha provided"

    sha_merged_in_upstream_tag $sha origin/master
}

affected_by_git_fixes()
{
    local branch="$1"
    local base="$2"
    shift 2
    local git_fixes="$@"

    [ -z "$branch" ] && fail "affected_by_git_fixes: No branch provided"
    [ -z "$base" ] && fail "affected_by_git_fixes: No tag provided"

    # Check git fixes when the bug was introduced
    local affected_by=

    local in_base=
    local in_backport=
    local git_fix=
    for git_fix in $git_fixes ; do
	in_base=0
	in_backport=0

	# Is it merged in the upstream base kernel?
	if sha_merged_in_upstream_tag "$git_fix" "$base" ; then
	    in_base=1
	fi

	# Do we have it backported?
	if sha_merged_in_suse_tree "$git_fix" "$branch" ; then
	    in_backport=1
	fi

	[ $in_backport -eq 1 ] && affected_by="$affected_by $git_fix"
	[ $in_base -eq 1 ] && affected_by="$affected_by $base"
    done

    if [ -n "$affected_by" ] ; then
	echo "Fixes: $affected_by"
    fi
}

sha_to_patch_in_branch()
{
    local sha="$1"
    local branch="$2"

    [ -z "$sha" ] && fail "sha_to_patch_in_branch: No sha provided"
    [ -z "$branch" ] && fail "sha_to_patch_in_branch: No branch provided"

    branch_file=$(git --no-pager grep -l -i -E "^(git|alt)-commit[[:space:]]*:[[:space:]]*$sha" "origin/${branch#origin/}" -- 'patches.*' 2>/dev/null )

    echo "${branch_file#origin/$branch:}"
}

sha_merged_in_suse_tree()
{
    local sha="$1"
    local branch="$2"

    [ -z "$sha" ] && fail "sha_merged_in_suse_tree: No sha provided"
    [ -z "$branch" ] && fail "sha_merged_in_suse_tree: No branch provided"

    local patch=$(sha_to_patch_in_branch "$sha" "$branch")

    test -n "$patch"
}

patch_has_reference()
{
    local ref="$1"
    local patch="$2"

    [ -z "$patch" ] && fail "No patch provided"
    [ -z "$ref" ] && fail "No reference provided"

    grep -q -i "^references:.*$ref" "$patch"
}

patch_has_reference_in_branch()
{
    local patch="$1"
    local ref="$2"
    local branch="$3"

    [ -z "$patch" ] && fail "patch_has_reference_in_branch: No patch provided"
    [ -z "$ref" ] && fail "patch_has_reference_in_branch: No reference provided"
    [ -z "$branch" ] && fail "patch_has_reference_in_branch: No branch provided"

    git --no-pager grep -w -q -i "^references:.*$ref" "origin/${branch#origin/}" -- "$patch"
}

pending_pr_branches()
{
	local branch=$1
	git --no-pager branch -r --no-merged origin/${branch#origin/} "*/users/*/${branch#origin/}/for-next"
}
