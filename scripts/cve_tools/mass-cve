#!/bin/bash

# Usage
# scripts/cve_tools/mass-cve
# 	- without arguments checks all maintained branches for all published CVEs
# scripts/cve_tools/mass-cve BRANCH1 [BRANCH2...]
# 	- checks all listed branches for all published CVEs
# 
# If executed in all branch mode then processed CVEs are cached in 
# $HOME/.cache/mass-cve/sha-list.done
# to speed up next execution. Remove the file if you need a clean run
#
SCRIPTS_DIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/..
. "$SCRIPTS_DIR/common-functions"

SHA_LIST=/tmp/$USER-sha-list
CACHE_DIR=$HOME/.cache/mass-cve
DONE_FILE="$CACHE_DIR/sha-list.done"
OUT_DIR="/tmp/$USER-mass-cve.$(date +%s)"
if [ -z "$CVEKERNELTREE" ]
then
	export CVEKERNELTREE=$LINUX_GIT
fi

[ ! -d $CACHE_DIR ] && mkdir -p $CACHE_DIR

build_sha_list()
{
	filter="$1"
	find $VULNS_GIT/cve/published -name "*.sha1" | xargs awk '{print $1}' | $filter > $SHA_LIST
}

file2sha()
{
	local pattern="$1"
	local file=$2
	local branch=$3

	git grep -i "$pattern" $branch -- $file | cut -d" " -f2
}

parent_has_patch()
{
	local file=$1
	local parents="$2"

	for parent in $parents
	do
		# If parent has the file then it either has all the references or
		# we do not care
		git show origin/$parent:$file >/dev/null 2>&1 && return 0
	done

	return 1
}

warn()
{
	echo "WW $@" >&2
}

check_branch_state()
{
	local branch=$1
	local parents="$(print_merge_branches $branches_conf $branch)"
	local branch_file="$OUT_DIR/${branch/\//-}"

	[ ! -d "$OUT_DIR" ] && mkdir -p "$OUT_DIR"
	[ -f $branch_file ] && rm $branch_file
	touch $branch_file

	for file in $(git grep -i -f $SHA_LIST -l origin/$branch | grep -v patches.kabi | sed 's@.*:@@' )
	do
		[ $file = "blacklist.conf" ] && continue

		parent_has_patch $file "$parents" && continue

		sha=$(file2sha "^git-commit:" $file origin/$branch)
		cve=$(sha2cve $sha)
		if [ -z "$cve" ]
		then
			alt_sha=$(file2sha "^alt-commit:" $file origin/$branch)
			cve=$(sha2cve $alt_sha)
		fi
		if [ -z "$cve" ]
		then
			if git grep -iq "This reverts commit" origin/$branch -- $file
			then
				warn $branch "$file is a revert of $sha which has a CVE"
			else
				warn $branch "$file matches CVE sha but it doesn't reference it"
			fi
			continue
		fi

		bsc=$(cve2bugzilla $cve)
		if [ -n "$bsc" ]
		then
			bsc="-r $bsc"
		else
			warn $branch "no bugzilla for $cve, skipping"
			continue
		fi

		git grep -i $cve origin/$branch -- $file > /dev/null 2>&1 && continue
		echo "./scripts/cve_tools/add-missing-reference -r $cve $bsc $file" >> $branch_file
	done
	if [ -s $branch_file ]
	then
		echo $branch - action file $branch_file
	else
		rm $branch_file
	fi

	return 0
}
check_branch_state_filter()
{
	local branch=$1

	[[ "$branch" =~ .*-EB.* ]] && return 0
	[[ "$branch" =~ .*-GA.* ]] && return 0
	[[ "$branch" =~ .*-RT.* ]] && return 0
	[[ "$branch" =~ .*-AZURE.* ]] && return 0

	check_branch_state "$branch"
}

branches_conf="$(fetch_branches)"

sha_filter="cat"
[ -f $DONE_FILE ] && sha_filter="grep -v -f $DONE_FILE"
build_sha_list "$sha_filter"

if [ ! -s "$SHA_LIST" ]
then
	echo "No new CVE to check since $DONE_FILE"
	exit 0
fi

mass_mode=0
if [ $# -gt 0 ]
then
	while [ $# -gt 0 ]
	do
		check_branch_state $1
		shift
	done
else
	mass_mode=1
	# Check state of each branch
	for_each_build_branch_paralel "$branches_conf" check_branch_state_filter
fi

if [ $mass_mode -eq 1 ]
then
	echo "Creating cached processed sha list $DONE_FILE"
	[ -f $DONE_FILE ] && cp $DONE_FILE ${DONE_FILE}~
	cat $SHA_LIST >> $DONE_FILE
fi
