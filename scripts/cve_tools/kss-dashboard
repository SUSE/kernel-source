#!/usr/bin/python3
import sys, re, os, argparse
sys.path.append(os.path.join(os.path.dirname(__file__), ".."))
import bugzilla
from bugzilla._cli import DEFAULT_BZ
import git_sort.pygit2_wrapper as git

# dashboard kss script - work in progress

CVE_PATTERN = re.compile(r"CVE-[0-9]{4}-[0-9]{4,}")
CVSS_PATTERN = re.compile(r"CVSSv3.1:SUSE:CVE-[0-9]{4}-[0-9]{4,}:([0-9].[0-9])")
FIXES_PATTERN = re.compile(r"Fixes: ([0-9a-f]{12,})")
PATCH_PATTERN = re.compile(r"\+\+\+ b/([^ ]{1,})\n")

T_RED = "\033[01;31m"
T_GREEN = "\033[01;32m"
T_PURPLE = "\033[01;35m"
T_END = "\033[0m"
show_colors = os.isatty(sys.stdout.fileno())

def color_format(color, msg):
    if show_colors and msg:
        return "{}{}{}".format(color, msg, T_END)
    return msg

def get_cve(s):
    m = re.search(CVE_PATTERN, s)
    return m.group(0) if m else ''

def get_score(s):
    m = re.search(CVSS_PATTERN, s)
    return m.group(1) if m else ''

def fetch_cves():
    repo = git.Repository(os.environ.get('VULNS_GIT'))
    tree_index = git.Index()
    tree_index.read_tree(repo.revparse_single('origin/master').tree)
    return { get_cve(t.path): repo[t.id].data.decode('ascii').rstrip() for t in tree_index if t.path.startswith('cve/published/') and t.path.endswith('.sha1') }

class MainlineRepo:
    def __init__(self):
        self.repo = git.Repository(os.environ.get('LINUX_GIT'))

    def get_all_fixes(self, h):
        msg = self.repo[h].raw_message.decode('utf8')
        return { str(self.repo.revparse_single(f).id) for f in re.findall(FIXES_PATTERN, msg) }

    def get_all_paths(self, h):
        t0 = self.repo.revparse_single(h + "^")
        t1 = self.repo.revparse_single(h)
        patch = self.repo.diff(t0, t1).patch
        return { p.lstrip() for p in re.findall(PATCH_PATTERN, patch) }

class BugData:
    def __init__(self, bug, cves):
        self.data = bug
        self.cve = get_cve(self.data.summary)
        self.sha = cves.get(self.cve, '')
        self.score = get_score(self.data.status_whiteboard)
        self.paths = None

    def grep_paths(self, regex, linux_git):
        if not self.sha:
            return False
        self.paths = linux_git.get_all_paths(self.sha)
        if [ p for p in self.paths if re.search(regex, p) ]:
            return True

def fetch_bugs():
    bzapi = bugzilla.Bugzilla(DEFAULT_BZ)
    query = bzapi.build_query(status=['NEW', 'IN_PROGRESS', 'CONFIRMED', 'REOPENED'],
                              product='SUSE Security Incidents',
                              component='Incidents',
                              assigned_to='kernel-bugs@suse.de',
                              include_fields=["id", "status", "summary", "status_whiteboard"])
    return bzapi.query(query)

def show_bug(n, b, linux_git, short):
    color = T_RED
    fixes = []
    paths = []
    if b.sha:
        fixes = linux_git.get_all_fixes(b.sha)
        if fixes and b.score and b.sha:
            color = T_GREEN
        if not short:
            if b.paths:
                paths = b.paths
            else:
                paths = linux_git.get_all_paths(b.sha)
        else:
            fixes = []
    print("{:>3}: {} ; {:<11} ; {:<14} ; {:<40}".format(n, b.data.id, b.data.status, b.cve, color_format(color, b.sha)), end=' ')
    print("; {:>4} ; {}".format(b.score, b.data.summary))
    for f in fixes:
        print("{:>46}{}".format('', f))
    for p in sorted(paths):
        print("{:>46}{}".format('', color_format(T_PURPLE, p)))

def handle_grep(regex):
    if not regex:
        return None
    try:
        return re.compile(regex)
    except Exception as e:
        print(regex, ": ", e)
    sys.exit(1)

def handle_modulo(qr):
    if not qr:
        return 0, 0
    try:
        q, r = qr.split(':')
        q = int(q)
        r = int(r)
        if q < 1 or r < 0 or r >= q:
            raise Exception()
        return (q, r)
    except Exception:
        print(qr, ": expected format is Q:R were Q > 0 and R < Q")
    sys.exit(1)

def parse_args():
    parser = argparse.ArgumentParser(description="KSS Dashboard")
    parser.add_argument("-c", "--colors", help="show colors unconditionally (by default they show only in terminal); this is useful for piping into \"less -iR\"", action="store_true", default=False)
    parser.add_argument("-C", "--no-colors", help="do not show colors unconditionally (by default they show only in terminal)", action="store_true", default=False)
    parser.add_argument("-w", "--whiteboard", help="show only bugs with whiteboard set (thus CVSS score set)", action="store_true", default=False)
    parser.add_argument("-W", "--no-whiteboard", help="show only bugs with whiteboard not set (thus no CVSS score)", action="store_true", default=False)
    parser.add_argument("-s", "--short", help="show only bug headers (one bug per line; no fixes tags and no path from patches)", action="store_true", default=False)
    parser.add_argument("-S", "--sort-score", help="sort bugs by CVSS score instead of their bug ids, implies -w (--whiteboard)", action="store_true", default=False)
    parser.add_argument("-N", "--sort-cve", help="sort bugs by CVE number instead of their bug ids", action="store_true", default=False)
    parser.add_argument("-r", "--reverse", help="sort bugs in reverse order (descending)", action="store_true", default=False)
    parser.add_argument("-g", "--grep", help="grep summary for REGEX and show only bugs that match it", default=None, type=str)
    parser.add_argument("-G", "--grep-paths", help="grep fix commit paths for REGEX and show only bugs with fix commits that match it", default=None, type=str)
    parser.add_argument("-m", "--modulo", help="takes two integers in the format \"Q:R\" and shows only bugs with IDs that satisfy N/Q==R", default=None, type=str)
    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()
    grep = handle_grep(args.grep)
    grep_paths = handle_grep(args.grep_paths)
    q, r = handle_modulo(args.modulo)
    bugs = fetch_bugs()
    cves = fetch_cves()
    linux_git = MainlineRepo()

    if args.colors:
        show_colors = True
    elif args.no_colors:
        show_colors = False

    bugs = [ BugData(b, cves) for b in bugs ]

    if args.whiteboard or args.sort_score:
        bugs = [ b for b in bugs if b.data.status_whiteboard ]
    elif args.no_whiteboard:
        bugs = [ b for b in bugs if not b.data.status_whiteboard ]

    if grep:
        bugs = [ b for b in bugs if re.search(grep, b.data.summary) ]

    if grep_paths:
        bugs = [ b for b in bugs if b.grep_paths(grep_paths, linux_git) ]

    if q:
        bugs = [ b for b in bugs if b.data.id % q == r ]

    if args.sort_score:
        keyf = lambda x: x.score
    if args.sort_cve:
        keyf = lambda x: x.cve
    else:
        keyf = lambda x: x.data.id

    for n, b in enumerate(sorted(bugs, key=keyf, reverse=args.reverse), 1):
        show_bug(n, b, linux_git, args.short)
