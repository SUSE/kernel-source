#!/bin/bash
# check-branch-status BRANCH([-]|[sha_list_file]|[sha [sha ....]]
#
# checks given branch for applicabilty and whether applicable shas/CVEs are already
# in the branch against either file with sha/CVE list or given sha/CVE parameters
# or sha read from standard input if (- is used) or all CVE shas generated from
# the VULNS_GIT.
#
# Examples
# check-branch-status # check all currently tracked CVEs in VULNS_GIT
# check-branch-status - # read shas/CVEs to check from the stdin
# check-branch-status file # read shas/CVEs from the given file
# check-branch-status sha1 CVE1 shaN # check given shas/CVEs

build_sha_list()
{
	filter="$1"
	find $VULNS_GIT/cve/published -name "*.sha1" | xargs cat | $filter > $SHA_LIST
}

check_blacklisted()
{
	local branch="$1"
	local sha="$2"
	local cve="$3"
	local blacklist_entry=""

	if [ -n "$cve" ]; then
		blacklist_entry="$(get_blacklist_entry $branch $sha $cve)"
		if [ -n "$blacklist_entry" ] ; then
			echo -n "cve_blacklisted "
			return
		fi
	fi
	blacklist_entry="$(get_blacklist_entry $branch $sha)"
	if [ -n "$blacklist_entry" ]; then
		# Add warning to output?
		echo -n "sha_blacklisted "
	fi
}

check_disabled()
{
	local branch=$1

	check_config $branch $conf_file_map /dev/null "${files[@]}"
	if [ $? -eq 1 ]
	then
		echo -n "code_disabled "
		return 1
	fi

	return 0
}

check_arch()
{
	local branch=$1

	check_arch_support $branch /dev/null "${files[@]}"
	if [ $? -eq 1 ]
	then
		echo -n "arch_disabled "
		return 1
	fi
	return 0
}

__check_applied_sha()
{
	local sha=$1
	local base=$2
	local branch=$3
	local cve=$4
	local cvss=$5
	local files=
	readarray -t files < <(sha2files "$sha")

	echo -n "$sha ${cve:-no_cve} ${cvss:-CVSS_unknown} "
	if sha_merged_in_upstream_tag $sha $base
	then
		echo "fix_in_base"
		return
	fi

	patch="$(sha_to_patch_in_branch $sha $branch)"
	[ -z "$patch" ] && patch="$(reference_to_patch_in_branch "$cve" $branch)"
	if [ -z "$patch" ]
	then
		echo -n "unapplied "
	else
		echo -n "backported "
	fi

	local fixes_shas="$(sha_get_upstream_git_fixes $sha $cve)"
	if [ -z "$fixes_shas" ]
	then
		echo -n "no_fixes_tag "
		check_blacklisted $branch $sha "$cve"
		check_disabled $branch
		check_arch $branch 
		cvss_affects_branch $branch $cvss || echo -n "cvss_uneligible "
		echo
		return
	fi

	local in_base=0
	local breaker_backported=0
	local affected=0
	local fix_missing=0
	for breaker in $fixes_shas
	do
		if sha_merged_in_upstream_tag $breaker $base
		then
			[ -z "$patch" ] && fix_missing=1
			in_base=1
			affected=1
			continue
		fi

		breaker_patch="$(sha_to_patch_in_branch $breaker $branch)"
		if [ -n "$breaker_patch" ]
		then
			breaker_backported=1
			affected=1
			[ -z "$patch" ] && fix_missing=1
		fi

	done

	if [ $fix_missing -eq 1 ]
	then
		if check_disabled $branch && check_arch $branch
		then
			echo -n "fix_missing "
			cvss_affects_branch $branch $cvss || echo -n "cvss_uneligible "
			check_blacklisted $branch $sha "$cve"
		fi
	fi

	if [ $in_base -eq 1 ]
	then
		echo "breaker_in_base"
	else
		[ $breaker_backported -eq 1 ] && echo -n "breaker_backported "
		[ $affected -eq 0 ] && echo -n "unaffected"
		echo 
	fi
}

check_applied_sha()
{
	local sha=$1
	local base=$2
	local branch=$3
	local cve=""
	local cvss=""

	if sha_in_upstream $sha
	then
		cve="$(sha2cve $sha)"
	else
		cve=$sha
		# This could be multiple shas!
		sha="$(cve2sha $cve)"
		if test -z "$sha" || ! sha_in_upstream "$sha"
		then
			echo "$1 neither upstream sha nor CVE" >&2
			return
		fi
	fi

	if [ -n "$cve" ]; then
		cvss="$(cve2cvss $cve)"
	fi

	for s in $sha
	do
		__check_applied_sha $s $base $branch $cve $cvss
	done
}

. scripts/common-functions
branch=$1
base=$(branch_base_ver $branch)
conf_file_map="$(fetch_conf_file_map "")"
if [ -z "$CVEKERNELTREE" ]
then
	export CVEKERNELTREE=$LINUX_GIT
fi

shift

if [ $# -gt 0 -a ! -f "$1" ]
then
	if [ "$1" = "-" ]
	then
		while read sha
		do
			check_applied_sha $sha $base $branch
		done
	else
		while [ $# -gt 0 ]
		do
			sha=$1
			shift
			check_applied_sha $sha $base $branch

		done
	fi
else
	if [ -f "$1" ]
	then
		SHA_LIST=$1
	else
		SHA_LIST=/tmp/$USER-sha-list
	fi
	if [ ! -f $SHA_LIST ]
	then
		build_sha_list cat
	fi

	for sha in $(cat $SHA_LIST)
	do
		check_applied_sha $sha $base $branch

	done
fi
