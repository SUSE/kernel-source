#!/bin/bash
# vim: sw=4:sts=4:et

# TODO: Error handling is really not great. Especially failures from nested shells
# sucks.

. $(dirname "$0")/common-functions

usage()
{
    cat << EOF
Check state of a kernel fix and eventually suggest needed actions

Expect upstream kernel tree sha or CVE number as the parameter.
The script checks whether the commit is already in the upstream
baseline or backported in kernel-source tree.
Requires LINUX_GIT pointing to Linus git tree clone.

If backported, checks for CVE/bsc references and recommends adding these
if they are missing. (Requires VULNS_GIT pointing to
https://git.kernel.org/pub/scm/linux/security/vulns.git tree.
This will also allow cve number instead of sha and it resolves proer
upstream commit automatically.

Also the script looks for \"Fixes:\" tag of the given \"sha\".
When defined, the script informs where the fix has to be backported.

The script also takes into account the hierarchy of branches.
It checks all branches. But the action is proposed only for
the top level ones. The assumption is that the other branches
will get the fix via a merge.

If the patch has CVE number with CVSS score associated then limits
actions only to CVSS affected branches.

Usage: ${0##*/} [options] sha|CVE [branch]

Parameters:
	sha: sha of the upstream commit
	cve: CVE-XXXX-YYYY of the upstream commit (requires VULNS_GIT)
	branch: kernel branch to check

Options:
	-h: help
	-v: verbose mode: show state of each branch and even NOP actions
	-r: refresh any cached data. Use if cve->sha or cve->cvss fails
	    (git pull VULNS_GIT, cve, bsc medata)
	-t: flat mode. Do not filter output based on cvss scoring or common
	    ancestors.
	-s CVSS: override the CVSS score if known. This can be useful when
	   the CVE->CVSS DB is not synced yet.
	-b bsc#NUMBER: override the bugzilla number if known
	-f sha: provide explicit Fixes tag. Use when the one in the commit is
	   unknown but you could figure it from the code inspection.
	   Specify repeteadly if more are required
	-F: treat -f sha provided fixes as authoritative and override those
	   in the commit. Use this if Fixes: tags in the commit are incorrect
	   or if you want to enforce run without a known fixes tag.
	-c CVE-XXXX-YYYY: provide CVE number for the given sha. Use for
	   CVEs issued before the process has changed and VULNS_GIT doesn't
	   recognize this CVE
	-n Do not print maintainers candidates.
EOF
}

SUSE_GET_MAINTAINERS=/usr/bin/suse-get-maintainers
BUGZILLA_COUNT_USER_BUGS="$(dirname "$0")/python/ckf-count-user-bugs"
SUSE_GIT_FIXES=/usr/bin/git-fixes

if [ -z "$CVEKERNELTREE" ]
then
	export CVEKERNELTREE=$LINUX_GIT
fi
sha=
references=
cve=

tmpdir=$(mktemp -d /tmp/${0##*/}.XXXXXX)
trap 'rm -rf "$tmpdir"' EXIT

actions_file="$tmpdir/actions"
affected_file="$tmpdir/affected"
git_fixes_sha="$tmpdir/git_fixes_sha"
git_fixes_output="$tmpdir/git_fixes_output"
git_fixes_pid=0
eligible_braches=0
branches_with_warnings=0

branch_state_file()
{
	local branch=$1
	echo $tmpdir/branch-state.$(echo $branch | sed 's@/@_@g')
}

set_branch_state()
{
    local branch=$1
    local state=$2
    local branch_file="$(branch_state_file $branch)"

    echo "$state" > $branch_file
}

wait_for_file()
{
	while [ ! -s "$1" ]
	do
		sleep 1s
	done
}

cvss_affects_branch()
{
	local branch="$1"
	local cvss="${2%%.*}"
	local ret=1

	[ -z "$cvss" ] && cvss=0

	if [[ "$branch" =~ .*-EB.* ]]
	then
		[ $cvss -ge 9 ] && ret=0
	elif [[ "$branch" =~ .*-GA.* ]]
	then
		[ $cvss -ge 7 ] && ret=0
	elif [[ "$branch" =~ .*-LTSS.* ]]
	then
		[ $cvss -ge 7 ] && ret=0
	else
		ret=0
	fi
	return $ret
}

handle_patch_present()
{
    local branch="$1"
    local sha="$2"
    shift 2
    local references="$@"
    local patch=$(sha_to_patch_in_branch "$sha" "$branch")
    local missing_references=""

    # We have a backport that is not referenced by sha but only its CVE
    # usually when a custom backport which diverges from the upstream
    # solution is required
    if [ -n "$cve" ]
    then
            if git grep -qi "^References:.*$cve\>" origin/$branch
            then
                    set_branch_state $branch "$sha:ok_reference_present"
                    return 0
            fi
    fi

    if [ -n "$patch" ] ; then
	# Check references only in verbose mode because we do not print
	# this action by default anyway.
	if [ -n "$verbose_mode" ] ; then
		local ref=
		for ref in $references ; do
		    if ! patch_has_reference_in_branch "$patch" "$ref" "$branch" ; then
			missing_references="$missing_references -r $ref"
		    fi
		done

		if [ -n "$missing_references" ] ; then
		    set_branch_state $branch "$sha:ok_missing_references:$missing_references $patch"
		    return 0
		fi
	fi
	set_branch_state $branch "$sha:ok_commit_present"
	return 0
    fi

    return 1
}

handle_cve_blacklisted()
{
    local branch=$1
    local sha=$2
    local cve=$3

    # TODO we probably want to handle also sha blacklisted when this is not
    # a CVE run
    [ -z "$cve" ] && return 1

    local blacklist_entry="$(git grep -hiE "(^$cve|^$sha\b.*#.*$cve)" origin/$branch -- blacklist.conf 2>/dev/null)"
    if [ -n "$blacklist_entry" ]
    then
	    local blacklist_reason="$(echo $blacklist_entry | sed 's@^[a-f0-9]\+[[:space:]]#[[:space:]]*@@')"
	    set_branch_state $branch "$sha:blacklisted $blacklist_reason"
	    return 0
    fi

    return 1
}

handle_parent_inheritable_state()
{
    local branch=$1

    # Check parent branches are ok then nothing to be checked for this one
    # Disable the heuristic for the verbose mode where we want to see all
    # the actions
    if [ -z "$verbose_mode" -a $single_branch_mode -eq 0 ]
    then
	    local merge_branch=
	    for merge_branch in $(print_merge_branches $branches_conf $branch)
	    do
		    local merge_branch_file="$(branch_state_file $merge_branch)"
		    wait_for_file "$merge_branch_file"
		    if grep "$sha:ok_" "$merge_branch_file" >/dev/null 2>&1
		    then
			    set_branch_state $branch "$sha:ok_will_merge"
			    return 0
		    fi
	    done
    fi

    return 1
}

# Evaluate any potential warnings - i.e. non-authoritative facts that developer
# should consider when deciding whether the backport is worth pursuing.
# Examples:
# 	- given sha is touching files that are not compiled in the branch
# 	- given sha is touching architectures that are not supported
# 	- this commit/cve is blacklisted in the parent branch
# 	- there is already a pending for-next branch pending for merge
check_for_warnings()
{
    local branch="$1"
    local conf_file_map="$2"
    local sha=$3
    local warn_file="$(branch_state_file $branch).warns"
    shift 3

    check_config "$branch" "$conf_file_map" "$@" >> $warn_file
    check_arch_support "$branch" "$@" >> $warn_file
    check_blacklisted_in_parent $branch $sha >> $warn_file
    check_pending_pr $branch $sha >> $warn_file
}

has_warnings()
{
    local warn_file="$(branch_state_file $branch).warns"

    test -s $warn_file
}

print_warnings()
{
    local branch=$1
    local warn_file="$(branch_state_file $branch).warns"

    cat $warn_file
}

print_no_fixes_warning()
{
	local arg=$1
	local cve=$2

	[ -n "$cve" ] && CVE_ADDENDUM="If you identify the breaker you can contribute that via VULNS_GIT/cve/published/*/$cve.vulnerable"

	if [ $eligible_braches -eq 0 ] 
	then
		echo "NO CODESTREAM AFFECTED"
		return 
	elif [ $eligible_braches -eq $branches_with_warnings ]
	then
		return
	fi

	cat << EOF
ACTION NEEDED!
$arg doesn't have Fixes tag so we cannot automatically assess which
kernel branches require the fix. Please try to identify the breaker and then
run ./scripts/check-kernel-fix -f BREAKER_SHA $arg
to get the real list of branches to apply the fix into.

You can run ./scripts/check-kernel-fix -F $arg
to get an estimated list of branches to apply the fix into.

$CVE_ADDENDUM
EOF
}


# Check state of the given branch wrt to given sha, its fixes and references
#
# The outcome is recorded via set_branch_state and the following states are
# possible
#
#   + nope_cvss: doesn't qualify based on the CVSS scoring
#   + nope_commit_in_base: the fix is already in the base kernel
#   + nope_unaffected: the fix is not required as the Fixes: commit is not present
#   + ok_reference_present: the CVE reference is present
#   + ok_commit_present: the commit is present
#   + ok_will_merge: fix will be merged from upstream branch
#   + ok_missing_references: branch has the sha but some references were not found
#   + missing_commit: sha is required but needs to be backported
#   + maybe_missing_commit: patch is missing and it is not known which commit
#	introduced the bug (given fixes is empty)
#   + blacklisted: blacklist.conf references the CVE. This could be either
#   	CVE line or sha # CVE
#
# Global variables:
# branches_conf
# verbose_mode: if not defined then synchronizes with parent branches to eliminate
# 	actions that will be inherited through merge 
# conf_file_map: config file DB
# files[]: only used for {maybe_}missing_commit to check kernel configs
#
# Side effects:
# set_branch_state called with appropriate action
check_branch_state()
{
    local branch="$1"
    local sha="$2"
    local fixes="$3"
    local cvss="$4"
    shift 4
    local references="$@"

    [ -z "$branch" ] && fail "check_branch_state: No branch provided"
    [ -z "$sha" ] && fail "check_branch_state: No sha provided"

    if  ! cvss_affects_branch $branch $cvss
    then
	    if [ -n "$verbose_mode" ]
	    then
		    handle_patch_present $branch $sha $references && return
		    handle_cve_blacklisted $branch $sha $cve && return
	    fi
	    set_branch_state $branch "$sha:nope_cvss"
	    return
    fi

    handle_parent_inheritable_state $branch

    local base=$(branch_base_ver $branch)

    # Already merged upstream?
    if sha_merged_in_upstream_tag "$sha" "$base" ; then
	set_branch_state $branch "$sha:nope_commit_in_base"
	return
    fi

    handle_cve_blacklisted $branch $sha $cve && return

    handle_patch_present $branch $sha $references && return

    # Sha is not backported
    # Do we need to backport it because of the Fixes tag?
    if [ -n "$fixes" ] ; then
	local affected="$(affected_by_git_fixes "$branch" "$base" $fixes)"

	if [ -n "$affected" ] ; then
	    set_branch_state $branch "$sha:missing_commit:$affected"
	    check_for_warnings "$branch" "$conf_file_map" $sha "${files[@]}"
	else
	    set_branch_state $branch "$sha:nope_unaffected"
	fi

	return
    fi

    # missing git fixes
    set_branch_state $branch "$sha:maybe_missing_commit:$ref"

    check_for_warnings "$branch" "$conf_file_map" $sha "${files[@]}"
}

check_blacklisted_in_parent()
{
    local branch="$1"
    local sha=$2
    local merge_branch=

    for merge_branch in $(print_merge_branches $branches_conf $branch)
    do
	    local merge_branch_file="$(branch_state_file $merge_branch)"
	    if grep -E "$sha:blacklisted" "$merge_branch_file" >/dev/null 2>&1
	    then
		    echo -e "\tWW $merge_branch blacklisted ${sha}. Unless $branch differs then you can ignore this."
	    fi
    done
}

check_pending_pr()
{
	local branch=$1
	local sha=$2

	local pending_pr=
	for pending_pr in $(pending_pr_branches $branch)
	do
		patch=$(sha_to_patch_in_branch $sha $pending_pr)
		if [ -n "$patch" ]
		then
			echo -e "\tWW pending PR through $pending_pr"
			break
		fi
	done
}

__print_action()
{
	if [ ! -e "$actions_file" -a $warning_only_mode -eq 0 ] ; then
		# first action
		echo "ACTION NEEDED!"
		touch "$actions_file"
	fi
	echo $*
}

# Prints action for the given branch
# Globals
# verbose_mode: only {maybe_}missing_patch are printed if this is empty
# warning_only_mode: only prints actions if there are warnings associated. This
# is used when no breaker is known and we just want to highlight branches that
# do not have configs enabled or might have other noteworthy aspects to consider.
#
# Side effects:
# creates $affected_file if the branch is affected
print_action()
{
    local branch="$1"
    local sha="$2"
    local state="$3"
    shift 3
    local references="$@"

    [[ ! "$state" =~ nope.* ]] && touch $affected_file

    case "$state" in
	missing_commit)
	    eligible_braches=$(($eligible_braches+1))
	    __print_action "$branch: MANUAL: backport $sha ($references)"
	    has_warnings $branch && branches_with_warnings=$(($branches_with_warnings+1))
	    print_warnings $branch
	    ;;

	maybe_missing_commit)
	    eligible_braches=$(($eligible_braches+1))
	    if [ $warning_only_mode -eq 1 ]
	    then
		    has_warnings $branch || return 0
	    fi
	    branches_with_warnings=$(($branches_with_warnings+1))
	    __print_action "$branch: MANUAL: might need backport of $sha ($references)"
	    print_warnings $branch
	    ;;

	ok_missing_references)
	   if  [ -n "$verbose_mode" ]
	   then
		__print_action "$branch: RUN: scripts/cve_tools/add-missing-reference $references"
	   fi
	    ;;
	blacklisted) [ -n "$verbose_mode" ] && echo "$branch $state \"$references\""
		;;
	*) [ -n "$verbose_mode" ] && echo "$branch: $state"
	    ;;
    esac

    return 0
}

find_and_print_toplevel_actions()
{
    local branch="$1"
    local flat_mode=$2
    local branch_file="$(branch_state_file $branch)"

    if [ "$flat_mode" -eq 1 ]
    then
	    print_action $branch $(sed 's@:@ @g' $branch_file)
	    return
    fi

    # We only need to print an action if all the parents have action=nope|blacklisted
    # because merging branches cannot assume they are the same in that regards. E.g.
    # they might have breaker backported or the blacklist doesn't is not valid in their
    # scope. 
    # All other actions are by definition inherited through the merge.
    # Our topo-order walk through the branch list will make sure that branches
    # are printed in a proper ordering
    local merge_branch=
    for merge_branch in $(print_merge_branches $branches_conf $branch) ; do
	    local merge_branch_file="$(branch_state_file $merge_branch)"
	    local mb_state=$(cut -d: -f2 $merge_branch_file)

	    [[ ! "$mb_state" =~ nope* && "$mb_state" != "blacklisted" ]] && return
    done

    print_action $branch $(sed 's@:@ @g' $branch_file)
}

print_maintainer_info()
{
    local SHA=$1
    local SGM_OUTPUT="$(suse-get-maintainers --sha - 2>/dev/null <<<$SHA)"
    local EMAILS="$(cut -d, -f3- <<<$SGM_OUTPUT | tr ',' ' ')"
    local output=
    local nbugs=
    local email=
    for email in $EMAILS
    do
	output="${output} ${email} ("
	nbugs="$($BUGZILLA_COUNT_USER_BUGS $email)"
	output="${output}${nbugs})"
    done
    local STANZA="$(echo $SGM_OUTPUT | cut -d, -f2)"
    output="$output subsystem/role=$STANZA"
    echo "$output"
}

verbose_mode=
flat_mode=0
expl_fixes=""
maintainers=1

while getopts "hvrtns:b:Ff:c:" OPT
do
    case $OPT in
	h)
	    usage
	    exit
	    ;;
	v)
	    verbose_mode=1
	    ;;
	r)
	    refresh=1
	    ;;
	t)
	    flat_mode=1
	    ;;
	s)
	    cvss=$OPTARG
	    ;;
	b)
	    bsc="bsc#${OPTARG#bsc#}"
	    ;;
	f)
	    expl_fixes="$expl_fixes $OPTARG"
	    ;;
	F)
	    enforce_expl_fixes=1
	    ;;
	c)
	    cve=$OPTARG
	    ;;
	n)
	    maintainers=0

    esac
done

shift "$(($OPTIND-1))"

if [ -z "$1" ] ; then
    echo "No references provided"
    usage
    exit 1
fi

sha=$1
if ! sha_in_upstream "$1" ; then
	[ -n "$cve" ] && fail "SHA expected when -c CVE-XXXXXX-YYYY is used"
	sha=$(cve2sha $1 $refresh)
	if [ -z "$sha" ]
	then
		[ -z "$VULNS_GIT" ] && fail "VULNS_GIT not defined. It has to point https://git.kernel.org/pub/scm/linux/security/vulns.git tree clone."
		fail "Can't find sha in upstream: $1."
	fi
else
	# arg could be sha shortcut or tag name etc.
	# expand to a full sha
	sha=$(git -C $LINUX_GIT rev-parse $sha)
fi

[ -z "$cve" ] && cve=$(sha2cve $sha $refresh)

# Handle in patch and provided git fixes
if [ -n "$enforce_expl_fixes" ]
then
	git_fixes=""
else
	git_fixes="$(sha_get_upstream_git_fixes $sha $cve)"
fi
[ -n "$expl_fixes" ] && git_fixes="$git_fixes $expl_fixes"

print_upstream_sha_summary $sha "$git_fixes"

if [ -n "$cve" ]
then
	[ -z "$bsc" ] && bsc=$(cve2bugzilla $cve $refresh)
	[ -z "$cvss" ] && cvss=$(cve2cvss $cve $refresh)
	echo "Security fix for $cve ${bsc:-bsc unknown} with CVSS ${cvss:-unknown}"
	is_cve_rejected $cve && echo "W: $cve has been rejected" >&2
	[ -z "$cvss" -o -z "$bsc" ] && fail "Incomplete references re-check with -r or use -s/-b to specify missing references"
fi

if [ $maintainers -eq 1 -a -x $SUSE_GET_MAINTAINERS ]
then
	echo -n "Experts candidates: "
	print_maintainer_info $sha
fi

echo "Link: https://git.kernel.org/linus/$sha"

references="$cve $bsc"

branches_conf="$(fetch_branches $refresh)"
conf_file_map="$(fetch_conf_file_map "$refresh")"
readarray -t files < <(sha2files "$sha")

warning_only_mode=0
# We do not know any breaker but we still want to check for warnings
# for potentially eligible branches
if [ -z "$git_fixes" -a -z "$enforce_expl_fixes" ]
then
	warning_only_mode=1
fi

# kick git-fixes in the background
if [ -x "$SUSE_GIT_FIXES" ]
then
	echo $sha > $git_fixes_sha
	$SUSE_GIT_FIXES --no-grouping -a -f $git_fixes_sha --repo $LINUX_GIT $sha..origin/master > $git_fixes_output &
	git_fixes_pid=$!
fi
if [ -n "$2" ]
then
	branch=$2
	branch_file="$(branch_state_file $branch)"

	single_branch_mode=1
	# We have an explicit branch to check
	check_branch_state $branch "$sha" "$git_fixes" "$cvss" $references
	print_action $branch $(sed 's@:@ @g' $branch_file)
else
	# Check state of each branch
	single_branch_mode=0
	for_each_build_branch_paralel "$branches_conf" check_branch_state "$sha" "$git_fixes" "$cvss" $references

	for_each_build_branch "$branches_conf" find_and_print_toplevel_actions $flat_mode
fi

[ $eligible_braches -gt 0 -a $eligible_braches -eq $branches_with_warnings ] &&  echo "All eligible branches have warnings. If they are correct then there is NO ACTION NEEDED"

if [ ! -e "$actions_file" ]
then
	if [ ! -e "$affected_file" ]
	then
		echo "NO CODESTREAM AFFECTED"
	else
		if [ $warning_only_mode -eq 0 ]
		then
			echo "NO ACTION NEEDED: All relevant branches contain the fix!"
		else
			print_no_fixes_warning $1 $cve
		fi
	fi
else
	[ $git_fixes_pid -gt 0 ] && wait $git_fixes_pid
	if [[ -s $git_fixes_output &&  ! $(grep -q "Nothing found" $git_fixes_output) ]]
	then
		echo -e "\nPotential git-fixes for $sha"
		cat $git_fixes_output
	fi
fi

