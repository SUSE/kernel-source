From ea7d2de68527436ef83ab4bffffc8c480def8966 Mon Sep 17 00:00:00 2001
From: Mel Gorman <mgorman@techsingularity.net>
Date: Tue, 8 Aug 2023 09:31:17 +0100
Subject: [PATCH] rwsem-rt: Implement down_read_interruptible

Patch-mainline: Never, RT specific
References: bsc#1207270, jsc#PED-4567, SLE Realtime Extension

PED-4567 required a backport of commit "rwsem: Implement
down_read_interruptible" but PREEMPT_RT uses a different rwsem
implementation. Add the RT implementation for __down_read_interruptible
based on the implementation for __down_read_killable.

Signed-off-by: Mel Gorman <mgorman@suse.de>
---
 include/linux/rwsem-rt.h  |  1 +
 kernel/locking/rwsem-rt.c | 12 ++++++++++++
 2 files changed, 13 insertions(+)

diff --git a/include/linux/rwsem-rt.h b/include/linux/rwsem-rt.h
index 2018ff77904a..3fb092b7bcc0 100644
--- a/include/linux/rwsem-rt.h
+++ b/include/linux/rwsem-rt.h
@@ -56,6 +56,7 @@ static inline int rwsem_is_contended(struct rw_semaphore *sem)
 }
 
 extern void __down_read(struct rw_semaphore *sem);
+extern int __down_read_interruptible(struct rw_semaphore *sem);
 extern int __down_read_killable(struct rw_semaphore *sem);
 extern int __down_read_trylock(struct rw_semaphore *sem);
 extern void __down_write(struct rw_semaphore *sem);
diff --git a/kernel/locking/rwsem-rt.c b/kernel/locking/rwsem-rt.c
index f518495bd6cc..96d14f003024 100644
--- a/kernel/locking/rwsem-rt.c
+++ b/kernel/locking/rwsem-rt.c
@@ -166,6 +166,18 @@ void __down_read(struct rw_semaphore *sem)
 	WARN_ON_ONCE(ret);
 }
 
+int __down_read_interruptible(struct rw_semaphore *sem)
+{
+	int ret;
+
+	ret = __down_read_common(sem, TASK_INTERRUPTIBLE);
+	if (likely(!ret))
+		return ret;
+
+	WARN_ONCE(ret != -EINTR, "Unexpected state: %d\n", ret);
+	return -EINTR;
+}
+
 int __down_read_killable(struct rw_semaphore *sem)
 {
 	int ret;
