From: Juergen Gross <jgross@suse.com>
Date: Fri, 06 Dec 2024 13:39:15 +0200
Subject: kABI: Fix kABI after TDX KVM backports
Patch-mainline: Never, kABI fix
References: jsc#PED-6143

Signed-off-by: Juergen Gross <jgross@suse.com>
---
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@ -1615,18 +1615,12 @@ struct kvm_x86_ops {
 	int (*hardware_enable)(void);
 	void (*hardware_disable)(void);
 	void (*hardware_unsetup)(void);
-	int (*offline_cpu)(void);
 	bool (*has_emulated_msr)(struct kvm *kvm, u32 index);
-	int (*vcpu_check_cpuid)(struct kvm_vcpu *vcpu, struct kvm_cpuid_entry2 *e2, int nent);
 	void (*vcpu_after_set_cpuid)(struct kvm_vcpu *vcpu);
 
 	unsigned int vm_size;
-	int (*max_vcpus)(struct kvm *kvm);
-	int (*vm_enable_cap)(struct kvm *kvm, struct kvm_enable_cap *cap);
 	int (*vm_init)(struct kvm *kvm);
-	void (*flush_shadow_all_private)(struct kvm *kvm);
 	void (*vm_destroy)(struct kvm *kvm);
-	void (*vm_free)(struct kvm *kvm);
 
 	/* Create, but do not attach this VCPU */
 	int (*vcpu_precreate)(struct kvm *kvm);
@@ -1769,16 +1764,6 @@ struct kvm_x86_ops {
 	void (*load_mmu_pgd)(struct kvm_vcpu *vcpu, hpa_t root_hpa,
 			     int root_level);
 
-	int (*link_private_spt)(struct kvm *kvm, gfn_t gfn, enum pg_level level,
-				void *private_spt);
-	int (*free_private_spt)(struct kvm *kvm, gfn_t gfn, enum pg_level level,
-				void *private_spt);
-	int (*set_private_spte)(struct kvm *kvm, gfn_t gfn, enum pg_level level,
-				 kvm_pfn_t pfn);
-	int (*remove_private_spte)(struct kvm *kvm, gfn_t gfn, enum pg_level level,
-				    kvm_pfn_t pfn);
-	int (*zap_private_spte)(struct kvm *kvm, gfn_t gfn, enum pg_level level);
-
 	bool (*has_wbinvd_exit)(void);
 
 	u64 (*get_l2_tsc_offset)(struct kvm_vcpu *vcpu);
@@ -1792,7 +1792,6 @@
 	void (*apicv_pre_state_restore)(struct kvm_vcpu *vcpu);
 	void (*apicv_post_state_restore)(struct kvm_vcpu *vcpu);
 	bool (*dy_apicv_has_pending_interrupt)(struct kvm_vcpu *vcpu);
-	bool (*protected_apic_has_interrupt)(struct kvm_vcpu *vcpu);
 
 	int (*set_hv_timer)(struct kvm_vcpu *vcpu, u64 guest_deadline_tsc,
 			    bool *expired);
@@ -1826,7 +1812,6 @@
 	int (*complete_emulated_msr)(struct kvm_vcpu *vcpu, int err);

 	void (*vcpu_deliver_sipi_vector)(struct kvm_vcpu *vcpu, u8 vector);
-	void (*vcpu_deliver_init)(struct kvm_vcpu *vcpu);

 	/*
 	 * Returns vCPU specific APICv inhibit reasons
@@ -1848,6 +1833,23 @@
 				  u64 *error_code, u8 *max_level);
 	void (*post_memory_mapping)(struct kvm_vcpu *vcpu,
 				    struct kvm_memory_mapping *mapping);
+	int (*offline_cpu)(void);
+	int (*max_vcpus)(struct kvm *kvm);
+	int (*vm_enable_cap)(struct kvm *kvm, struct kvm_enable_cap *cap);
+	void (*flush_shadow_all_private)(struct kvm *kvm);
+	void (*vm_free)(struct kvm *kvm);
+	int (*link_private_spt)(struct kvm *kvm, gfn_t gfn, enum pg_level level,
+				void *private_spt);
+	int (*free_private_spt)(struct kvm *kvm, gfn_t gfn, enum pg_level level,
+				void *private_spt);
+	int (*set_private_spte)(struct kvm *kvm, gfn_t gfn, enum pg_level level,
+				 kvm_pfn_t pfn);
+	int (*remove_private_spte)(struct kvm *kvm, gfn_t gfn, enum pg_level level,
+				    kvm_pfn_t pfn);
+	int (*zap_private_spte)(struct kvm *kvm, gfn_t gfn, enum pg_level level);
+	bool (*protected_apic_has_interrupt)(struct kvm_vcpu *vcpu);
+	void (*vcpu_deliver_init)(struct kvm_vcpu *vcpu);
+	int (*vcpu_check_cpuid)(struct kvm_vcpu *vcpu, struct kvm_cpuid_entry2 *e2, int nent);
 #endif
 };
 
