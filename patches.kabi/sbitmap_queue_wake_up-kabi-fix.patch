From: Jan Kara <jack@suse.cz>
Subject: sbitmap: fix up kABI for sbitmap_queue_wake_up()
Patch-mainline: Never, kABI
References: bsc#1217095 bsc#1217196

Instead of modifying sbitmap_queue_wake_up(), create new function
sbitmap_queue_wake_up_batch() with the desired functionality.

Signed-off-by: Jan Kara <jack@suse.cz>

---
 block/blk-mq-tag.c      |    2 +-
 include/linux/sbitmap.h |    6 ++++--
 lib/sbitmap.c           |   12 +++++++++---
 3 files changed, 14 insertions(+), 6 deletions(-)

--- a/block/blk-mq-tag.c
+++ b/block/blk-mq-tag.c
@@ -197,7 +197,7 @@ unsigned int blk_mq_get_tag(struct blk_m
 		 * other allocations on previous queue won't be starved.
 		 */
 		if (bt != bt_prev)
-			sbitmap_queue_wake_up(bt_prev, 1);
+			sbitmap_queue_wake_up_batch(bt_prev, 1);
 
 		ws = bt_wait_ptr(bt, data->hctx);
 	} while (1);
--- a/include/linux/sbitmap.h
+++ b/include/linux/sbitmap.h
@@ -562,13 +562,15 @@ static inline struct sbq_wait_state *sbq
  */
 void sbitmap_queue_wake_all(struct sbitmap_queue *sbq);
 
+/* Legacy for kABI */
+void sbitmap_queue_wake_up(struct sbitmap_queue *sbq);
 /**
- * sbitmap_queue_wake_up() - Wake up some of waiters in one waitqueue
+ * sbitmap_queue_wake_up_batch() - Wake up some of waiters in one waitqueue
  * on a &struct sbitmap_queue.
  * @sbq: Bitmap queue to wake up.
  * @nr: Number of bits cleared.
  */
-void sbitmap_queue_wake_up(struct sbitmap_queue *sbq, int nr);
+void sbitmap_queue_wake_up_batch(struct sbitmap_queue *sbq, int nr);
 
 /**
  * sbitmap_queue_show() - Dump &struct sbitmap_queue information to a &struct
--- a/lib/sbitmap.c
+++ b/lib/sbitmap.c
@@ -672,11 +672,17 @@ static bool __sbq_wake_up(struct sbitmap
 	return *nr;
 }
 
-void sbitmap_queue_wake_up(struct sbitmap_queue *sbq, int nr)
+void sbitmap_queue_wake_up_batch(struct sbitmap_queue *sbq, int nr)
 {
 	while (__sbq_wake_up(sbq, &nr))
 		;
 }
+EXPORT_SYMBOL_GPL(sbitmap_queue_wake_up_batch);
+
+void sbitmap_queue_wake_up(struct sbitmap_queue *sbq)
+{
+	sbitmap_queue_wake_up_batch(sbq, 1);
+}
 EXPORT_SYMBOL_GPL(sbitmap_queue_wake_up);
 
 static inline void sbitmap_update_cpu_hint(struct sbitmap *sb, int cpu, int tag)
@@ -714,7 +720,7 @@ void sbitmap_queue_clear_batch(struct sb
 		atomic_long_andnot(mask, (atomic_long_t *) addr);
 
 	smp_mb__after_atomic();
-	sbitmap_queue_wake_up(sbq, nr_tags);
+	sbitmap_queue_wake_up_batch(sbq, nr_tags);
 	sbitmap_update_cpu_hint(&sbq->sb, raw_smp_processor_id(),
 					tags[nr_tags - 1] - offset);
 }
@@ -742,7 +748,7 @@ void sbitmap_queue_clear(struct sbitmap_
 	 * waiter. See the comment on waitqueue_active().
 	 */
 	smp_mb__after_atomic();
-	sbitmap_queue_wake_up(sbq, 1);
+	sbitmap_queue_wake_up_batch(sbq, 1);
 	sbitmap_update_cpu_hint(&sbq->sb, cpu, nr);
 }
 EXPORT_SYMBOL_GPL(sbitmap_queue_clear);
