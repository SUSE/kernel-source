From 549ba47e758e45b63a2dabaf522ee79e1f6ee770 Mon Sep 17 00:00:00 2001
From: Oliver Neukum <oneukum@suse.com>
Date: Thu, 17 Nov 2022 10:35:48 +0100
Subject: [PATCH] kABI: remove new member of usbip_device
Patch-mainline: Never (kABI fixup)
References: git-fixes

The structure is embedded into other structures, hence
it cannot be enlarged.
This replaces the per HC lock with a global lock.

Signed-off-by: Oliver Neukum <oneukum@suse.com>
---
 drivers/usb/usbip/usbip_common.h |  5 ++---
 drivers/usb/usbip/vhci_hcd.c     |  3 ++-
 drivers/usb/usbip/vhci_sysfs.c   | 12 ++++++------
 scripts/bpf_helpers_doc.py       |  0
 drivers/usb/core/devices.c       |    2 ++
 drivers/usb/usbip/usbip_common.h |    5 ++---
 drivers/usb/usbip/vhci_hcd.c     |    1 -
 drivers/usb/usbip/vhci_sysfs.c   |   12 ++++++------
 4 files changed, 10 insertions(+), 10 deletions(-)
 mode change 100644 => 100755 scripts/bpf_helpers_doc.py

--- a/drivers/usb/core/devices.c
+++ b/drivers/usb/core/devices.c
@@ -48,6 +48,8 @@
 
 #include "usb.h"
 
+DEFINE_MUTEX(suse_big_usbip_lock);
+
 /* Define ALLOW_SERIAL_NUMBER if you want to see the serial number of devices */
 #define ALLOW_SERIAL_NUMBER
 
--- a/drivers/usb/usbip/usbip_common.h
+++ b/drivers/usb/usbip/usbip_common.h
@@ -263,9 +263,6 @@ struct usbip_device {
 	/* lock for status */
 	spinlock_t lock;
 
-	/* mutex for synchronizing sysfs store paths */
-	struct mutex sysfs_lock;
-
 	int sockfd;
 	struct socket *tcp_socket;
 
@@ -340,4 +337,6 @@ static inline int interface_to_devnum(st
 	return udev->devnum;
 }
 
+extern struct mutex suse_big_usbip_lock;
+
 #endif /* __USBIP_COMMON_H */
--- a/drivers/usb/usbip/vhci_hcd.c
+++ b/drivers/usb/usbip/vhci_hcd.c
@@ -1126,7 +1126,6 @@ static void vhci_device_init(struct vhci
 	vdev->ud.side   = USBIP_VHCI;
 	vdev->ud.status = VDEV_ST_NULL;
 	spin_lock_init(&vdev->ud.lock);
-	mutex_init(&vdev->ud.sysfs_lock);
 
 	INIT_LIST_HEAD(&vdev->priv_rx);
 	INIT_LIST_HEAD(&vdev->priv_tx);
--- a/drivers/usb/usbip/vhci_sysfs.c
+++ b/drivers/usb/usbip/vhci_sysfs.c
@@ -185,7 +185,7 @@ static int vhci_port_disconnect(struct v
 
 	usbip_dbg_vhci_sysfs("enter\n");
 
-	mutex_lock(&vdev->ud.sysfs_lock);
+	mutex_lock(&suse_big_usbip_lock);
 
 	/* lock */
 	spin_lock_irqsave(&vhci->lock, flags);
@@ -197,7 +197,7 @@ static int vhci_port_disconnect(struct v
 		/* unlock */
 		spin_unlock(&vdev->ud.lock);
 		spin_unlock_irqrestore(&vhci->lock, flags);
-		mutex_unlock(&vdev->ud.sysfs_lock);
+		mutex_unlock(&suse_big_usbip_lock);
 
 		return -EINVAL;
 	}
@@ -208,7 +208,7 @@ static int vhci_port_disconnect(struct v
 
 	usbip_event_add(&vdev->ud, VDEV_EVENT_DOWN);
 
-	mutex_unlock(&vdev->ud.sysfs_lock);
+	mutex_unlock(&suse_big_usbip_lock);
 
 	return 0;
 }
@@ -354,7 +354,7 @@ static ssize_t attach_store(struct devic
 	else
 		vdev = &vhci->vhci_hcd_hs->vdev[rhport];
 
-	mutex_lock(&vdev->ud.sysfs_lock);
+	mutex_lock(&suse_big_usbip_lock);
 
 	/* Extract socket from fd. */
 	socket = sockfd_lookup(sockfd, &err);
@@ -436,12 +436,12 @@ static ssize_t attach_store(struct devic
 
 	dev_info(dev, "Device attached\n");
 
-	mutex_unlock(&vdev->ud.sysfs_lock);
+	mutex_unlock(&suse_big_usbip_lock);
 
 	return count;
 
 unlock_mutex:
-	mutex_unlock(&vdev->ud.sysfs_lock);
+	mutex_unlock(&suse_big_usbip_lock);
 	return err;
 }
 static DEVICE_ATTR_WO(attach);
