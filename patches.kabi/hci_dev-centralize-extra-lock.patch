From c7dec08da608d511bd368422447a60c046742208 Mon Sep 17 00:00:00 2001
From: Oliver Neukum <oneukum@suse.com>
Date: Tue, 22 Jul 2025 16:25:13 +0200
Patch-mainline: Never (kABI fixup)
References: CVE-2025-38117 bsc#1245695
Subject: [PATCH] hci_dev centralize extra lock

We need hci_dev to stay constant. We can use one central lock.

Signed-off-by: Oliver Neukum <oneukum\suse.comto stay constant. We can
use one central lock.

Signed-off-by: Oliver Neukum <oneukum@suse.com>
---
 include/net/bluetooth/hci_core.h |    1 
 net/bluetooth/hci_core.c         |    1 
 net/bluetooth/mgmt.c             |   45 ++++++++++++++++++++-------------------
 net/bluetooth/mgmt_util.c        |   30 +++++++++++++-------------
 4 files changed, 40 insertions(+), 37 deletions(-)

--- a/include/net/bluetooth/hci_core.h
+++ b/include/net/bluetooth/hci_core.h
@@ -578,7 +578,6 @@ struct hci_dev {
 	struct hci_conn_hash	conn_hash;
 
 	struct list_head	mesh_pending;
-	struct mutex		mgmt_pending_lock;
 	struct list_head	mgmt_pending;
 	struct list_head	reject_list;
 	struct list_head	accept_list;
--- a/net/bluetooth/hci_core.c
+++ b/net/bluetooth/hci_core.c
@@ -2523,7 +2523,6 @@ struct hci_dev *hci_alloc_dev_priv(int s
 
 	mutex_init(&hdev->lock);
 	mutex_init(&hdev->req_lock);
-	mutex_init(&hdev->mgmt_pending_lock);
 
 	ida_init(&hdev->unset_handle_ida);
 
--- a/net/bluetooth/mgmt.c
+++ b/net/bluetooth/mgmt.c
@@ -41,6 +41,9 @@
 #include "eir.h"
 #include "aosp.h"
 
+/* FIXME: for kABI */
+extern struct mutex suse_mgmt_pending_lock;
+
 #define MGMT_VERSION	1
 #define MGMT_REVISION	23
 
@@ -1365,17 +1368,17 @@ static int set_powered_sync(struct hci_d
 	struct mgmt_pending_cmd *cmd = data;
 	struct mgmt_mode cp;
 
-	mutex_lock(&hdev->mgmt_pending_lock);
+	mutex_lock(&suse_mgmt_pending_lock);
 
 	/* Make sure cmd still outstanding. */
 	if (!__mgmt_pending_listed(hdev, cmd)) {
-		mutex_unlock(&hdev->mgmt_pending_lock);
+		mutex_unlock(&suse_mgmt_pending_lock);
 		return -ECANCELED;
 	}
 
 	memcpy(&cp, cmd->param, sizeof(cp));
 
-	mutex_unlock(&hdev->mgmt_pending_lock);
+	mutex_unlock(&suse_mgmt_pending_lock);
 
 	BT_DBG("%s", hdev->name);
 
@@ -1981,16 +1984,16 @@ static int set_ssp_sync(struct hci_dev *
 	bool changed = false;
 	int err;
 
-	mutex_lock(&hdev->mgmt_pending_lock);
+	mutex_lock(&suse_mgmt_pending_lock);
 
 	if (!__mgmt_pending_listed(hdev, cmd)) {
-		mutex_unlock(&hdev->mgmt_pending_lock);
+		mutex_unlock(&suse_mgmt_pending_lock);
 		return -ECANCELED;
 	}
 
 	memcpy(&cp, cmd->param, sizeof(cp));
 
-	mutex_unlock(&hdev->mgmt_pending_lock);
+	mutex_unlock(&suse_mgmt_pending_lock);
 
 	if (cp.val)
 		changed = !hci_dev_test_and_set_flag(hdev, HCI_SSP_ENABLED);
@@ -2178,17 +2181,17 @@ static int set_le_sync(struct hci_dev *h
 	u8 val;
 	int err;
 
-	mutex_lock(&hdev->mgmt_pending_lock);
+	mutex_lock(&suse_mgmt_pending_lock);
 
 	if (!__mgmt_pending_listed(hdev, cmd)) {
-		mutex_unlock(&hdev->mgmt_pending_lock);
+		mutex_unlock(&suse_mgmt_pending_lock);
 		return -ECANCELED;
 	}
 
 	memcpy(&cp, cmd->param, sizeof(cp));
 	val = !!cp.val;
 
-	mutex_unlock(&hdev->mgmt_pending_lock);
+	mutex_unlock(&suse_mgmt_pending_lock);
 
 	if (!val) {
 		hci_clear_adv_instance_sync(hdev, NULL, 0x00, true);
@@ -2254,16 +2257,16 @@ static int set_mesh_sync(struct hci_dev
 	struct mgmt_cp_set_mesh cp;
 	size_t len;
 
-	mutex_lock(&hdev->mgmt_pending_lock);
+	mutex_lock(&suse_mgmt_pending_lock);
 
 	if (!__mgmt_pending_listed(hdev, cmd)) {
-		mutex_unlock(&hdev->mgmt_pending_lock);
+		mutex_unlock(&suse_mgmt_pending_lock);
 		return -ECANCELED;
 	}
 
 	memcpy(&cp, cmd->param, sizeof(cp));
 
-	mutex_unlock(&hdev->mgmt_pending_lock);
+	mutex_unlock(&suse_mgmt_pending_lock);
 
 	len = cmd->param_len;
 
@@ -3956,16 +3959,16 @@ static int set_name_sync(struct hci_dev
 	struct mgmt_pending_cmd *cmd = data;
 	struct mgmt_cp_set_local_name cp;
 
-	mutex_lock(&hdev->mgmt_pending_lock);
+	mutex_lock(&suse_mgmt_pending_lock);
 
 	if (!__mgmt_pending_listed(hdev, cmd)) {
-		mutex_unlock(&hdev->mgmt_pending_lock);
+		mutex_unlock(&suse_mgmt_pending_lock);
 		return -ECANCELED;
 	}
 
 	memcpy(&cp, cmd->param, sizeof(cp));
 
-	mutex_unlock(&hdev->mgmt_pending_lock);
+	mutex_unlock(&suse_mgmt_pending_lock);
 
 	if (lmp_bredr_capable(hdev)) {
 		hci_update_name_sync(hdev, cp.name);
@@ -5430,16 +5433,16 @@ static int mgmt_add_adv_patterns_monitor
 	struct mgmt_pending_cmd *cmd = data;
 	struct adv_monitor *mon;
 
-	mutex_lock(&hdev->mgmt_pending_lock);
+	mutex_lock(&suse_mgmt_pending_lock);
 
 	if (!__mgmt_pending_listed(hdev, cmd)) {
-		mutex_unlock(&hdev->mgmt_pending_lock);
+		mutex_unlock(&suse_mgmt_pending_lock);
 		return -ECANCELED;
 	}
 
 	mon = cmd->user_data;
 
-	mutex_unlock(&hdev->mgmt_pending_lock);
+	mutex_unlock(&suse_mgmt_pending_lock);
 
 	return hci_add_adv_monitor(hdev, mon);
 }
@@ -6555,16 +6558,16 @@ static int set_adv_sync(struct hci_dev *
 	struct mgmt_mode cp;
 	u8 val;
 
-	mutex_lock(&hdev->mgmt_pending_lock);
+	mutex_lock(&suse_mgmt_pending_lock);
 
 	if (!__mgmt_pending_listed(hdev, cmd)) {
-		mutex_unlock(&hdev->mgmt_pending_lock);
+		mutex_unlock(&suse_mgmt_pending_lock);
 		return -ECANCELED;
 	}
 
 	memcpy(&cp, cmd->param, sizeof(cp));
 
-	mutex_unlock(&hdev->mgmt_pending_lock);
+	mutex_unlock(&suse_mgmt_pending_lock);
 
 	val = !!cp.val;
 
--- a/net/bluetooth/mgmt_util.c
+++ b/net/bluetooth/mgmt_util.c
@@ -30,6 +30,8 @@
 
 #include "mgmt_util.h"
 
+DEFINE_MUTEX(suse_mgmt_pending_lock);
+
 static struct sk_buff *create_monitor_ctrl_event(__le16 index, u32 cookie,
 						 u16 opcode, u16 len, void *buf)
 {
@@ -219,19 +221,19 @@ struct mgmt_pending_cmd *mgmt_pending_fi
 {
 	struct mgmt_pending_cmd *cmd, *tmp;
 
-	mutex_lock(&hdev->mgmt_pending_lock);
+	mutex_lock(&suse_mgmt_pending_lock);
 
 	list_for_each_entry_safe(cmd, tmp, &hdev->mgmt_pending, list) {
 		if (hci_sock_get_channel(cmd->sk) != channel)
 			continue;
 
 		if (cmd->opcode == opcode) {
-			mutex_unlock(&hdev->mgmt_pending_lock);
+			mutex_unlock(&suse_mgmt_pending_lock);
 			return cmd;
 		}
 	}
 
-	mutex_unlock(&hdev->mgmt_pending_lock);
+	mutex_unlock(&suse_mgmt_pending_lock);
 
 	return NULL;
 }
@@ -242,7 +244,7 @@ void mgmt_pending_foreach(u16 opcode, st
 {
 	struct mgmt_pending_cmd *cmd, *tmp;
 
-	mutex_lock(&hdev->mgmt_pending_lock);
+	mutex_lock(&suse_mgmt_pending_lock);
 
 	list_for_each_entry_safe(cmd, tmp, &hdev->mgmt_pending, list) {
 		if (opcode > 0 && cmd->opcode != opcode)
@@ -257,7 +259,7 @@ void mgmt_pending_foreach(u16 opcode, st
 			mgmt_pending_free(cmd);
 	}
 
-	mutex_unlock(&hdev->mgmt_pending_lock);
+	mutex_unlock(&suse_mgmt_pending_lock);
 }
 
 struct mgmt_pending_cmd *mgmt_pending_new(struct sock *sk, u16 opcode,
@@ -297,9 +299,9 @@ struct mgmt_pending_cmd *mgmt_pending_ad
 	if (!cmd)
 		return NULL;
 
-	mutex_lock(&hdev->mgmt_pending_lock);
+	mutex_lock(&suse_mgmt_pending_lock);
 	list_add_tail(&cmd->list, &hdev->mgmt_pending);
-	mutex_unlock(&hdev->mgmt_pending_lock);
+	mutex_unlock(&suse_mgmt_pending_lock);
 
 	return cmd;
 }
@@ -313,9 +315,9 @@ void mgmt_pending_free(struct mgmt_pendi
 
 void mgmt_pending_remove(struct mgmt_pending_cmd *cmd)
 {
-	mutex_lock(&cmd->hdev->mgmt_pending_lock);
+	mutex_lock(&suse_mgmt_pending_lock);
 	list_del(&cmd->list);
-	mutex_unlock(&cmd->hdev->mgmt_pending_lock);
+	mutex_unlock(&suse_mgmt_pending_lock);
 
 	mgmt_pending_free(cmd);
 }
@@ -324,7 +326,7 @@ bool __mgmt_pending_listed(struct hci_de
 {
 	struct mgmt_pending_cmd *tmp;
 
-	lockdep_assert_held(&hdev->mgmt_pending_lock);
+	lockdep_assert_held(&suse_mgmt_pending_lock);
 
 	if (!cmd)
 		return false;
@@ -341,9 +343,9 @@ bool mgmt_pending_listed(struct hci_dev
 {
 	bool listed;
 
-	mutex_lock(&hdev->mgmt_pending_lock);
+	mutex_lock(&suse_mgmt_pending_lock);
 	listed = __mgmt_pending_listed(hdev, cmd);
-	mutex_unlock(&hdev->mgmt_pending_lock);
+	mutex_unlock(&suse_mgmt_pending_lock);
 
 	return listed;
 }
@@ -355,13 +357,13 @@ bool mgmt_pending_valid(struct hci_dev *
 	if (!cmd)
 		return false;
 
-	mutex_lock(&hdev->mgmt_pending_lock);
+	mutex_lock(&suse_mgmt_pending_lock);
 
 	listed = __mgmt_pending_listed(hdev, cmd);
 	if (listed)
 		list_del(&cmd->list);
 
-	mutex_unlock(&hdev->mgmt_pending_lock);
+	mutex_unlock(&suse_mgmt_pending_lock);
 
 	return listed;
 }
