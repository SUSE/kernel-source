From: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Subject: kABI: bpf: struct bpf_func_proto kABI workaround
Patch-mainline: never, kabi
References: git-fixes

Upstream commit 508362ac66b0 "bpf: Allow helpers to accept pointers with a
fixed size" added five size_t elements into an unnamed union, breaking the
kABI. Luckily it does not expand the size of the unamed union, thus simply
wrapping the new fields with __GENKSYMS__ macro is enough.

As an extra caution, check that the newly added field is no larger than the
largest existing field.

Signed-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
---
 include/linux/bpf.h |    4 ++++
 1 file changed, 4 insertions(+)

--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@ -608,6 +608,7 @@ struct bpf_func_proto {
 			u32 *arg5_btf_id;
 		};
 		u32 *arg_btf_id[5];
+#ifndef __GENKSYMS__
 		struct {
 			size_t arg1_size;
 			size_t arg2_size;
@@ -616,10 +617,13 @@ struct bpf_func_proto {
 			size_t arg5_size;
 		};
 		size_t arg_size[5];
+#endif
 	};
 	int *ret_btf_id; /* return value btf_id */
 	bool (*allowed)(const struct bpf_prog *prog);
 };
+/* Make sure the unamed union do not expand and breaks kABI */
+static_assert(sizeof_field(struct bpf_func_proto, arg_size) <= sizeof_field(struct bpf_func_proto, arg_btf_id));
 
 /* bpf_context is intentionally undefined structure. Pointer to bpf_context is
  * the first argument to eBPF programs.
