From: Steffen Jaeckel <sjaeckel@suse.de>
Subject: kABI fix for tcp: fix cookie_init_timestamp() overflows
Patch-mainline: Never, kABI workaround
References: git-fixes

Upstream commit 73ed8e03388d ("tcp: fix cookie_init_timestamp()
overflows") changed the API of `tcp_ns_to_ts()` which broke kABI.
Rename the function to `__tcp_ns_to_ts()` and re-introduce the
old API.

Signed-off-by: Steffen Jaeckel <sjaeckel@suse.de>

---
 include/net/tcp.h     | 12 ++++++++++--
 net/ipv4/syncookies.c |  2 +-
 2 files changed, 11 insertions(+), 3 deletions(-)

diff --git a/include/net/tcp.h b/include/net/tcp.h
index 819e54d1350e5..35ec298ab295d 100644
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@ -840,11 +840,19 @@ static inline u32 tcp_time_stamp(const struct tcp_sock *tp)
 }
 
 /* Convert a nsec timestamp into TCP TSval timestamp (ms based currently) */
-static inline u64 tcp_ns_to_ts(u64 ns)
+static inline u64 __tcp_ns_to_ts(u64 ns)
 {
 	return div_u64(ns, NSEC_PER_SEC / TCP_TS_HZ);
 }
 
+/* Convert a nsec timestamp into TCP TSval timestamp (ms based currently)
+ * Backported version before 73ed8e0338 ("tcp: fix cookie_init_timestamp()
+ * overflows") */
+static inline u32 tcp_ns_to_ts(u64 ns)
+{
+	return __tcp_ns_to_ts(ns);
+}
+
 void tcp_mstamp_refresh(struct tcp_sock *tp);
 
 static inline u32 tcp_stamp_us_delta(u64 t1, u64 t0)
@@ -854,7 +862,7 @@ static inline u32 tcp_stamp_us_delta(u64 t1, u64 t0)
 
 static inline u32 tcp_skb_timestamp(const struct sk_buff *skb)
 {
-	return tcp_ns_to_ts(skb->skb_mstamp_ns);
+	return __tcp_ns_to_ts(skb->skb_mstamp_ns);
 }
 
 /* provide the departure time in us unit */
diff --git a/net/ipv4/syncookies.c b/net/ipv4/syncookies.c
index 5e9f516e10de4..8febd8066cb88 100644
--- a/net/ipv4/syncookies.c
+++ b/net/ipv4/syncookies.c
@@ -62,7 +62,7 @@ static u32 cookie_hash(__be32 saddr, __be32 daddr, __be16 sport, __be16 dport,
 u64 cookie_init_timestamp(struct request_sock *req, u64 now)
 {
 	const struct inet_request_sock *ireq = inet_rsk(req);
-	u64 ts, ts_now = tcp_ns_to_ts(now);
+	u64 ts, ts_now = __tcp_ns_to_ts(now);
 	u32 options = 0;
 
 	options = ireq->wscale_ok ? ireq->snd_wscale : TS_OPT_WSCALE_MASK;
-- 
2.47.1

