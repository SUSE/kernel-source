From: Steffen Jaeckel <sjaeckel@suse.de>
Subject: kABI fix for ipv6: remove hard coded limitation on ipv6_pinfo
Patch-mainline: Never, kABI workaround
References: git-fixes

Upstream commit f5f80e32de12 ("ipv6: remove hard coded
limitation on ipv6_pinfo") added a new member to `struct proto`, which
had luckily a 4 byte hole to fit this in.

```
        unsigned int               inuse_idx;            /*   216     4 */

        /* XXX 4 bytes hole, try to pack */

        int                        (*forward_alloc_get)(const struct sock  *); /*   224     8 */
```

The patch to `inet6_register_protosw()` was proposed by Pedro.

Signed-off-by: Steffen Jaeckel <sjaeckel@suse.de>
Signed-off-by: Pedro Falcato <pfalcato@suse.de>
---
 include/net/sock.h  | 5 ++++-
 net/ipv6/af_inet6.c | 7 +++++++
 2 files changed, 11 insertions(+), 1 deletion(-)

diff --git a/include/net/sock.h b/include/net/sock.h
index 48ed34c0f7441..33e3d67f20a80 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -1300,6 +1300,10 @@ struct proto {
 	unsigned int		inuse_idx;
 #endif
 
+#ifndef __GENKSYMS__
+	unsigned int		ipv6_pinfo_offset;
+#endif
+
 #if IS_ENABLED(CONFIG_MPTCP)
 	int			(*forward_alloc_get)(const struct sock *sk);
 #endif
@@ -1333,7 +1337,6 @@ struct proto {
 
 	struct kmem_cache	*slab;
 	unsigned int		obj_size;
-	unsigned int		ipv6_pinfo_offset;
 	slab_flags_t		slab_flags;
 	unsigned int		useroffset;	/* Usercopy region offset */
 	unsigned int		usersize;	/* Usercopy region size */
diff --git a/net/ipv6/af_inet6.c b/net/ipv6/af_inet6.c
index 53b7862a930db..d53d6c1d8aa73 100644
--- a/net/ipv6/af_inet6.c
+++ b/net/ipv6/af_inet6.c
@@ -745,9 +745,16 @@ int inet6_register_protosw(struct inet_protosw *p)
 	struct list_head *lh;
 	struct inet_protosw *answer;
 	struct list_head *last_perm;
+	struct proto *prot = p->prot;
 	int protocol = p->protocol;
 	int ret;
 
+	if (prot->ipv6_pinfo_offset == 0) {
+		/* Offset 0 is invalid and hints that no one filled this in. Revert
+		 * to the old behaviour. */
+		prot->ipv6_pinfo_offset = prot->obj_size - sizeof(struct ipv6_pinfo);
+	}
+
 	spin_lock_bh(&inetsw6_lock);
 
 	ret = -EINVAL;
-- 
2.49.0

