From: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Subject: kABI: bpf: Prevent tailcall infinite loop caused by freplace kABI workaround
Patch-mainline: never, kabi
References: bsc#1235712 CVE-2024-47794

Upstream commit `d6083f040d5d` "bpf: Prevent tailcall infinite loop caused by
freplace" added several fields to struct bpf_prog_aux that breaks kABI. Since
the structure was always accessed behind a pointer, workaround the kABI breakge
by simply moving the new field to the end of struct bpf_prog_aux and wrap them
with the __GENKSYMS__ macro.

Later refreshed to include kABI workaround for 81f6d0530ba0 "bpf: check
changes_pkt_data property for extension programs" as well.

Signed-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
---
 include/linux/bpf.h          |   11 +++++++----
 include/linux/bpf_verifier.h |   18 ++++++++++++++++++
 2 files changed, 25 insertions(+), 4 deletions(-)

--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@ -1440,10 +1440,6 @@ struct bpf_prog_aux {
 	bool sleepable;
 	bool tail_call_reachable;
 	bool xdp_has_frags;
-	bool is_extended; /* true if extended by freplace program */
-	bool changes_pkt_data;
-	u64 prog_array_member_cnt; /* counts how many times as member of prog_array */
-	struct mutex ext_mutex; /* mutex for is_extended and prog_array_member_cnt */
 	/* BTF_KIND_FUNC_PROTO for valid attach_btf_id */
 	const struct btf_type *attach_func_proto;
 	/* function name for valid attach_btf_id */
@@ -1502,7 +1498,14 @@ struct bpf_prog_aux {
 		struct work_struct work;
 		struct rcu_head	rcu;
 	};
+#ifndef __GENKSYMS__
+	bool is_extended; /* true if extended by freplace program */
+	bool changes_pkt_data;
+	u64 prog_array_member_cnt; /* counts how many times as member of prog_array */
+	struct mutex ext_mutex; /* mutex for is_extended and prog_array_member_cnt */
+#else
 	void *suse_kabi_padding;
+#endif
 };
 
 struct bpf_prog {
--- a/include/linux/bpf_verifier.h
+++ b/include/linux/bpf_verifier.h
@@ -614,9 +614,27 @@ struct bpf_subprog_info {
 	bool tail_call_reachable;
 	bool has_ld_abs;
 	bool is_async_cb;
+#ifndef __GENKSYMS__
 	bool changes_pkt_data;
+#endif
 };
 
+struct __orig_bpf_subprog_info {
+	/* 'start' has to be the first field otherwise find_subprog() won't work */
+	u32 start; /* insn idx of function entry point */
+	u32 linfo_idx; /* The idx to the main_prog->aux->linfo */
+	u16 stack_depth; /* max. stack depth used by this function */
+	bool has_tail_call;
+	bool tail_call_reachable;
+	bool has_ld_abs;
+	bool is_async_cb;
+};
+/* struct bpf_subprog_info is embedded in struct bpf_verifier_env, make sure it
+ * does not change in size. */
+static_assert(sizeof(struct bpf_subprog_info) ==
+              sizeof(struct __orig_bpf_subprog_info));
+
+
 struct bpf_verifier_env;
 
 struct backtrack_state {
