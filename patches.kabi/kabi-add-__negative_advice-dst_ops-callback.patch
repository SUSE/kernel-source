From: Hannes Reinecke <hare@suse.de>
Date: Fri, 4 Oct 2024 08:49:56 +0200
Subject: [PATCH] kabi: add __negative_advice() dst_ops callback
Patch-Mainline: never, kABI fix
References: CVE-2024-36971,bsc#1226145

Restore the original negative_advice() callback declaration to dst_ops
and rename the patched function to __negative_advice() to retain kABI
compability.

Signed-off-by: Hannes Reinecke <hare@suse.de>
---
 include/net/dst_ops.h  |  5 ++++-
 include/net/sock.h     | 17 ++++++++++++++---
 net/ipv4/route.c       |  2 +-
 net/ipv6/route.c       |  2 +-
 net/xfrm/xfrm_policy.c |  6 +++---
 5 files changed, 23 insertions(+), 9 deletions(-)

diff --git a/include/net/dst_ops.h b/include/net/dst_ops.h
index b93799fe46e8a..dad1575fa38f2 100644
--- a/include/net/dst_ops.h
+++ b/include/net/dst_ops.h
@@ -24,7 +24,7 @@ struct dst_ops {
 	void			(*destroy)(struct dst_entry *);
 	void			(*ifdown)(struct dst_entry *,
 					  struct net_device *dev, int how);
-	void			(*negative_advice)(struct sock *sk, struct dst_entry *);
+	struct dst_entry *	(*negative_advice)(struct dst_entry *);
 	void			(*link_failure)(struct sk_buff *);
 	void			(*update_pmtu)(struct dst_entry *dst, struct sock *sk,
 					       struct sk_buff *skb, u32 mtu,
@@ -41,6 +41,9 @@ struct dst_ops {
 	struct kmem_cache	*kmem_cachep;
 
 	struct percpu_counter	pcpuc_entries ____cacheline_aligned_in_smp;
+#ifndef __GENKSYMS__
+	void			(*__negative_advice)(struct sock *sk, struct dst_entry *);
+#endif
 };
 
 static inline int dst_entries_get_fast(struct dst_ops *dst)
diff --git a/include/net/sock.h b/include/net/sock.h
index a93c9aef173b7..bb03d4113efca 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -1932,12 +1932,23 @@ sk_dst_get(struct sock *sk)
 
 static inline void dst_negative_advice(struct sock *sk)
 {
-	struct dst_entry *dst = __sk_dst_get(sk);
+	struct dst_entry *ndst, *dst = __sk_dst_get(sk);
 
 	sk_rethink_txhash(sk);
 
-	if (dst && dst->ops->negative_advice)
-		dst->ops->negative_advice(sk, dst);
+	if (dst && dst->ops->__negative_advice) {
+		dst->ops->__negative_advice(sk, dst);
+		return;
+	}
+	if (dst && dst->ops->negative_advice) {
+		ndst = dst->ops->negative_advice(dst);
+
+		if (ndst != dst) {
+			rcu_assign_pointer(sk->sk_dst_cache, ndst);
+			sk_tx_queue_clear(sk);
+			sk->sk_dst_pending_confirm = 0;
+		}
+	}
 }
 
 static inline void
diff --git a/net/ipv4/route.c b/net/ipv4/route.c
index 7b9c451a868b5..93eaab8b0546f 100644
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@ -165,7 +165,7 @@ static struct dst_ops ipv4_dst_ops = {
 	.mtu =			ipv4_mtu,
 	.cow_metrics =		ipv4_cow_metrics,
 	.destroy =		ipv4_dst_destroy,
-	.negative_advice =	ipv4_negative_advice,
+	.__negative_advice =	ipv4_negative_advice,
 	.link_failure =		ipv4_link_failure,
 	.update_pmtu =		ip_rt_update_pmtu,
 	.redirect =		ip_do_redirect,
diff --git a/net/ipv6/route.c b/net/ipv6/route.c
index d86c0c9219249..9ceef8e1e5d6a 100644
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@ -251,7 +251,7 @@ static struct dst_ops ip6_dst_ops_template = {
 	.cow_metrics		=	dst_cow_metrics_generic,
 	.destroy		=	ip6_dst_destroy,
 	.ifdown			=	ip6_dst_ifdown,
-	.negative_advice	=	ip6_negative_advice,
+	.__negative_advice	=	ip6_negative_advice,
 	.link_failure		=	ip6_link_failure,
 	.update_pmtu		=	ip6_rt_update_pmtu,
 	.redirect		=	rt6_do_redirect,
diff --git a/net/xfrm/xfrm_policy.c b/net/xfrm/xfrm_policy.c
index 142e971052959..b2f8b377ec0c7 100644
--- a/net/xfrm/xfrm_policy.c
+++ b/net/xfrm/xfrm_policy.c
@@ -3920,8 +3920,8 @@ int xfrm_policy_register_afinfo(const struct xfrm_policy_afinfo *afinfo, int fam
 			dst_ops->default_advmss = xfrm_default_advmss;
 		if (likely(dst_ops->mtu == NULL))
 			dst_ops->mtu = xfrm_mtu;
-		if (likely(dst_ops->negative_advice == NULL))
-			dst_ops->negative_advice = xfrm_negative_advice;
+		if (likely(dst_ops->__negative_advice == NULL))
+			dst_ops->__negative_advice = xfrm_negative_advice;
 		if (likely(dst_ops->link_failure == NULL))
 			dst_ops->link_failure = xfrm_link_failure;
 		if (likely(dst_ops->neigh_lookup == NULL))
@@ -3952,7 +3952,7 @@ void xfrm_policy_unregister_afinfo(const struct xfrm_policy_afinfo *afinfo)
 
 	dst_ops->kmem_cachep = NULL;
 	dst_ops->check = NULL;
-	dst_ops->negative_advice = NULL;
+	dst_ops->__negative_advice = NULL;
 	dst_ops->link_failure = NULL;
 }
 EXPORT_SYMBOL(xfrm_policy_unregister_afinfo);
-- 
2.35.3

