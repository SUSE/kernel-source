From: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Subject: kABI: bpf: enum bpf_{type_flag,arg_type} kABI workaround
Patch-mainline: never, kabi
References: git-fixes

Upstream commit 32556ce93bc4 ("bpf: Fix helper writes to read-only maps") break
kABI because it:

1. Added a new "enum bpf_type_flag" value, which changed the value of
   __BPF_TYPE_FLAG_MAX and __BPF_TYPE_LAST_FLAG
2. Removed ARG_PTR_TO_INT and ARG_PTR_TO_LONG from "enum bpf_arg_type"

Luckly those two value in "enum bpf_type_flag" are only used to ensure that
related types (bpf_arg_type, bpf_ret_type, and bpf_reg_type) are wide enough to
accomodate the type flags through BPF_TYPE_LIMIT (derived from
__BPF_TYPE_LAST_FLAG). Hence it is fine to simply hide the new "enum
bpf_type_flag" value with __GENKSYM__ macro. As an extra caution, statically
assert that the size of "enum bpf_type_flag" does not change.

As for change in "enum bpf_arg_type", we simply restore the deleted constant so
those values that comes after them stays the same.

Signed-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
---
 include/linux/bpf.h |   15 +++++++++++++++
 1 file changed, 15 insertions(+)

--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@ -677,14 +677,21 @@ enum bpf_type_flag {
 	/* DYNPTR points to xdp_buff */
 	DYNPTR_TYPE_XDP		= BIT(16 + BPF_BASE_TYPE_BITS),
 
+#ifndef __GENKSYMS__
 	/* Memory must be aligned on some architectures, used in combination with
 	 * MEM_FIXED_SIZE.
 	 */
 	MEM_ALIGNED		= BIT(17 + BPF_BASE_TYPE_BITS),
+#endif
 
 	__BPF_TYPE_FLAG_MAX,
 	__BPF_TYPE_LAST_FLAG	= __BPF_TYPE_FLAG_MAX - 1,
 };
+enum bpf_type_flag_orig {
+	__ORIG_BPF_TYPE_LAST_FLAG		= BIT(16 + BPF_BASE_TYPE_BITS),
+	
+};
+suse_kabi_static_assert(sizeof(enum bpf_type_flag) == sizeof(enum bpf_type_flag_orig));
 
 #define DYNPTR_TYPE_FLAG_MASK	(DYNPTR_TYPE_LOCAL | DYNPTR_TYPE_RINGBUF | DYNPTR_TYPE_SKB \
 				 | DYNPTR_TYPE_XDP)
@@ -718,6 +725,14 @@ enum bpf_arg_type {
 	ARG_ANYTHING,		/* any (initialized) argument is ok */
 	ARG_PTR_TO_SPIN_LOCK,	/* pointer to bpf_spin_lock */
 	ARG_PTR_TO_SOCK_COMMON,	/* pointer to sock_common */
+#ifndef __GENKSYMS__
+	/* Placeholder to preserve kABI */
+	__UNUSED_ARG_PTR_TO_INT,
+	__UNUSED_ARG_PTR_TO_LONG,
+#else
+	ARG_PTR_TO_INT,		/* pointer to int */
+	ARG_PTR_TO_LONG,	/* pointer to long */
+#endif /* __GENKSYMS__ */
 	ARG_PTR_TO_SOCKET,	/* pointer to bpf_sock (fullsock) */
 	ARG_PTR_TO_BTF_ID,	/* pointer to in-kernel struct */
 	ARG_PTR_TO_RINGBUF_MEM,	/* pointer to dynamically reserved ringbuf memory */
