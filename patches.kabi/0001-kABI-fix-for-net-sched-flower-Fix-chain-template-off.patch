From: Steffen Jaeckel <sjaeckel@suse.de>
Date: Thu, 15 Aug 2024 12:28:29 +0200
Subject: kABI fix for net/sched: flower: Fix chain template offload
Patch-mainline: Never, kABI workaround
References: CVE-2024-26669 bsc#1222350

Protect `tmplt_reoffload` by a flag.

Signed-off-by: Steffen Jaeckel <sjaeckel@suse.de>
---
 include/net/sch_generic.h | 15 +++++++++++----
 net/sched/cls_api.c       |  9 ++++++---
 net/sched/cls_flower.c    |  4 ++--
 3 files changed, 19 insertions(+), 9 deletions(-)

diff --git a/include/net/sch_generic.h b/include/net/sch_generic.h
index b64791ebbbc36..a93a354a8eac6 100644
--- a/include/net/sch_generic.h
+++ b/include/net/sch_generic.h
@@ -376,10 +376,6 @@ struct tcf_proto_ops {
 						struct nlattr **tca,
 						struct netlink_ext_ack *extack);
 	void			(*tmplt_destroy)(void *tmplt_priv);
-	void			(*tmplt_reoffload)(struct tcf_chain *chain,
-						   bool add,
-						   flow_setup_cb_t *cb,
-						   void *cb_priv);
 	struct tcf_exts *	(*get_exts)(const struct tcf_proto *tp,
 					    u32 handle);
 
@@ -397,14 +393,25 @@ struct tcf_proto_ops {
 
 	struct module		*owner;
 	int			flags;
+#ifndef __GENKSYMS__
+	void			(*tmplt_reoffload)(struct tcf_chain *chain,
+						   bool add,
+						   flow_setup_cb_t *cb,
+						   void *cb_priv);
+#endif /* __GENKSYMS__ */
 };
 
 /* Classifiers setting TCF_PROTO_OPS_DOIT_UNLOCKED in tcf_proto_ops->flags
  * are expected to implement tcf_proto_ops->delete_empty(), otherwise race
  * conditions can occur when filters are inserted/deleted simultaneously.
+ * Classifiers setting TCF_PROTO_OPS_HAS_TMPLT_REOFFLOAD are of the new
+ * version of `struct tcf_proto_ops` with `tmplt_reoffload()` available.
  */
 enum tcf_proto_ops_flags {
 	TCF_PROTO_OPS_DOIT_UNLOCKED = 1,
+#ifndef __GENKSYMS__
+	TCF_PROTO_OPS_HAS_TMPLT_REOFFLOAD = 0x2080,
+#endif /* __GENKSYMS__ */
 };
 
 struct tcf_proto {
diff --git a/net/sched/cls_api.c b/net/sched/cls_api.c
index ae7f156ac4529..0e123ef746581 100644
--- a/net/sched/cls_api.c
+++ b/net/sched/cls_api.c
@@ -1527,6 +1527,7 @@ tcf_block_playback_offloads(struct tcf_block *block, flow_setup_cb_t *cb,
 {
 	struct tcf_chain *chain, *chain_prev;
 	struct tcf_proto *tp, *tp_prev;
+	bool has_tmplt_reoffload;
 	int err;
 
 	lockdep_assert_held(&block->cb_lock);
@@ -1536,7 +1537,8 @@ tcf_block_playback_offloads(struct tcf_block *block, flow_setup_cb_t *cb,
 	     chain_prev = chain,
 		     chain = __tcf_get_next_chain(block, chain),
 		     tcf_chain_put(chain_prev)) {
-		if (chain->tmplt_ops && add)
+		has_tmplt_reoffload = (chain->tmplt_ops && (chain->tmplt_ops->flags & TCF_PROTO_OPS_HAS_TMPLT_REOFFLOAD) == TCF_PROTO_OPS_HAS_TMPLT_REOFFLOAD);
+		if (has_tmplt_reoffload && add)
 			chain->tmplt_ops->tmplt_reoffload(chain, true, cb,
 							  cb_priv);
 		for (tp = __tcf_get_next_proto(chain, NULL); tp;
@@ -1554,7 +1556,7 @@ tcf_block_playback_offloads(struct tcf_block *block, flow_setup_cb_t *cb,
 				goto err_playback_remove;
 			}
 		}
-		if (chain->tmplt_ops && !add)
+		if (has_tmplt_reoffload && !add)
 			chain->tmplt_ops->tmplt_reoffload(chain, false, cb,
 							  cb_priv);
 	}
@@ -2957,7 +2959,8 @@ static int tc_chain_tmplt_add(struct tcf_chain *chain, struct net *net,
 	if (IS_ERR(ops))
 		return PTR_ERR(ops);
 	if (!ops->tmplt_create || !ops->tmplt_destroy || !ops->tmplt_dump ||
-	    !ops->tmplt_reoffload) {
+	    ((ops->flags & TCF_PROTO_OPS_HAS_TMPLT_REOFFLOAD) == TCF_PROTO_OPS_HAS_TMPLT_REOFFLOAD &&
+		!ops->tmplt_reoffload)) {
 		NL_SET_ERR_MSG(extack, "Chain templates are not supported with specified classifier");
 		module_put(ops->owner);
 		return -EOPNOTSUPP;
diff --git a/net/sched/cls_flower.c b/net/sched/cls_flower.c
index 53f58540b07db..b8dfe98f0d9fa 100644
--- a/net/sched/cls_flower.c
+++ b/net/sched/cls_flower.c
@@ -3486,11 +3486,11 @@ static struct tcf_proto_ops cls_fl_ops __read_mostly = {
 	.bind_class	= fl_bind_class,
 	.tmplt_create	= fl_tmplt_create,
 	.tmplt_destroy	= fl_tmplt_destroy,
-	.tmplt_reoffload = fl_tmplt_reoffload,
 	.tmplt_dump	= fl_tmplt_dump,
 	.get_exts	= fl_get_exts,
 	.owner		= THIS_MODULE,
-	.flags		= TCF_PROTO_OPS_DOIT_UNLOCKED,
+	.flags		= TCF_PROTO_OPS_DOIT_UNLOCKED | TCF_PROTO_OPS_HAS_TMPLT_REOFFLOAD,
+	.tmplt_reoffload = fl_tmplt_reoffload,
 };
 MODULE_ALIAS_NET_CLS("flower");
 
-- 
2.46.0

