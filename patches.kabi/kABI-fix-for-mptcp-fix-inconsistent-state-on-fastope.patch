From: Steffen Jaeckel <sjaeckel@suse.de>
Date: Tue, 18 Feb 2025 12:24:07 +0100
Subject: kABI fix for mptcp: fix inconsistent state on fastopen race
References: CVE-2024-26708 bsc#1222672
Patch-mainline: Never, kABI workaround

Upstream commit 4fd19a307016 ("mptcp: fix inconsistent state
on fastopen race") introduced three breaking changes, which are handled in
this patch.
 * a new variable `pending_state` was added to `struct mptcp_sock`, which
   is now moved into a hole.
 * a new define replaces an old one, so renumber the new one and re-add
   the old one.
 * an API function was removed, so re-add it again.

```
        u8                         in_accept_queue:1;    /*  1562: 4  1 */

        /* XXX 3 bits hole, try to pack */
        /* XXX 5 bytes hole, try to pack */

        struct work_struct         work;                 /*  1568    32 */
```

Signed-off-by: Steffen Jaeckel <sjaeckel@suse.de>

---
 net/mptcp/protocol.h | 12 ++++++++----
 net/mptcp/subflow.c  |  5 +++++
 2 files changed, 13 insertions(+), 4 deletions(-)

diff --git a/net/mptcp/protocol.h b/net/mptcp/protocol.h
index bdf2b9b185c32..1ceb9451eb88c 100644
--- a/net/mptcp/protocol.h
+++ b/net/mptcp/protocol.h
@@ -122,8 +122,9 @@
 #define MPTCP_ERROR_REPORT	3
 #define MPTCP_RETRANSMIT	4
 #define MPTCP_FLUSH_JOIN_LIST	5
-#define MPTCP_SYNC_STATE	6
+#define MPTCP_CONNECTED		6
 #define MPTCP_RESET_SCHEDULER	7
+#define MPTCP_SYNC_STATE	8
 
 struct mptcp_skb_cb {
 	u64 map_seq;
@@ -290,15 +291,17 @@ struct mptcp_sock {
 	bool		use_64bit_ack; /* Set when we received a 64-bit DSN */
 	bool		csum_enabled;
 	bool		allow_infinite_fallback;
-	u8		pending_state; /* A subflow asked to set this sk_state,
-					* protected by the msk data lock
-					*/
 	u8		mpc_endpoint_id;
 	u8		recvmsg_inq:1,
 			cork:1,
 			nodelay:1,
 			fastopening:1,
 			in_accept_queue:1;
+#ifndef __GENKSYMS__
+	u8		pending_state; /* A subflow asked to set this sk_state,
+					* protected by the msk data lock
+					*/
+#endif
 	struct work_struct work;
 	struct sk_buff  *ooo_last_skb;
 	struct rb_root  out_of_order_queue;
@@ -694,6 +697,7 @@ void mptcp_get_options(const struct sk_buff *skb,
 		       struct mptcp_options_received *mp_opt);
 
 void mptcp_finish_connect(struct sock *sk);
+void __mptcp_set_connected(struct sock *sk);
 void __mptcp_sync_state(struct sock *sk, int state);
 void mptcp_reset_timeout(struct mptcp_sock *msk, unsigned long fail_tout);
 static inline bool mptcp_is_fully_established(struct sock *sk)
diff --git a/net/mptcp/subflow.c b/net/mptcp/subflow.c
index 4328eda046146..d3a20e80dd531 100644
--- a/net/mptcp/subflow.c
+++ b/net/mptcp/subflow.c
@@ -419,6 +419,11 @@ static bool subflow_use_different_dport(struct mptcp_sock *msk, const struct soc
 	return inet_sk(sk)->inet_dport != inet_sk((struct sock *)msk)->inet_dport;
 }
 
+void __mptcp_set_connected(struct sock *sk)
+{
+	__mptcp_sync_state(sk, TCP_ESTABLISHED);
+}
+
 void __mptcp_sync_state(struct sock *sk, int state)
 {
 	if (sk->sk_state == TCP_SYN_SENT) {
-- 
2.47.1

