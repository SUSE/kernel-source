From f5f93147c1c3d16ee57ae4b0bc77e488ee76418d Mon Sep 17 00:00:00 2001
From: Miroslav Franc <mfranc@suse.cz>
Date: Wed, 3 Sep 2025 08:39:20 +0200
Subject: [PATCH] kABI check workaround
Patch-mainline: Never, kABI check workaround
References: git-fixes bsc#1248735

mfranc@mfranc kernel$ pahole -C ism_dev drivers/s390/net/ism.o
struct ism_dev {
        spinlock_t                 lock;                 /*     0     4 */

        /* XXX 4 bytes hole, try to pack */

        struct list_head           list;                 /*     8    16 */
...


Signed-off-by: Miroslav Franc <mfranc@suse.cz>

---
 include/linux/ism.h | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/include/linux/ism.h b/include/linux/ism.h
index 04e2fc1973ce4..8e01e97bcc803 100644
--- a/include/linux/ism.h
+++ b/include/linux/ism.h
@@ -10,6 +10,8 @@
 #define _ISM_H
 
 #include <linux/workqueue.h>
+#include <linux/build_bug.h>
+#include <linux/stddef.h>
 
 struct ism_dmb {
 	u64 dmb_tok;
@@ -28,7 +30,9 @@ struct ism_dmb {
 
 struct ism_dev {
 	spinlock_t lock; /* protects the ism device */
+#if defined(__s390x__) && !defined(__GENKSYMS__)
 	spinlock_t cmd_lock; /* serializes cmds */
+#endif
 	struct list_head list;
 	struct pci_dev *pdev;
 
@@ -48,6 +52,18 @@ struct ism_dev {
 	struct ism_client *subs[MAX_CLIENTS];
 };
 
+#if defined(__s390x__)
+struct ___ism_dev {
+	spinlock_t lock; /* protects the ism device */
+	struct list_head list;
+};
+
+static_assert(offsetof(struct ism_dev, lock) ==
+	      offsetof(struct ___ism_dev, lock));
+static_assert(offsetof(struct ism_dev, list) ==
+	      offsetof(struct ___ism_dev, list));
+#endif
+
 struct ism_event {
 	u32 type;
 	u32 code;
-- 
2.51.0

