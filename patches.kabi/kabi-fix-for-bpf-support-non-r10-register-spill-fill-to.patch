From: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Subject: kABI: bpf: support non-r10 register spill/fill to/from stack in precision tracking
Patch-mainline: never, kabi
References: bsc#1232823 CVE-2023-52920

Upstream commit 41f6f64e6999 "bpf: support non-r10 register spill/fill to/from
stack in precision tracking" made the following changes that breaks kABI:
- added a new "struct bpf_jmp_history_entry *cur_hist_ent" field in "struct
  bpf_verifier_env"
- jmp_history field in "struct bpf_verifier_log" changed from "struct
  bpf_idx_pair *" into "struct bpf_jmp_history_entry *"

Restore the kABI breakage by:
- move the cur_hist_ent field to the end of "struct bpf_verifier_env", the
  latter is only accessed through pointer
- bring back "struct bpf_jmp_history_entry" definition and revert type of
  jmp_history back to "struct bpf_idx_pair" within __GENKSYMS__

Signed-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
---
 include/linux/bpf_verifier.h |   17 +++++++++++++----
 1 file changed, 13 insertions(+), 4 deletions(-)

--- a/include/linux/bpf_verifier.h
+++ b/include/linux/bpf_verifier.h
@@ -306,12 +306,17 @@ enum {
 static_assert(INSN_F_FRAMENO_MASK + 1 >= MAX_CALL_FRAMES);
 static_assert(INSN_F_SPI_MASK + 1 >= MAX_BPF_STACK / 8);
 
+/* Original definition that is no longer used but kept to preserve kABI */
+struct bpf_idx_pair {
+	u32 prev_idx;
+	u32 idx;
+};
+
 struct bpf_jmp_history_entry {
+	u32 prev_idx;
 	u32 idx;
-	/* insn idx can't be bigger than 1 million */
-	u32 prev_idx : 22;
 	/* special flags, e.g., whether insn is doing register stack spill/load */
-	u32 flags : 10;
+	u32 flags;
 };
 
 #define BPF_ID_MAP_SIZE_OLD (MAX_BPF_REG + MAX_BPF_STACK / BPF_REG_SIZE)
@@ -389,7 +394,11 @@ struct bpf_verifier_state {
 	 * For most states jmp_history_cnt is [0-3].
 	 * For loops can go up to ~40.
 	 */
+#ifndef __GENKSYMS__
 	struct bpf_jmp_history_entry *jmp_history;
+#else
+	struct bpf_idx_pair *jmp_history;
+#endif
 	u32 jmp_history_cnt;
 };
 
@@ -649,7 +658,6 @@ struct bpf_verifier_env {
 		int *insn_stack;
 		int cur_stack;
 	} cfg;
-	struct bpf_jmp_history_entry *cur_hist_ent;
 	u32 pass_cnt; /* number of times do_check() was called */
 	u32 subprog_cnt;
 	/* number of instructions analyzed by the verifier */
@@ -688,6 +696,7 @@ struct bpf_verifier_env {
 		struct bpf_idset idset_scratch;
 	};
 	struct backtrack_state bt;
+	struct bpf_jmp_history_entry *cur_hist_ent;
 #else
 	char type_str_buf[TYPE_STR_BUF_LEN_OLD];
 #endif /* __GENKSYMS__ */
