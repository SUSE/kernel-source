From: Takashi Iwai <tiwai@suse.de>
Subject: kABI workaround for FPGA changes
Patch-mainline: Never, kABI workaround
References: CVE-2024-35247 bsc#1226948 CVE-2024-36479 bsc#1226949 CVE-2024-37021 bsc#1226950

A few FPGA-related structs have received new fields.  Put them into
the already existing padding positions.

Also, the lost symbols are revived.

Signed-off-by: Takashi Iwai <tiwai@suse.de>

---
 drivers/fpga/fpga-bridge.c       |   11 ++++++++++
 drivers/fpga/fpga-mgr.c          |   40 +++++++++++++++++++++++++++++++++++++++
 drivers/fpga/fpga-region.c       |   20 +++++++++++++++++++
 include/linux/fpga/fpga-bridge.h |    5 +++-
 include/linux/fpga/fpga-mgr.h    |    5 +++-
 include/linux/fpga/fpga-region.h |    5 +++-
 6 files changed, 83 insertions(+), 3 deletions(-)

--- a/drivers/fpga/fpga-bridge.c
+++ b/drivers/fpga/fpga-bridge.c
@@ -389,6 +389,17 @@ error_kfree:
 }
 EXPORT_SYMBOL_GPL(__fpga_bridge_register);
 
+/* FIXME: provided only for kABI compatibility */
+#undef fpga_bridge_register
+struct fpga_bridge *
+fpga_bridge_register(struct device *parent, const char *name,
+		     const struct fpga_bridge_ops *br_ops, void *priv)
+{
+	return __fpga_bridge_register(parent, name, br_ops, priv,
+				      parent->driver->owner);
+}
+EXPORT_SYMBOL_GPL(fpga_bridge_register);
+
 /**
  * fpga_bridge_unregister - unregister an FPGA bridge
  *
--- a/drivers/fpga/fpga-mgr.c
+++ b/drivers/fpga/fpga-mgr.c
@@ -681,6 +681,15 @@ error_kfree:
 }
 EXPORT_SYMBOL_GPL(__fpga_mgr_register_full);
 
+/* FIXME: provided only for kABI compatibility */
+#undef fpga_mgr_register_full
+struct fpga_manager *
+fpga_mgr_register_full(struct device *parent, const struct fpga_manager_info *info)
+{
+	return __fpga_mgr_register_full(parent, info, parent->driver->owner);
+}
+EXPORT_SYMBOL_GPL(fpga_mgr_register_full);
+
 /**
  * __fpga_mgr_register - create and register an FPGA Manager device
  * @parent:	fpga manager device from pdev
@@ -711,6 +720,17 @@ __fpga_mgr_register(struct device *paren
 }
 EXPORT_SYMBOL_GPL(__fpga_mgr_register);
 
+/* FIXME: provided only for kABI compatibility */
+#undef fpga_mgr_register
+struct fpga_manager *
+fpga_mgr_register(struct device *parent, const char *name,
+		  const struct fpga_manager_ops *mops, void *priv)
+{
+	return __fpga_mgr_register(parent, name, mops, priv,
+				   parent->driver->owner);
+}
+EXPORT_SYMBOL_GPL(fpga_mgr_register);
+
 /**
  * fpga_mgr_unregister - unregister an FPGA manager
  * @mgr: fpga manager struct
@@ -773,6 +793,15 @@ __devm_fpga_mgr_register_full(struct dev
 }
 EXPORT_SYMBOL_GPL(__devm_fpga_mgr_register_full);
 
+/* FIXME: provided only for kABI compatibility */
+#undef devm_fpga_mgr_register_full
+struct fpga_manager *
+devm_fpga_mgr_register_full(struct device *parent, const struct fpga_manager_info *info)
+{
+	return __devm_fpga_mgr_register_full(parent, info, parent->driver->owner);
+}
+EXPORT_SYMBOL_GPL(devm_fpga_mgr_register_full);
+
 /**
  * __devm_fpga_mgr_register - resource managed variant of fpga_mgr_register()
  * @parent:	fpga manager device from pdev
@@ -802,6 +831,17 @@ __devm_fpga_mgr_register(struct device *
 }
 EXPORT_SYMBOL_GPL(__devm_fpga_mgr_register);
 
+/* FIXME: provided only for kABI compatibility */
+#undef devm_fpga_mgr_register
+struct fpga_manager *
+devm_fpga_mgr_register(struct device *parent, const char *name,
+		       const struct fpga_manager_ops *mops, void *priv)
+{
+	return __devm_fpga_mgr_register(parent, name, mops, priv,
+					parent->driver->owner);
+}
+EXPORT_SYMBOL_GPL(devm_fpga_mgr_register);
+
 static void fpga_mgr_dev_release(struct device *dev)
 {
 	struct fpga_manager *mgr = to_fpga_manager(dev);
--- a/drivers/fpga/fpga-region.c
+++ b/drivers/fpga/fpga-region.c
@@ -245,6 +245,15 @@ err_free:
 }
 EXPORT_SYMBOL_GPL(__fpga_region_register_full);
 
+/* FIXME: provided only for kABI compatibility */
+#undef fpga_region_register_full
+struct fpga_region *
+fpga_region_register_full(struct device *parent, const struct fpga_region_info *info)
+{
+	return __fpga_region_register_full(parent, info, parent->driver->owner);
+}
+EXPORT_SYMBOL_GPL(fpga_region_register_full);
+
 /**
  * __fpga_region_register - create and register an FPGA Region device
  * @parent: device parent
@@ -271,6 +280,17 @@ __fpga_region_register(struct device *pa
 }
 EXPORT_SYMBOL_GPL(__fpga_region_register);
 
+/* FIXME: provided only for kABI compatibility */
+#undef fpga_region_register
+struct fpga_region *
+fpga_region_register(struct device *parent, struct fpga_manager *mgr,
+		     int (*get_bridges)(struct fpga_region *))
+{
+	return __fpga_region_register(parent, mgr, get_bridges,
+				      parent->driver->owner);
+}
+EXPORT_SYMBOL_GPL(fpga_region_register);
+
 /**
  * fpga_region_unregister - unregister an FPGA region
  * @region: FPGA region
--- a/include/linux/fpga/fpga-bridge.h
+++ b/include/linux/fpga/fpga-bridge.h
@@ -57,12 +57,15 @@ struct fpga_bridge {
 	struct device dev;
 	struct mutex mutex; /* for exclusive reference to bridge */
 	const struct fpga_bridge_ops *br_ops;
-	struct module *br_ops_owner;
 	struct fpga_image_info *info;
 	struct list_head node;
 	void *priv;
 
+#ifdef __GENKSYMS__
 	void *suse_kabi_padding;
+#else
+	struct module *br_ops_owner;
+#endif
 };
 
 #define to_fpga_bridge(d) container_of(d, struct fpga_bridge, dev)
--- a/include/linux/fpga/fpga-mgr.h
+++ b/include/linux/fpga/fpga-mgr.h
@@ -195,10 +195,13 @@ struct fpga_manager {
 	enum fpga_mgr_states state;
 	struct fpga_compat_id *compat_id;
 	const struct fpga_manager_ops *mops;
-	struct module *mops_owner;
 	void *priv;
 
+#ifdef __GENKSYMS__
 	void *suse_kabi_padding;
+#else
+	struct module *mops_owner;
+#endif
 };
 
 #define to_fpga_manager(d) container_of(d, struct fpga_manager, dev)
--- a/include/linux/fpga/fpga-region.h
+++ b/include/linux/fpga/fpga-region.h
@@ -47,11 +47,14 @@ struct fpga_region {
 	struct fpga_manager *mgr;
 	struct fpga_image_info *info;
 	struct fpga_compat_id *compat_id;
-	struct module *ops_owner;
 	void *priv;
 	int (*get_bridges)(struct fpga_region *region);
 
+#ifdef __GENKSYMS__
 	void *suse_kabi_padding;
+#else
+	struct module *ops_owner;
+#endif
 };
 
 #define to_fpga_region(d) container_of(d, struct fpga_region, dev)
