From: NeilBrown <neilb@suse.com>
Subject: KABI FIX FOR: SUNRPC allow for unspecified transport time in rpc_clnt_add_xprt
Patch-mainline: Never, kabi
References: git-fixes

We cannot introduce a new interface, but with a bit of work we can make the
old interface work ffor us.

Signed-off-by: NeilBrown <neilb@suse.com>

---
 include/linux/sunrpc/svc_rdma.h          |    2 +-
 include/linux/sunrpc/svc_xprt.h          |    2 +-
 net/sunrpc/svc_xprt.c                    |   12 ++++++++++--
 net/sunrpc/svcsock.c                     |   24 +++++++++++-------------
 net/sunrpc/xprtrdma/svc_rdma_recvfrom.c  |   10 +++++-----
 net/sunrpc/xprtrdma/svc_rdma_transport.c |    2 +-
 6 files changed, 29 insertions(+), 23 deletions(-)

--- a/include/linux/sunrpc/svc_rdma.h
+++ b/include/linux/sunrpc/svc_rdma.h
@@ -176,7 +176,7 @@ extern struct svc_rdma_recv_ctxt *
 extern void svc_rdma_recv_ctxt_put(struct svcxprt_rdma *rdma,
 				   struct svc_rdma_recv_ctxt *ctxt);
 extern void svc_rdma_flush_recv_queues(struct svcxprt_rdma *rdma);
-extern void svc_rdma_release_ctxt(struct svc_xprt *xprt, void *ctxt);
+extern void svc_rdma_release_rqst(struct svc_rqst *rqstp);
 extern int svc_rdma_recvfrom(struct svc_rqst *);
 
 /* svc_rdma_rw.c */
--- a/include/linux/sunrpc/svc_xprt.h
+++ b/include/linux/sunrpc/svc_xprt.h
@@ -23,7 +23,7 @@ struct svc_xprt_ops {
 	int		(*xpo_sendto)(struct svc_rqst *);
 	int		(*xpo_result_payload)(struct svc_rqst *, unsigned int,
 					      unsigned int);
-	void		(*xpo_release_ctxt)(struct svc_xprt *xprt, void *ctxt);
+	void		(*xpo_release_rqst)(struct svc_rqst *);
 	void		(*xpo_detach)(struct svc_xprt *);
 	void		(*xpo_free)(struct svc_xprt *);
 	void		(*xpo_secure_port)(struct svc_rqst *rqstp);
--- a/net/sunrpc/svc_xprt.c
+++ b/net/sunrpc/svc_xprt.c
@@ -532,10 +532,18 @@ EXPORT_SYMBOL_GPL(svc_reserve);
 
 static void free_deferred(struct svc_xprt *xprt, struct svc_deferred_req *dr)
 {
+	/* Putting a whole svc_rqst on the stack is excessive,
+	 * but we only want the start, up to (but not including)
+	 * rq_deferred
+	 */
+	char rqbuf[offsetof(struct svc_rqst, rq_deferred)];
+	struct svc_rqst *rq = (void*)rqbuf;
 	if (!dr)
 		return;
 
-	xprt->xpt_ops->xpo_release_ctxt(xprt, dr->xprt_ctxt);
+	rq->rq_xprt_ctxt = dr->xprt_ctxt;
+	rq->rq_xprt = xprt;
+	xprt->xpt_ops->xpo_release_rqst(rq);
 	kfree(dr);
 }
 
@@ -543,7 +551,7 @@ static void svc_xprt_release(struct svc_
 {
 	struct svc_xprt	*xprt = rqstp->rq_xprt;
 
-	xprt->xpt_ops->xpo_release_ctxt(xprt, rqstp->rq_xprt_ctxt);
+	xprt->xpt_ops->xpo_release_rqst(rqstp);
 	rqstp->rq_xprt_ctxt = NULL;
 
 	free_deferred(xprt, rqstp->rq_deferred);
--- a/net/sunrpc/svcsock.c
+++ b/net/sunrpc/svcsock.c
@@ -111,24 +111,22 @@ static void svc_reclassify_socket(struct
 #endif
 
 /**
- * svc_tcp_release_ctxt - Release transport-related resources
- * @xprt: the transport which owned the context
- * @ctxt: the context from rqstp->rq_xprt_ctxt or dr->xprt_ctxt
+ * svc_tcp_release_rqst - Release transport-related resources
+ * @rqstp: request structure with resources to be released
  *
  */
-static void svc_tcp_release_ctxt(struct svc_xprt *xprt, void *ctxt)
+static void svc_tcp_release_rqst(struct svc_rqst *rqstp)
 {
 }
 
 /**
- * svc_udp_release_ctxt - Release transport-related resources
- * @xprt: the transport which owned the context
- * @ctxt: the context from rqstp->rq_xprt_ctxt or dr->xprt_ctxt
+ * svc_udp_release_rqst - Release transport-related resources
+ * @rqstp: request structure with resources to be released
  *
  */
-static void svc_udp_release_ctxt(struct svc_xprt *xprt, void *ctxt)
+static void svc_udp_release_rqst(struct svc_rqst *rqstp)
 {
-	struct sk_buff *skb = ctxt;
+	struct sk_buff *skb = rqstp->rq_xprt_ctxt;
 
 	if (skb)
 		consume_skb(skb);
@@ -561,7 +559,7 @@ static int svc_udp_sendto(struct svc_rqs
 	unsigned int sent;
 	int err;
 
-	svc_udp_release_ctxt(xprt, rqstp->rq_xprt_ctxt);
+	svc_udp_release_rqst(rqstp);
 	rqstp->rq_xprt_ctxt = NULL;
 
 	svc_set_cmsg_data(rqstp, cmh);
@@ -631,7 +629,7 @@ static const struct svc_xprt_ops svc_udp
 	.xpo_recvfrom = svc_udp_recvfrom,
 	.xpo_sendto = svc_udp_sendto,
 	.xpo_result_payload = svc_sock_result_payload,
-	.xpo_release_ctxt = svc_udp_release_ctxt,
+	.xpo_release_rqst = svc_udp_release_rqst,
 	.xpo_detach = svc_sock_detach,
 	.xpo_free = svc_sock_free,
 	.xpo_has_wspace = svc_udp_has_wspace,
@@ -1159,7 +1157,7 @@ static int svc_tcp_sendto(struct svc_rqs
 	unsigned int sent;
 	int err;
 
-	svc_tcp_release_ctxt(xprt, rqstp->rq_xprt_ctxt);
+	svc_tcp_release_rqst(rqstp);
 	rqstp->rq_xprt_ctxt = NULL;
 
 	atomic_inc(&svsk->sk_sendqlen);
@@ -1205,7 +1203,7 @@ static const struct svc_xprt_ops svc_tcp
 	.xpo_recvfrom = svc_tcp_recvfrom,
 	.xpo_sendto = svc_tcp_sendto,
 	.xpo_result_payload = svc_sock_result_payload,
-	.xpo_release_ctxt = svc_tcp_release_ctxt,
+	.xpo_release_rqst = svc_tcp_release_rqst,
 	.xpo_detach = svc_tcp_sock_detach,
 	.xpo_free = svc_sock_free,
 	.xpo_has_wspace = svc_tcp_has_wspace,
--- a/net/sunrpc/xprtrdma/svc_rdma_recvfrom.c
+++ b/net/sunrpc/xprtrdma/svc_rdma_recvfrom.c
@@ -239,17 +239,17 @@ void svc_rdma_recv_ctxt_put(struct svcxp
 }
 
 /**
- * svc_rdma_release_ctxt - Release transport-specific per-rqst resources
- * @xprt: the transport which owned the context
- * @vctxt: the context from rqstp->rq_xprt_ctxt or dr->xprt_ctxt
+ * svc_rdma_release_rqst - Release transport-specific per-rqst resources
+ * @rqstp: svc_rqst being released
  *
  * Ensure that the recv_ctxt is released whether or not a Reply
  * was sent. For example, the client could close the connection,
  * or svc_process could drop an RPC, before the Reply is sent.
  */
-void svc_rdma_release_ctxt(struct svc_xprt *xprt, void *vctxt)
+void svc_rdma_release_rqst(struct svc_rqst *rqstp)
 {
-	struct svc_rdma_recv_ctxt *ctxt = vctxt;
+	struct svc_rdma_recv_ctxt *ctxt = rqstp->rq_xprt_ctxt;
+	struct svc_xprt *xprt = rqstp->rq_xprt;
 	struct svcxprt_rdma *rdma =
 		container_of(xprt, struct svcxprt_rdma, sc_xprt);
 
--- a/net/sunrpc/xprtrdma/svc_rdma_transport.c
+++ b/net/sunrpc/xprtrdma/svc_rdma_transport.c
@@ -81,7 +81,7 @@ static const struct svc_xprt_ops svc_rdm
 	.xpo_recvfrom = svc_rdma_recvfrom,
 	.xpo_sendto = svc_rdma_sendto,
 	.xpo_result_payload = svc_rdma_result_payload,
-	.xpo_release_ctxt = svc_rdma_release_ctxt,
+	.xpo_release_rqst = svc_rdma_release_rqst,
 	.xpo_detach = svc_rdma_detach,
 	.xpo_free = svc_rdma_free,
 	.xpo_has_wspace = svc_rdma_has_wspace,
