From: Hannes Reinecke <hare@suse.de>
Subject: kABI: Revert cper_print_aer() renaming
References: jsc#PED-10836
Patch-Mainline: never, kabi fixup

Upstream commit 6777877eb7a3290cf0a8a6b621e46f72f9d94b6b renamed the
function cper_print_aer() to pci_print_aer() to better indicate its
scope, but this of course breaks our kABI.

So revert that patch as it doesn't change any functionality.

Signed-off-by: Hannes Reinecke <hare@suse.de>

---
 drivers/cxl/core/pci.c |    2 +-
 drivers/pci/pcie/aer.c |    8 ++++----
 include/linux/aer.h    |    2 +-
 3 files changed, 6 insertions(+), 6 deletions(-)

--- a/drivers/pci/pcie/aer.c
+++ b/drivers/pci/pcie/aer.c
@@ -774,8 +774,8 @@ int cper_severity_to_aer(int cper_severi
 EXPORT_SYMBOL_GPL(cper_severity_to_aer);
 #endif
 
-void pci_print_aer(struct pci_dev *dev, int aer_severity,
-		   struct aer_capability_regs *aer)
+void cper_print_aer(struct pci_dev *dev, int aer_severity,
+		    struct aer_capability_regs *aer)
 {
 	int layer, agent, tlp_header_valid = 0;
 	u32 status, mask;
@@ -814,7 +814,7 @@ void pci_print_aer(struct pci_dev *dev,
 	trace_aer_event(dev_name(&dev->dev), (status & ~mask),
 			aer_severity, tlp_header_valid, &aer->header_log);
 }
-EXPORT_SYMBOL_NS_GPL(pci_print_aer, CXL);
+EXPORT_SYMBOL_NS_GPL(cper_print_aer, CXL);
 
 /**
  * add_error_device - list device to be handled
@@ -1016,7 +1016,7 @@ static void aer_recover_work_func(struct
 			       PCI_SLOT(entry.devfn), PCI_FUNC(entry.devfn));
 			continue;
 		}
-		pci_print_aer(pdev, entry.severity, entry.regs);
+		cper_print_aer(pdev, entry.severity, entry.regs);
 		/*
 		 * Memory for aer_capability_regs(entry.regs) is being allocated from the
 		 * ghes_estatus_pool to protect it from overwriting when multiple sections
--- a/include/linux/aer.h
+++ b/include/linux/aer.h
@@ -65,7 +65,7 @@ static inline void pci_restore_aer_state
 static inline int pcie_aer_is_native(struct pci_dev *dev) { return 0; }
 #endif
 
-void pci_print_aer(struct pci_dev *dev, int aer_severity,
+void cper_print_aer(struct pci_dev *dev, int aer_severity,
 		    struct aer_capability_regs *aer);
 int cper_severity_to_aer(int cper_severity);
 void aer_recover_queue(int domain, unsigned int bus, unsigned int devfn,
--- a/drivers/cxl/core/pci.c
+++ b/drivers/cxl/core/pci.c
@@ -851,7 +851,7 @@ static void cxl_handle_rdport_errors(str
 	if (!cxl_rch_get_aer_severity(&aer_regs, &severity))
 		return;
 
-	pci_print_aer(pdev, severity, &aer_regs);
+	cper_print_aer(pdev, severity, &aer_regs);
 
 	if (severity == AER_CORRECTABLE)
 		cxl_handle_rdport_cor_ras(cxlds, dport);
