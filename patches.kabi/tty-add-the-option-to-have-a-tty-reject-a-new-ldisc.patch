From: Jiri Slaby <jslaby@suse.cz>
Subject: kABI: tty: add the option to have a tty reject a new ldisc
Patch-mainline: never, kabi
References: kabi CVE-2024-40966 bsc#1227886

Commit 6bd23e0c2bb6 (tty: add the option to have a tty reject a new
ldisc) added an ldisc_ok() hook to struct tty_operations. This broke
kabi for already built modules.

So revert the patch completely and test for &con_ops + N_TTY directly in
tty_set_ldisc() -- it's the only implementor of the new hook.

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 drivers/tty/tty_ldisc.c    |    8 ++++----
 drivers/tty/vt/vt.c        |   12 +-----------
 include/linux/tty_driver.h |    8 --------
 3 files changed, 5 insertions(+), 23 deletions(-)

--- a/drivers/tty/tty_ldisc.c
+++ b/drivers/tty/tty_ldisc.c
@@ -540,6 +540,7 @@ static void tty_ldisc_restore(struct tty
 
 int tty_set_ldisc(struct tty_struct *tty, int disc)
 {
+	extern const struct tty_operations con_ops;
 	int retval;
 	struct tty_ldisc *old_ldisc, *new_ldisc;
 
@@ -567,10 +568,9 @@ int tty_set_ldisc(struct tty_struct *tty
 		goto out;
 	}
 
-	if (tty->ops->ldisc_ok) {
-		retval = tty->ops->ldisc_ok(tty, disc);
-		if (retval)
-			goto out;
+	if (tty->ops == &con_ops && disc != N_TTY) {
+		retval = -EINVAL;
+		goto out;
 	}
 
 	old_ldisc = tty->ldisc;
--- a/drivers/tty/vt/vt.c
+++ b/drivers/tty/vt/vt.c
@@ -3440,15 +3440,6 @@ static void con_cleanup(struct tty_struc
 	tty_port_put(&vc->port);
 }
 
-/*
- * We can't deal with anything but the N_TTY ldisc,
- * because we can sleep in our write() routine.
- */
-static int con_ldisc_ok(struct tty_struct *tty, int ldisc)
-{
-	return ldisc == N_TTY ? 0 : -EINVAL;
-}
-
 static int default_color           = 7; /* white */
 static int default_italic_color    = 2; // green (ASCII)
 static int default_underline_color = 3; // cyan (ASCII)
@@ -3557,7 +3548,7 @@ static int __init con_init(void)
 }
 console_initcall(con_init);
 
-static const struct tty_operations con_ops = {
+const struct tty_operations con_ops = {
 	.install = con_install,
 	.open = con_open,
 	.close = con_close,
@@ -3576,7 +3567,6 @@ static const struct tty_operations con_o
 	.resize = vt_resize,
 	.shutdown = con_shutdown,
 	.cleanup = con_cleanup,
-	.ldisc_ok = con_ldisc_ok,
 };
 
 static struct cdev vc0_cdev;
--- a/include/linux/tty_driver.h
+++ b/include/linux/tty_driver.h
@@ -123,13 +123,6 @@
  *	Optional: Called under the termios lock
  *
  *
- * @ldisc_ok: ``int ()(struct tty_struct *tty, int ldisc)``
- *
- *	This routine allows the @tty driver to decide if it can deal
- *	with a particular @ldisc.
- *
- *	Optional. Called under the @tty->ldisc_sem and @tty->termios_rwsem.
- *
  * void (*set_ldisc)(struct tty_struct *tty);
  *
  * 	This routine allows the tty driver to be notified when the
@@ -277,7 +270,6 @@ struct tty_operations {
 	void (*hangup)(struct tty_struct *tty);
 	int (*break_ctl)(struct tty_struct *tty, int state);
 	void (*flush_buffer)(struct tty_struct *tty);
-	int (*ldisc_ok)(struct tty_struct *tty, int ldisc);
 	void (*set_ldisc)(struct tty_struct *tty);
 	void (*wait_until_sent)(struct tty_struct *tty, int timeout);
 	void (*send_xchar)(struct tty_struct *tty, char ch);
