From: NeilBrown <neilb@suse.com>
Subject: kabi fix for: nfsd: fix double fget() bug in __write_ports_addfd()
Patch-mainline: never, kabi
References: git-fixes

Instead of changing the exported function, create a new function
with the required functionality.

Signed-off-by: NeilBrown <neilb@suse.com>
---
 fs/nfsd/nfsctl.c               |    2 +-
 include/linux/sunrpc/svcsock.h |    6 +++++-
 net/sunrpc/svcsock.c           |   35 +++++++++++++++++++++++++++++------
 3 files changed, 35 insertions(+), 8 deletions(-)

--- a/fs/nfsd/nfsctl.c
+++ b/fs/nfsd/nfsctl.c
@@ -737,7 +737,7 @@ static ssize_t __write_ports_addfd(char
 	if (err != 0)
 		return err;
 
-	err = svc_addsock(nn->nfsd_serv, net, fd, buf, SIMPLE_TRANSACTION_LIMIT, cred);
+	err = svc_addsock5(nn->nfsd_serv, net, fd, buf, SIMPLE_TRANSACTION_LIMIT, cred);
 	if (err < 0) {
 		nfsd_destroy(net);
 		return err;
--- a/include/linux/sunrpc/svcsock.h
+++ b/include/linux/sunrpc/svcsock.h
@@ -59,7 +59,11 @@ int		svc_recv(struct svc_rqst *, long);
 int		svc_send(struct svc_rqst *);
 void		svc_drop(struct svc_rqst *);
 void		svc_sock_update_bufs(struct svc_serv *serv);
-int		svc_addsock(struct svc_serv *serv, struct net *net,
+bool		svc_alien_sock(struct net *net, int fd);
+int		svc_addsock(struct svc_serv *serv, const int fd,
+			    char *name_return, const size_t len,
+			    const struct cred *cred);
+int		svc_addsock5(struct svc_serv *serv, struct net *net,
 			    const int fd, char *name_return, const size_t len,
 			    const struct cred *cred);
 void		svc_init_xprt_sock(void);
--- a/net/sunrpc/svcsock.c
+++ b/net/sunrpc/svcsock.c
@@ -1335,8 +1335,24 @@ static struct svc_sock *svc_setup_socket
 	return svsk;
 }
 
+bool svc_alien_sock(struct net *net, int fd)
+{
+	int err;
+	struct socket *sock = sockfd_lookup(fd, &err);
+	bool ret = false;
+
+	if (!sock)
+		goto out;
+	if (sock_net(sock->sk) != net)
+		ret = true;
+	sockfd_put(sock);
+out:
+	return ret;
+}
+EXPORT_SYMBOL_GPL(svc_alien_sock);
+
 /**
- * svc_addsock - add a listener socket to an RPC service
+ * svc_addsock5 - add a listener socket to an RPC service
  * @serv: pointer to RPC service to which to add a new listener
  * @net: caller's network namespace
  * @fd: file descriptor of the new listener
@@ -1348,7 +1364,7 @@ static struct svc_sock *svc_setup_socket
  * Name is terminated with '\n'.  On error, returns a negative errno
  * value.
  */
-int svc_addsock(struct svc_serv *serv, struct net *net, const int fd,
+int svc_addsock5(struct svc_serv *serv, struct net *net, const int fd,
 		char *name_return, const size_t len, const struct cred *cred)
 {
 	int err = 0;
@@ -1360,9 +1376,11 @@ int svc_addsock(struct svc_serv *serv, s
 
 	if (!so)
 		return err;
-	err = -EINVAL;
-	if (sock_net(so->sk) != net)
-		goto out;
+	if (net) {
+		err = -EINVAL;
+		if (sock_net(so->sk) != net)
+			goto out;
+	}
 	err = -EAFNOSUPPORT;
 	if ((so->sk->sk_family != PF_INET) && (so->sk->sk_family != PF_INET6))
 		goto out;
@@ -1392,8 +1410,13 @@ out:
 	sockfd_put(so);
 	return err;
 }
+EXPORT_SYMBOL_GPL(svc_addsock5);
+int svc_addsock(struct svc_serv *serv, const int fd,
+		char *name_return, const size_t len, const struct cred *cred)
+{
+	return svc_addsock5(serv, NULL, fd, name_return, len, cred);
+}
 EXPORT_SYMBOL_GPL(svc_addsock);
-
 /*
  * Create socket for RPC service.
  */
