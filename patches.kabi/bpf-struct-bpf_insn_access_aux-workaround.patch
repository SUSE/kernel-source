From: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Subject: kABI: bpf: struct bpf_insn_acces_aux kABI workaround
Patch-mainline: never, kabi
References: CVE-2024-47703 bsc#1231946

- Upstream commit 92de36080c93 "bpf: Fail verification for sign-extension of
  packet data/data_end/data_meta" changed "struct bpf_insn_access_aux" to have
  a new field, "bool is_ldsx", and thus break kABI.

- Upstream commit 5d99e198be27 "bpf, lsm: Add check for BPF LSM return value" a
  new field, "bool is_retval", and thus break kABI.

Luckily "struct bpf_insn_access_aux" is always being accessed through pointers,
and was not embedded in other structures. So simply move "bool is_ldsx" to the
end of the structure and wrap both new fields with __GENKSYMS__ macro is enough
to restore the kABI.

Signed-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
---
 include/linux/bpf.h |    4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@ -904,7 +904,6 @@ static_assert(__BPF_REG_TYPE_MAX <= BPF_
  */
 struct bpf_insn_access_aux {
 	enum bpf_reg_type reg_type;
-	bool is_ldsx;
 	union {
 		int ctx_field_size;
 		struct {
@@ -913,7 +912,10 @@ struct bpf_insn_access_aux {
 		};
 	};
 	struct bpf_verifier_log *log; /* for verbose logs */
+#ifndef __GENKSYMS__
+	bool is_ldsx;
 	bool is_retval; /* is accessing function return value ? */
+#endif
 };
 
 static inline void
