From: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Subject: kABI: bpf: struct bpf_map kABI workaround
Patch-mainline: never, kabi
References: bsc#1220251 CVE-2023-52447

Commit 876673364161 ("bpf: Defer the free of inner map when necessary") adds a
new field into struct bpf_map. Luckily it falls within the padding, so nothing
else is needed other than hiding it from __GENKSYMS__.

Signed-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
---
 include/linux/bpf.h |    9 +++++++++
 1 file changed, 9 insertions(+)

--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@ -185,7 +185,9 @@ struct bpf_map {
 	u32 btf_vmlinux_value_type_id;
 	bool bypass_spec_v1;
 	bool frozen; /* write-once; write-protected by freeze_mutex */
+#ifndef __GENKSYMS__
 	bool free_after_mult_rcu_gp;
+#endif
 	void *suse_kabi_padding;
 	/* 21-sizeof(void*) bytes hole */
 
@@ -194,11 +196,18 @@ struct bpf_map {
 	 */
 	atomic64_t refcnt ____cacheline_aligned;
 	atomic64_t usercnt;
+#ifndef __GENKSYMS__
 	/* rcu is used before freeing and work is only used during freeing */
 	union {
+#endif
 		struct work_struct work;
+#ifndef __GENKSYMS__
 		struct rcu_head rcu;
 	};
+	/* Assert union of rcu_head and work_struct won't be larger than size
+	 * of the original work_struct, thus breaking kABI */
+	static_assert(sizeof(struct work_struct) >= sizeof(struct rcu_head));
+#endif
 	struct mutex freeze_mutex;
 	atomic64_t writecnt;
 };
