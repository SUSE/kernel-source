From: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Subject: kABI: bpf: struct bpf_insn_aux_data kABI workaround
Patch-mainline: never, kabi
References: bsc#1225756

Upstream commit bffdeaa8a5af ("bpf: decouple prune and jump points") that was
backoprted as context of 3feb263bb516 ("bpf: handle ldimm64 properly in
check_cfg()") breaks kABI by adding a "bool jmp_point" field in "struct
bpf_insn_aux_data".

Luckily bpf_insn_aux_data are accessed through pointers, and jmp_point is
already the last field, so simply hiding it from genksyms is enough.

Signed-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
---
 include/linux/bpf_verifier.h |    2 ++
 1 file changed, 2 insertions(+)

--- a/include/linux/bpf_verifier.h
+++ b/include/linux/bpf_verifier.h
@@ -422,7 +422,9 @@ struct bpf_insn_aux_data {
 	/* below fields are initialized once */
 	unsigned int orig_idx; /* original instruction index */
 	bool prune_point;
+#ifndef __GENKSYMS__
 	bool jmp_point;
+#endif
 };
 
 #define MAX_USED_MAPS 64 /* max number of maps accessed by one eBPF program */
