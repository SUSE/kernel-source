From: Takashi Iwai <tiwai@suse.de>
Subject: mhi_power_down() kABI workaround
Patch-mainline: Never, kABI workaround
References: bsc#1207948

A workaround patch for kABI breakage of mhi_power_down() function
that was converted to inline.  Uninline and export it again.

Signed-off-by: Takashi Iwai <tiwai@suse.de>

---
 drivers/bus/mhi/host/pm.c |    7 +++++++
 include/linux/mhi.h       |    5 +++++
 2 files changed, 12 insertions(+)

--- a/drivers/bus/mhi/host/pm.c
+++ b/drivers/bus/mhi/host/pm.c
@@ -1183,6 +1183,13 @@ void __mhi_power_down(struct mhi_control
 }
 EXPORT_SYMBOL_GPL(__mhi_power_down);
 
+/* FIXME: exported for SLE15-SP5 kABI compatibility */
+void mhi_power_down(struct mhi_controller *mhi_cntrl, bool graceful)
+{
+	__mhi_power_down(mhi_cntrl, graceful, true);
+}
+EXPORT_SYMBOL_GPL(mhi_power_down);
+
 int mhi_sync_power_up(struct mhi_controller *mhi_cntrl)
 {
 	int ret = mhi_async_power_up(mhi_cntrl);
--- a/include/linux/mhi.h
+++ b/include/linux/mhi.h
@@ -641,6 +641,7 @@ int mhi_sync_power_up(struct mhi_control
 void __mhi_power_down(struct mhi_controller *mhi_cntrl, bool graceful,
 		    bool destroy_device);
 
+#if 0
 /**
  * mhi_power_down - Start MHI power down sequence
  * @mhi_cntrl: MHI controller
@@ -651,6 +652,10 @@ static inline void mhi_power_down(struct
 {
 	__mhi_power_down(mhi_cntrl, graceful, true);
 }
+#else
+/* FIXME: exported for SLE15-SP5 kABI compatibility */
+void mhi_power_down(struct mhi_controller *mhi_cntrl, bool graceful);
+#endif
 
 static inline void mhi_power_down_no_destroy(struct mhi_controller *mhi_cntrl,
 					     bool graceful)
