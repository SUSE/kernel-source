From eb16d5255165632e7fd5c8ad2cd1366fec67116c Mon Sep 17 00:00:00 2001
From: Denis Kirjanov <denis.kirjanov@suse.com>
Date: Tue, 18 Jun 2024 14:05:46 +0300
Subject: [PATCH] net: preserve kabi for struct dst_ops
Patch-mainline: Never, kabi
References: CVE-2024-36971 bsc#1226145

Signed-off-by: Denis Kirjanov <denis.kirjanov@suse.com>
---
 include/net/dst_ops.h  | 5 ++++-
 include/net/sock.h     | 4 ++--
 net/ipv4/route.c       | 2 +-
 net/ipv6/route.c       | 2 +-
 net/xfrm/xfrm_policy.c | 5 +++--
 5 files changed, 11 insertions(+), 7 deletions(-)

diff --git a/include/net/dst_ops.h b/include/net/dst_ops.h
index 928e256079e6..48303b2690c0 100644
--- a/include/net/dst_ops.h
+++ b/include/net/dst_ops.h
@@ -24,7 +24,7 @@ struct dst_ops {
 	void			(*destroy)(struct dst_entry *);
 	void			(*ifdown)(struct dst_entry *,
 					  struct net_device *dev, int how);
-	void                    (*negative_advice)(struct sock *sk, struct dst_entry *);
+	struct dst_entry *      (*negative_advice)(struct dst_entry *);
 	void			(*link_failure)(struct sk_buff *);
 	void			(*update_pmtu)(struct dst_entry *dst, struct sock *sk,
 					       struct sk_buff *skb, u32 mtu,
@@ -41,6 +41,9 @@ struct dst_ops {
 	struct kmem_cache	*kmem_cachep;
 
 	struct percpu_counter	pcpuc_entries ____cacheline_aligned_in_smp;
+#ifndef __GENKSYMS__
+	void                    (*__negative_advice)(struct sock *sk, struct dst_entry *);
+#endif
 };
 
 static inline int dst_entries_get_fast(struct dst_ops *dst)
diff --git a/include/net/sock.h b/include/net/sock.h
index ab5054069324..b89a8d74dba9 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -2162,8 +2162,8 @@ static inline void __dst_negative_advice(struct sock *sk)
 {
 	struct dst_entry *dst = __sk_dst_get(sk);
 
-	if (dst && dst->ops->negative_advice)
-		dst->ops->negative_advice(sk, dst);
+	if (dst && dst->ops->__negative_advice)
+		dst->ops->__negative_advice(sk, dst);
 }
 
 static inline void dst_negative_advice(struct sock *sk)
diff --git a/net/ipv4/route.c b/net/ipv4/route.c
index 00073105de17..5e6f55027afb 100644
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@ -160,7 +160,7 @@ static struct dst_ops ipv4_dst_ops = {
 	.mtu =			ipv4_mtu,
 	.cow_metrics =		ipv4_cow_metrics,
 	.destroy =		ipv4_dst_destroy,
-	.negative_advice =	ipv4_negative_advice,
+	.__negative_advice =	ipv4_negative_advice,
 	.link_failure =		ipv4_link_failure,
 	.update_pmtu =		ip_rt_update_pmtu,
 	.redirect =		ip_do_redirect,
diff --git a/net/ipv6/route.c b/net/ipv6/route.c
index 087eeb9da69c..55c1c7363e64 100644
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@ -258,7 +258,7 @@ static struct dst_ops ip6_dst_ops_template = {
 	.cow_metrics		=	dst_cow_metrics_generic,
 	.destroy		=	ip6_dst_destroy,
 	.ifdown			=	ip6_dst_ifdown,
-	.negative_advice	=	ip6_negative_advice,
+	.__negative_advice	=	ip6_negative_advice,
 	.link_failure		=	ip6_link_failure,
 	.update_pmtu		=	ip6_rt_update_pmtu,
 	.redirect		=	rt6_do_redirect,
diff --git a/net/xfrm/xfrm_policy.c b/net/xfrm/xfrm_policy.c
index 3339cc6d846d..5b6c3f9749bc 100644
--- a/net/xfrm/xfrm_policy.c
+++ b/net/xfrm/xfrm_policy.c
@@ -4021,8 +4021,8 @@ int xfrm_policy_register_afinfo(const struct xfrm_policy_afinfo *afinfo, int fam
 			dst_ops->default_advmss = xfrm_default_advmss;
 		if (likely(dst_ops->mtu == NULL))
 			dst_ops->mtu = xfrm_mtu;
-		if (likely(dst_ops->negative_advice == NULL))
-			dst_ops->negative_advice = xfrm_negative_advice;
+		if (likely(dst_ops->__negative_advice == NULL))
+			dst_ops->__negative_advice = xfrm_negative_advice;
 		if (likely(dst_ops->link_failure == NULL))
 			dst_ops->link_failure = xfrm_link_failure;
 		if (likely(dst_ops->neigh_lookup == NULL))
@@ -4054,6 +4054,7 @@ void xfrm_policy_unregister_afinfo(const struct xfrm_policy_afinfo *afinfo)
 	dst_ops->kmem_cachep = NULL;
 	dst_ops->check = NULL;
 	dst_ops->negative_advice = NULL;
+	dst_ops->__negative_advice = NULL;
 	dst_ops->link_failure = NULL;
 }
 EXPORT_SYMBOL(xfrm_policy_unregister_afinfo);
-- 
2.16.4

