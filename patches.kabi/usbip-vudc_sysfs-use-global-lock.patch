From 95ec3ae0ecca013b3d05367b20b24c83b40c77ea Mon Sep 17 00:00:00 2001
From: Oliver Neukum <oneukum@suse.com>
Date: Thu, 17 Nov 2022 13:35:24 +0100
Subject: [PATCH] usbip: vudc_sysfs: use global lock
Patch-mainline: Never (kABI fixup)
References: git-fixes

make it use the global lock instead
of per device lock not introduced to preserve
kABI

Signed-off-by: Oliver Neukum <oneukum@suse.com>
---
 drivers/usb/usbip/vudc_dev.c   |    1 -
 drivers/usb/usbip/vudc_sysfs.c |    8 ++++----
 2 files changed, 4 insertions(+), 5 deletions(-)

--- a/drivers/usb/usbip/vudc_dev.c
+++ b/drivers/usb/usbip/vudc_dev.c
@@ -572,7 +572,6 @@ static int init_vudc_hw(struct vudc *udc
 	init_waitqueue_head(&udc->tx_waitq);
 
 	spin_lock_init(&ud->lock);
-	mutex_init(&ud->sysfs_lock);
 	ud->status = SDEV_ST_AVAILABLE;
 	ud->side = USBIP_VUDC;
 
--- a/drivers/usb/usbip/vudc_sysfs.c
+++ b/drivers/usb/usbip/vudc_sysfs.c
@@ -112,7 +112,7 @@ static ssize_t usbip_sockfd_store(struct
 		dev_err(dev, "no device");
 		return -ENODEV;
 	}
-	mutex_lock(&udc->ud.sysfs_lock);
+	mutex_lock(&suse_big_usbip_lock);
 	spin_lock_irqsave(&udc->lock, flags);
 	/* Don't export what we don't have */
 	if (!udc->driver || !udc->pullup) {
@@ -189,7 +189,7 @@ static ssize_t usbip_sockfd_store(struct
 		wake_up_process(udc->ud.tcp_rx);
 		wake_up_process(udc->ud.tcp_tx);
 
-		mutex_unlock(&udc->ud.sysfs_lock);
+		mutex_unlock(&suse_big_usbip_lock);
 		return count;
 
 	} else {
@@ -210,7 +210,7 @@ static ssize_t usbip_sockfd_store(struct
 	}
 
 	spin_unlock_irqrestore(&udc->lock, flags);
-	mutex_unlock(&udc->ud.sysfs_lock);
+	mutex_unlock(&suse_big_usbip_lock);
 
 	return count;
 
@@ -220,7 +220,7 @@ unlock_ud:
 	spin_unlock_irq(&udc->ud.lock);
 unlock:
 	spin_unlock_irqrestore(&udc->lock, flags);
-	mutex_unlock(&udc->ud.sysfs_lock);
+	mutex_unlock(&suse_big_usbip_lock);
 
 	return ret;
 }
