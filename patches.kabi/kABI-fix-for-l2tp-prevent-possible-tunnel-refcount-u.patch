From: Steffen Jaeckel <sjaeckel@suse.de>
Subject: kABI fix for l2tp: prevent possible tunnel refcount underflow
Patch-mainline: Never, kABI workaround
References: CVE-2024-49940 bsc#1232812

Upstream commit 24256415d186 ("l2tp: prevent possible tunnel
refcount underflow") changed the API of `l2tp_session_set_header_len()`
and this patch re-introduces the API in that version.

Signed-off-by: Steffen Jaeckel <sjaeckel@suse.de>

---
 net/l2tp/l2tp_core.c    | 23 +++++++++++++++++------
 net/l2tp/l2tp_core.h    |  4 +++-
 net/l2tp/l2tp_netlink.c |  2 +-
 net/l2tp/l2tp_ppp.c     |  2 +-
 4 files changed, 22 insertions(+), 9 deletions(-)

diff --git a/net/l2tp/l2tp_core.c b/net/l2tp/l2tp_core.c
index 5cc7eecec0d1f..c7084e82186b5 100644
--- a/net/l2tp/l2tp_core.c
+++ b/net/l2tp/l2tp_core.c
@@ -708,7 +708,7 @@ void l2tp_recv_common(struct l2tp_session *session, struct sk_buff *skb,
 		if (!session->lns_mode && !session->send_seq) {
 			trace_session_seqnum_lns_enable(session);
 			session->send_seq = 1;
-			l2tp_session_set_header_len(session, tunnel->version,
+			__l2tp_session_set_header_len(session, tunnel->version,
 						    tunnel->encap);
 		}
 	} else {
@@ -730,7 +730,7 @@ void l2tp_recv_common(struct l2tp_session *session, struct sk_buff *skb,
 		if (!session->lns_mode && session->send_seq) {
 			trace_session_seqnum_lns_disable(session);
 			session->send_seq = 0;
-			l2tp_session_set_header_len(session, tunnel->version,
+			__l2tp_session_set_header_len(session, tunnel->version,
 						    tunnel->encap);
 		} else if (session->send_seq) {
 			pr_debug_ratelimited("%s: recv data has no seq numbers when required. Discarding.\n",
@@ -1608,8 +1608,19 @@ EXPORT_SYMBOL_GPL(l2tp_session_delete);
 /* We come here whenever a session's send_seq, cookie_len or
  * l2specific_type parameters are set.
  */
-void l2tp_session_set_header_len(struct l2tp_session *session, int version,
-				 enum l2tp_encap_type encap)
+void l2tp_session_set_header_len(struct l2tp_session *session, int version)
+{
+	struct l2tp_tunnel *tunnel = READ_ONCE(session->tunnel);
+	if (tunnel)
+		__l2tp_session_set_header_len(session, version, tunnel->encap);
+}
+EXPORT_SYMBOL_GPL(l2tp_session_set_header_len);
+
+/* We come here whenever a session's send_seq, cookie_len or
+ * l2specific_type parameters are set.
+ */
+void __l2tp_session_set_header_len(struct l2tp_session *session, int version,
+                                   enum l2tp_encap_type encap)
 {
 	if (version == L2TP_HDR_VER_2) {
 		session->hdr_len = 6;
@@ -1622,7 +1633,7 @@ void l2tp_session_set_header_len(struct l2tp_session *session, int version,
 			session->hdr_len += 4;
 	}
 }
-EXPORT_SYMBOL_GPL(l2tp_session_set_header_len);
+EXPORT_SYMBOL_GPL(__l2tp_session_set_header_len);
 
 struct l2tp_session *l2tp_session_create(int priv_size, struct l2tp_tunnel *tunnel, u32 session_id,
 					 u32 peer_session_id, struct l2tp_session_cfg *cfg)
@@ -1667,7 +1678,7 @@ struct l2tp_session *l2tp_session_create(int priv_size, struct l2tp_tunnel *tunn
 			memcpy(&session->peer_cookie[0], &cfg->peer_cookie[0], cfg->peer_cookie_len);
 		}
 
-		l2tp_session_set_header_len(session, tunnel->version, tunnel->encap);
+		__l2tp_session_set_header_len(session, tunnel->version, tunnel->encap);
 
 		refcount_set(&session->ref_count, 1);
 
diff --git a/net/l2tp/l2tp_core.h b/net/l2tp/l2tp_core.h
index 9f7143d2dd31b..c00ef3d3c9c23 100644
--- a/net/l2tp/l2tp_core.h
+++ b/net/l2tp/l2tp_core.h
@@ -261,7 +261,9 @@ void l2tp_recv_common(struct l2tp_session *session, struct sk_buff *skb,
 int l2tp_udp_encap_recv(struct sock *sk, struct sk_buff *skb);
 
 /* Transmit path helpers for sending packets over the tunnel socket. */
-void l2tp_session_set_header_len(struct l2tp_session *session, int version,
+void l2tp_session_set_header_len(struct l2tp_session *session, int version);
+/* Backported&updated version of l2tp_session_set_header_len() which should be used instead. */
+void __l2tp_session_set_header_len(struct l2tp_session *session, int version,
 				 enum l2tp_encap_type encap);
 int l2tp_xmit_skb(struct l2tp_session *session, struct sk_buff *skb);
 
diff --git a/net/l2tp/l2tp_netlink.c b/net/l2tp/l2tp_netlink.c
index 482bd836f0747..231178da1d713 100644
--- a/net/l2tp/l2tp_netlink.c
+++ b/net/l2tp/l2tp_netlink.c
@@ -693,7 +693,7 @@ static int l2tp_nl_cmd_session_modify(struct sk_buff *skb, struct genl_info *inf
 		struct l2tp_tunnel *tunnel = session->tunnel;
 
 		session->send_seq = nla_get_u8(info->attrs[L2TP_ATTR_SEND_SEQ]);
-		l2tp_session_set_header_len(session, tunnel->version, tunnel->encap);
+		__l2tp_session_set_header_len(session, tunnel->version, tunnel->encap);
 	}
 
 	if (info->attrs[L2TP_ATTR_LNS_MODE])
diff --git a/net/l2tp/l2tp_ppp.c b/net/l2tp/l2tp_ppp.c
index eebec10a156d5..12a020f241391 100644
--- a/net/l2tp/l2tp_ppp.c
+++ b/net/l2tp/l2tp_ppp.c
@@ -1203,7 +1203,7 @@ static int pppol2tp_session_setsockopt(struct sock *sk,
 			po->chan.hdrlen = val ? PPPOL2TP_L2TP_HDR_SIZE_SEQ :
 				PPPOL2TP_L2TP_HDR_SIZE_NOSEQ;
 		}
-		l2tp_session_set_header_len(session, session->tunnel->version,
+		__l2tp_session_set_header_len(session, session->tunnel->version,
 					    session->tunnel->encap);
 		break;
 
-- 
2.47.1

