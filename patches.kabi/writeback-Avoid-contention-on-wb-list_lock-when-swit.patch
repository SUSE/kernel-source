From: Jan Kara <jack@suse.cz>
Subject: writeback: Avoid contention on wb->list_lock when switching inodes (kABI fixup)
Patch-mainline: Never, kABI
References: bsc#1237776

struct bdi_writeback is generally dynamically allocated and initialized using
wb_get_create(). It is also embedded in struct bdi_writeback but that one is
also dynamically allocated using bdi_alloc(). There is one exception to this
and that is noop_backing_dev_info which is static. Generally modules could try
to statically define struct bdi_writeback but the functions to initialize this
complex structure is not exported to modules (bdi_init()) so we can be rather
certain all external modules are using the dynamic allocation. Hence we are
safe just moving new members of struct bdi_writeback to the end.

Reviewed-by: Petr Pavlu <petr.pavlu@suse.com>
Signed-off-by: Jan Kara <jack@suse.cz>
---
 include/linux/backing-dev-defs.h |   10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

--- a/include/linux/backing-dev-defs.h
+++ b/include/linux/backing-dev-defs.h
@@ -152,15 +152,17 @@ struct bdi_writeback {
 	struct list_head blkcg_node;	/* anchored at blkcg->cgwb_list */
 	struct list_head b_attached;	/* attached inodes, protected by list_lock */
 	struct list_head offline_node;	/* anchored at offline_cgwbs */
-	struct work_struct switch_work;	/* work used to perform inode switching
-					 * to this wb */
-	struct llist_head switch_wbs_ctxs;	/* queued contexts for
-						 * writeback switching */
 
 	union {
 		struct work_struct release_work;
 		struct rcu_head rcu;
 	};
+#ifndef __GENKSYMS__
+	struct work_struct switch_work;	/* work used to perform inode switching
+					 * to this wb */
+	struct llist_head switch_wbs_ctxs;	/* queued contexts for
+						 * writeback switching */
+#endif
 #endif
 };
 
