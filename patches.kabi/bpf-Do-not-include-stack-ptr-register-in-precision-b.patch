From: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Date: Thu Jul 17 11:50:57 AM CST 2025
Subject: kABI workaround for bpf: Do not include stack ptr register in precision backtracking bookkeeping
Patch-mainline: Never, kABI workaround
References: bsc#1246264 CVE-2025-38279

Commit e2d2115e56c4a02377189bfc3a9a7933552a7b0f changed the size of bitfields
in 'struct bpf_jmp_history_entry'.

That said, while bpf_jmp_history_entry is technically part of the kABI, I don't
think it was meant to be used by 3rd-party driver, that was evident by the fact
that two associated helper functions: get_jmp_hist_entry() and
push_jmp_history(), are both defined as static. Hence we simply restore the
bitfield to their original size, and intentionally leave kABI broken.

Signed-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
---
 include/linux/bpf_verifier.h |   10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

--- a/include/linux/bpf_verifier.h
+++ b/include/linux/bpf_verifier.h
@@ -349,10 +349,11 @@ enum {
 	INSN_F_SPI_SHIFT = 3, /* shifted 3 bits to the left */
 
 	INSN_F_STACK_ACCESS = BIT(9),
-
+#ifndef __GENKSYMS__
 	INSN_F_DST_REG_STACK = BIT(10), /* dst_reg is PTR_TO_STACK */
 	INSN_F_SRC_REG_STACK = BIT(11), /* src_reg is PTR_TO_STACK */
 	/* total 12 bits are used now. */
+#endif
 };
 
 static_assert(INSN_F_FRAMENO_MASK + 1 >= MAX_CALL_FRAMES);
@@ -360,10 +361,17 @@ static_assert(INSN_F_SPI_MASK + 1 >= MAX
 
 struct bpf_jmp_history_entry {
 	u32 idx;
+#ifndef __GENKSYMS__
 	/* insn idx can't be bigger than 1 million */
 	u32 prev_idx : 20;
 	/* special INSN_F_xxx flags */
 	u32 flags : 12;
+#else
+	/* insn idx can't be bigger than 1 million */
+	u32 prev_idx : 22;
+	/* special INSN_F_xxx flags */
+	u32 flags : 10;
+#endif
 	/* additional registers that need precision tracking when this
 	 * jump is backtracked, vector of six 10-bit records
 	 */
