From 126640b36d862bffe21c79936347cd5758bd7f7d Mon Sep 17 00:00:00 2001
From: Mel Gorman <mgorman@techsingularity.net>
Date: Fri, 24 Jan 2025 14:44:26 +0000
Subject: [PATCH] sched/fair: Fix value reported by hot tasks pulled in
 /proc/schedstat -kabi

References: bsc#1235865
Patch-mainline: Never, kabi

Effectively revert the patch when checking KABI. The only consequence is
that scheduler debugging stats are wrong. There is plenty of space for a
bit without breaking KABI.

Signed-off-by: Mel Gorman <mgorman@suse.de>
---
 include/linux/sched.h |  2 ++
 kernel/sched/fair.c   | 13 +++++++++++++
 2 files changed, 15 insertions(+)

diff --git a/include/linux/sched.h b/include/linux/sched.h
index 18958000b08b..94a2e6f41d22 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -885,7 +885,9 @@ struct task_struct {
 	unsigned			sched_reset_on_fork:1;
 	unsigned			sched_contributes_to_load:1;
 	unsigned			sched_migrated:1;
+#ifndef __GENKSYMS__
 	unsigned			sched_task_hot:1;
+#endif /* __GENKSYMS__ */
 
 	/* Force alignment to the next boundary: */
 	unsigned			:0;
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index dc0ee6be2ab6..091e0699eb3e 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -8957,8 +8957,10 @@ int can_migrate_task(struct task_struct *p, struct lb_env *env)
 	int tsk_cache_hot;
 
 	lockdep_assert_rq_held(env->src_rq);
+#ifndef __GENKSYMS__
 	if (p->sched_task_hot)
 		p->sched_task_hot = 0;
+#endif
 
 	/*
 	 * We do not migrate tasks that are:
@@ -9031,8 +9033,15 @@ int can_migrate_task(struct task_struct *p, struct lb_env *env)
 
 	if (tsk_cache_hot <= 0 ||
 	    env->sd->nr_balance_failed > env->sd->cache_nice_tries) {
+#ifndef __GENKSYMS__
 		if (tsk_cache_hot == 1)
 			p->sched_task_hot = 1;
+#else
+		if (tsk_cache_hot == 1) {
+			schedstat_inc(env->sd->lb_hot_gained[env->idle]);
+			schedstat_inc(p->stats.nr_forced_migrations);
+		}
+#endif /* __GENKSYMS__ */
 		return 1;
 	}
 
@@ -9047,11 +9056,13 @@ static void detach_task(struct task_struct *p, struct lb_env *env)
 {
 	lockdep_assert_rq_held(env->src_rq);
 
+#ifndef __GENKSYMS__
 	if (p->sched_task_hot) {
 		p->sched_task_hot = 0;
 		schedstat_inc(env->sd->lb_hot_gained[env->idle]);
 		schedstat_inc(p->stats.nr_forced_migrations);
 	}
+#endif /* __GENKSYMS__ */
 
 	deactivate_task(env->src_rq, p, DEQUEUE_NOCLOCK);
 	set_task_cpu(p, env->dst_cpu);
@@ -9213,8 +9224,10 @@ static int detach_tasks(struct lb_env *env)
 
 		continue;
 next:
+#ifndef __GENKSYMS__
 		if (p->sched_task_hot)
 			schedstat_inc(p->stats.nr_failed_migrations_hot);
+#endif /* __GENKSYMS__ */
 
 		list_move(&p->se.group_node, tasks);
 	}
