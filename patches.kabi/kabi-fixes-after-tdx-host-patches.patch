From: Juergen Gross <jgross@suse.com>
Date: Fri, 06 Dec 2024 13:39:15 +0200
Subject: kABI: kabi fixes after tdx host patches
Patch-mainline: Never, kABI fix
References: jsc#PED-348

Signed-off-by: Juergen Gross <jgross@suse.com>
---
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@ -1060,7 +1060,6 @@ struct kvm_vcpu_arch {
 
 	/* Protected Guests */
 	bool guest_state_protected;
-	bool guest_tsc_protected;
 
 	/*
 	 * Set when PDPTS were loaded directly by the userspace without
@@ -1068,6 +1067,10 @@ struct kvm_vcpu_arch {
 	 */
 	bool pdptrs_from_userspace;
 
+#ifndef __GENKSYMS__
+	bool guest_tsc_protected;
+#endif
+
 #if IS_ENABLED(CONFIG_HYPERV)
 	hpa_t hv_root_tdp;
 #endif
@@ -1334,6 +1337,14 @@ struct kvm_arch {
 	bool has_private_mem;
 	bool has_protected_state;
 	bool pre_fault_allowed;
+#ifndef __GENKSYMS__
+	/*
+	 * Size of the CPU's dirty log buffer, i.e. VMX's PML buffer. A Zero
+	 * value indicates CPU dirty logging is unsupported or disabled in
+	 * current VM.
+	 */
+	int cpu_dirty_log_size;
+#endif
 	struct hlist_head mmu_page_hash[KVM_NUM_MMU_PAGES];
 	struct list_head active_mmu_pages;
 	/*
@@ -1568,13 +1579,6 @@ struct kvm_arch {
 	struct kvm_mmu_memory_cache split_desc_cache;
 
 	gfn_t gfn_direct_bits;
-
-	/*
-	 * Size of the CPU's dirty log buffer, i.e. VMX's PML buffer. A Zero
-	 * value indicates CPU dirty logging is unsupported or disabled in
-	 * current VM.
-	 */
-	int cpu_dirty_log_size;
 };
 
 struct kvm_vm_stat {
@@ -1679,7 +1682,6 @@ struct kvm_x86_ops {
 	unsigned int vm_size;
 	int (*vm_init)(struct kvm *kvm);
 	void (*vm_destroy)(struct kvm *kvm);
-	void (*vm_pre_destroy)(struct kvm *kvm);
 
 	/* Create, but do not attach this VCPU */
 	int (*vcpu_precreate)(struct kvm *kvm);
@@ -1829,6 +1831,12 @@ struct kvm_x86_ops {
 			       struct x86_exception *exception);
 	void (*handle_exit_irqoff)(struct kvm_vcpu *vcpu);
 
+#ifndef __GENKSYMS__
+	int cpu_dirty_log_size_kabi;
+#else
+	int cpu_dirty_log_size;
+#endif
+
 	void (*update_cpu_dirty_logging)(struct kvm_vcpu *vcpu);
 
 	const struct kvm_x86_nested_ops *nested_ops;
@@ -1842,7 +1850,6 @@ struct kvm_x86_ops {
 	void (*apicv_pre_state_restore)(struct kvm_vcpu *vcpu);
 	void (*apicv_post_state_restore)(struct kvm_vcpu *vcpu);
 	bool (*dy_apicv_has_pending_interrupt)(struct kvm_vcpu *vcpu);
-	bool (*protected_apic_has_interrupt)(struct kvm_vcpu *vcpu);
 
 	int (*set_hv_timer)(struct kvm_vcpu *vcpu, u64 guest_deadline_tsc,
 			    bool *expired);
@@ -1859,7 +1866,6 @@ struct kvm_x86_ops {
 
 	int (*dev_get_attr)(u32 group, u64 attr, u64 *val);
 	int (*mem_enc_ioctl)(struct kvm *kvm, void __user *argp);
-	int (*vcpu_mem_enc_ioctl)(struct kvm_vcpu *vcpu, void __user *argp);
 	int (*mem_enc_register_region)(struct kvm *kvm, struct kvm_enc_region *argp);
 	int (*mem_enc_unregister_region)(struct kvm *kvm, struct kvm_enc_region *argp);
 	int (*vm_copy_enc_context_from)(struct kvm *kvm, unsigned int source_fd);
@@ -1890,6 +1896,12 @@ struct kvm_x86_ops {
 	int (*gmem_prepare)(struct kvm *kvm, kvm_pfn_t pfn, gfn_t gfn, int max_order);
 	void (*gmem_invalidate)(kvm_pfn_t start, kvm_pfn_t end);
 	int (*private_max_mapping_level)(struct kvm *kvm, kvm_pfn_t pfn);
+
+#ifndef __GENKSYMS__
+	void (*vm_pre_destroy)(struct kvm *kvm);
+	bool (*protected_apic_has_interrupt)(struct kvm_vcpu *vcpu);
+	int (*vcpu_mem_enc_ioctl)(struct kvm_vcpu *vcpu, void __user *argp);
+#endif
 };
 
 struct kvm_x86_nested_ops {
--- a/arch/x86/kvm/lapic.h
+++ b/arch/x86/kvm/lapic.h
@@ -65,10 +65,12 @@ struct kvm_lapic {
 	bool sw_enabled;
 	bool irr_pending;
 	bool lvt0_in_nmi_mode;
-	/* Select registers in the vAPIC cannot be read/written. */
-	bool guest_apic_protected;
 	/* Number of bits set in ISR. */
 	s16 isr_count;
+#ifndef __GENKSYMS__
+	/* Select registers in the vAPIC cannot be read/written. */
+	bool guest_apic_protected;
+#endif
 	/* The highest vector set in ISR; if -1 - invalid, must scan ISR. */
 	int highest_isr_cache;
 	/**
--- a/include/linux/misc_cgroup.h
+++ b/include/linux/misc_cgroup.h
@@ -20,7 +20,9 @@ enum misc_res_type {
 #endif
 #ifdef CONFIG_INTEL_TDX_HOST
 	/* Intel TDX HKIDs resource */
+#ifndef __GENKSYMS__
 	MISC_CG_RES_TDX,
+#endif
 #endif
 	/** @MISC_CG_RES_TYPES: count of enum misc_res_type constants */
 	MISC_CG_RES_TYPES
