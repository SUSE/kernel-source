From: Takashi Iwai <tiwai@suse.de>
Subject: partial revert of the commit 20516d6e51dd for kABI workaround
Patch-mainline: Never, kABI workaround
References: bsc#1226502

Revert the commit 20516d6e51dd backport
  patches.suse/x86-Stop-using-weak-symbols-for-__iowrite32_copy.patch
partially for making kABI happier, in conjunction with another kABI
workaround patch
  patches.kabi/kabi-Use-__iowriteXX_copy_inlined-for-in-kernel-modu.patch

Only the additional definition of __iowrite32_copy() in
arch/x86/include/asm/io.h is kept and the rest are reverted.

Signed-off-by: Takashi Iwai <tiwai@suse.de>

---
 arch/x86/lib/Makefile        |    1 +
 arch/x86/lib/iomap_copy_64.S |   15 +++++++++++++++
 include/linux/io.h           |    5 +----
 lib/iomap_copy.c             |    6 +++---
 4 files changed, 20 insertions(+), 7 deletions(-)

--- a/arch/x86/lib/Makefile
+++ b/arch/x86/lib/Makefile
@@ -66,6 +66,7 @@ ifneq ($(CONFIG_X86_CMPXCHG64),y)
         lib-y += atomic64_386_32.o
 endif
 else
+        obj-y += iomap_copy_64.o
 ifneq ($(CONFIG_GENERIC_CSUM),y)
         lib-y += csum-partial_64.o csum-copy_64.o csum-wrappers_64.o
 endif
--- /dev/null
+++ b/arch/x86/lib/iomap_copy_64.S
@@ -0,0 +1,15 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/*
+ * Copyright 2006 PathScale, Inc.  All Rights Reserved.
+ */
+
+#include <linux/linkage.h>
+
+/*
+ * override generic version in lib/iomap_copy.c
+ */
+SYM_FUNC_START(__iowrite32_copy)
+	movl %edx,%ecx
+	rep movsl
+	RET
+SYM_FUNC_END(__iowrite32_copy)
--- a/include/linux/io.h
+++ b/include/linux/io.h
@@ -16,10 +16,7 @@
 struct device;
 struct resource;
 
-#ifndef __iowrite32_copy
-void __iowrite32_copy(void __iomem *to, const void *from, size_t count);
-#endif
-
+__visible void __iowrite32_copy(void __iomem *to, const void *from, size_t count);
 void __ioread32_copy(void *to, const void __iomem *from, size_t count);
 
 #ifndef __iowrite64_copy
--- a/lib/iomap_copy.c
+++ b/lib/iomap_copy.c
@@ -16,8 +16,9 @@
  * time.  Order of access is not guaranteed, nor is a memory barrier
  * performed afterwards.
  */
-#ifndef __iowrite32_copy
-void __iowrite32_copy(void __iomem *to, const void *from, size_t count)
+void __attribute__((weak)) __iowrite32_copy(void __iomem *to,
+					    const void *from,
+					    size_t count)
 {
 	u32 __iomem *dst = to;
 	const u32 *src = from;
@@ -27,7 +28,6 @@ void __iowrite32_copy(void __iomem *to,
 		__raw_writel(*src++, dst++);
 }
 EXPORT_SYMBOL_GPL(__iowrite32_copy);
-#endif
 
 /**
  * __ioread32_copy - copy data from MMIO space, in 32-bit units
