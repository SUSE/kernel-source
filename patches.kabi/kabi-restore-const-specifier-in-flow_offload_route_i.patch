From: Michal Kubecek <mkubecek@suse.cz>
Date: Fri, 23 Aug 2024 11:06:51 +0200
Subject: kabi: restore const specifier in flow_offload_route_init()
Patch-mainline: Never, kabi workaround
References: CVE-2024-27403 bsc#1224415

Mainline commit 9e0f0430389b ("netfilter: nft_flow_offload: reset dst in
route object after setting up flow") drops const specifier of second
argument of exported function flow_offload_route_init() because its member
needs to be reset to null.

In the absence of a perfect solution, rename new function to a different
name flow_offload_route_init_1224415() and create a wrapper under the old
name which uses an explicit cast. In-tree code uses the new function,
out-of-tree modules would use the wrapper.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 include/net/netfilter/nf_flow_table.h |  4 +++-
 net/netfilter/nf_flow_table_core.c    | 13 +++++++++++--
 net/netfilter/nft_flow_offload.c      |  2 +-
 3 files changed, 15 insertions(+), 4 deletions(-)

--- a/include/net/netfilter/nf_flow_table.h
+++ b/include/net/netfilter/nf_flow_table.h
@@ -256,7 +256,9 @@ nf_flow_table_offload_del_cb(struct nf_flowtable *flow_table,
 }
 
 int flow_offload_route_init(struct flow_offload *flow,
-			    struct nf_flow_route *route);
+			    const struct nf_flow_route *route);
+int flow_offload_route_init_1224415(struct flow_offload *flow, struct
+				    nf_flow_route *route);
 
 int flow_offload_add(struct nf_flowtable *flow_table, struct flow_offload *flow);
 void flow_offload_refresh(struct nf_flowtable *flow_table,
--- a/net/netfilter/nf_flow_table_core.c
+++ b/net/netfilter/nf_flow_table_core.c
@@ -157,8 +157,8 @@ static void nft_flow_dst_release(struct flow_offload *flow,
 		dst_release(flow->tuplehash[dir].tuple.dst_cache);
 }
 
-int flow_offload_route_init(struct flow_offload *flow,
-			    struct nf_flow_route *route)
+int flow_offload_route_init_1224415(struct flow_offload *flow,
+				    struct nf_flow_route *route)
 {
 	int err;
 
@@ -179,6 +179,15 @@ int flow_offload_route_init(struct flow_offload *flow,
 
 	return err;
 }
+EXPORT_SYMBOL_GPL(flow_offload_route_init_1224415);
+
+int flow_offload_route_init(struct flow_offload *flow,
+			    const struct nf_flow_route *route)
+{
+	struct nf_flow_route *__route = (struct nf_flow_route *)route;
+
+	return flow_offload_route_init_1224415(flow, __route);
+}
 EXPORT_SYMBOL_GPL(flow_offload_route_init);
 
 static void flow_offload_fixup_tcp(struct ip_ct_tcp *tcp)
--- a/net/netfilter/nft_flow_offload.c
+++ b/net/netfilter/nft_flow_offload.c
@@ -320,7 +320,7 @@ static void nft_flow_offload_eval(const struct nft_expr *expr,
 	if (!flow)
 		goto err_flow_alloc;
 
-	if (flow_offload_route_init(flow, &route) < 0)
+	if (flow_offload_route_init_1224415(flow, &route) < 0)
 		goto err_flow_add;
 
 	if (tcph) {
