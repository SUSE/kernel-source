From: Vlastimil Babka <vbabka@suse.cz>
Subject: slub: Replace cmpxchg_double() - KABI fix
Patch-mainline: Never, kabi
References: bsc#1220773

Make changes due to backporting 6801be4f2653e5fdddca73b527cf0728284ba8a3
not break KABI.

Nobody except SLUB itself should depend on struct kmem_cache_cpu and struct
slab layout, so just pretend the changes never happened.

Also the physical layout is actually unchanged, the commit just makes it an
union with with freelist_aba_t.

Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
---
 include/linux/slub_def.h |    5 +++++
 mm/slab.h                |   12 ++++++++++++
 2 files changed, 17 insertions(+)

--- a/include/linux/slub_def.h
+++ b/include/linux/slub_def.h
@@ -48,6 +48,7 @@ enum stat_item {
  * with this_cpu_cmpxchg_double() alignment requirements.
  */
 struct kmem_cache_cpu {
+#ifndef __GENKSYMS__
 	union {
 		struct {
 			void **freelist;	/* Pointer to next available object */
@@ -55,6 +56,10 @@ struct kmem_cache_cpu {
 		};
 		freelist_aba_t freelist_tid;
 	};
+#else
+	void **freelist;        /* Pointer to next available object */
+	unsigned long tid;      /* Globally unique transaction id */
+#endif
 	struct slab *slab;	/* The slab from which we are allocating */
 #ifdef CONFIG_SLUB_CPU_PARTIAL
 	struct slab *partial;	/* Partially allocated frozen slabs */
--- a/mm/slab.h
+++ b/mm/slab.h
@@ -70,6 +70,7 @@ struct slab {
 #endif
 			};
 			/* Double-word boundary */
+#ifndef __GENKSYMS__
 			union {
 				struct {
 					void *freelist;		/* first free object */
@@ -86,6 +87,17 @@ struct slab {
 				freelist_aba_t freelist_counter;
 #endif
 			};
+#else /* __GENKSYMS__ */
+			void *freelist;         /* first free object */
+			union {
+				unsigned long counters;
+				struct {
+					unsigned inuse:16;
+					unsigned objects:15;
+					unsigned frozen:1;
+				};
+			};
+#endif /* __GENKSYMS__ */
 		};
 		struct rcu_head rcu_head;
 	};
