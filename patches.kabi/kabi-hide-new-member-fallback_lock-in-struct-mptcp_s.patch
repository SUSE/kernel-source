From: Michal Kubecek <mkubecek@suse.cz>
Date: Thu, 18 Sep 2025 07:56:21 +0200
Subject: kabi: hide new member fallback_lock in struct mptcp_sock
Patch-mainline: Never, kabi workaround
References: CVE-2025-38491 bsc#1247280

Backport of mainline commit f8a1d9b18c5e ("mptcp: make fallback action and
fallback decision atomic") adds a new member fallback_lock into struct
mptcp_sock. This new member is added at the end of the structure so that it
does not affect the existing layout and only grows its size. (In non-rt
builds it does not even that, thanks to 4-byte padding.)

This structure is always allocated via a helper, is not supposed to be used
in an array or other structure and is always handled via a pointer. The
only exception would be deriving a new, even more specialized, socket type
from it but such use case does not really make much sense. Moreover, it
being defined in a header file in net/mptcp/ rather than include/ indicates
that it is not supposed to be used outside of mptcp code.

Therefore we can just hide the new member from genksyms like we do e.g.
with new members added into struct net.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 net/mptcp/protocol.h | 2 ++
 1 file changed, 2 insertions(+)

--- a/net/mptcp/protocol.h
+++ b/net/mptcp/protocol.h
@@ -348,10 +348,12 @@ struct mptcp_sock {
 	u32		setsockopt_seq;
 	char		ca_name[TCP_CA_NAME_MAX];
 
+#ifndef __GENKSYMS__
 	spinlock_t	fallback_lock;	/* protects fallback,
 					 * allow_infinite_fallback and
 					 * allow_join
 					 */
+#endif
 };
 
 #define mptcp_data_lock(sk) spin_lock_bh(&(sk)->sk_lock.slock)
