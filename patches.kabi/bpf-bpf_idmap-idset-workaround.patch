From: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Subject: kABI: bpf: struct bpf_{idmap,idset} kABI workaround
Patch-mainline: never, kabi
References: bsc#1225903

Upstream commit 5dd9cdbc9dec ("bpf: states_equal() must build idmap for all
function frames") increased struct bpf_verifier_env's idmap_scratch field's
array size from 75 into 600, and upstream commit 1ffc85d9298e "bpf: Verify
scalar ids mapping in regsafe() using check_ids()" further introduced an
additional u32 tmp_id_gen field.

Those can't be easily workaround, but luckily all helper function that uses
idmap_scratch are internal to kernel/bpf/verifier.c, so we simply move the new
idmap_scratch field to the end and hide it from genksyms. The old idmap_scratch
is now no longer being used, so rename it to reflect this fact.

Signed-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
---
 include/linux/bpf_verifier.h |   16 ++++++++++++----
 1 file changed, 12 insertions(+), 4 deletions(-)

--- a/include/linux/bpf_verifier.h
+++ b/include/linux/bpf_verifier.h
@@ -288,6 +288,7 @@ struct bpf_idx_pair {
 };
 
 #define MAX_CALL_FRAMES 8
+#define BPF_ID_MAP_SIZE_OLD (MAX_BPF_REG + MAX_BPF_STACK / BPF_REG_SIZE)
 /* Maximum number of register states that can exist at once */
 #define BPF_ID_MAP_SIZE ((MAX_BPF_REG + MAX_BPF_STACK / BPF_REG_SIZE) * MAX_CALL_FRAMES)
 struct bpf_verifier_state {
@@ -584,10 +585,11 @@ struct bpf_verifier_env {
 	const struct bpf_line_info *prev_linfo;
 	struct bpf_verifier_log log;
 	struct bpf_subprog_info subprog_info[BPF_MAX_SUBPROGS + 1];
-	union {
-		struct bpf_idmap idmap_scratch;
-		struct bpf_idset idset_scratch;
-	};
+#ifndef __GENKSYMS__
+	struct bpf_id_pair __unused_idmap_scratch[BPF_ID_MAP_SIZE_OLD];
+#else
+	struct bpf_id_pair idmap_scratch[BPF_ID_MAP_SIZE_OLD];
+#endif /* __GENKSYMS__ */
 	struct {
 		int *insn_state;
 		int *insn_stack;
@@ -626,6 +628,12 @@ struct bpf_verifier_env {
 	 * e.g., in reg_type_str() to generate reg_type string
 	 */
 	char tmp_str_buf[TMP_STR_BUF_LEN];
+#ifndef __GENKSYMS__
+	union {
+		struct bpf_idmap idmap_scratch;
+		struct bpf_idset idset_scratch;
+	};
+#endif /* __GENKSYMS__ */
 };
 
 __printf(2, 0) void bpf_verifier_vlog(struct bpf_verifier_log *log,
