From: Olaf Hering <ohering@suse.de>
Date: Mon, 11 Mar 2024 09:15:55 -0700
Patch-mainline: never, kABI
Subject: Drivers: hv: vmbus: Track decrypted status in vmbus_gpadl
References: bsc#1225752, CVE-2024-36912

vmbus_gpadl lacks room for another bool.
Reuse redundant bits for the purpose.

--- a/drivers/hv/channel.c
+++ b/drivers/hv/channel.c
@@ -473,7 +473,7 @@ static int __vmbus_establish_gpadl(struc
 
 	ret = create_gpadl_header(type, kbuffer, size, send_offset, &msginfo);
 	if (ret) {
-		gpadl->decrypted = false;
+		SUSE_vmbus_gpadl_set_decrypted(gpadl, false);
 		return ret;
 	}
 
@@ -483,7 +483,7 @@ static int __vmbus_establish_gpadl(struc
 	 * memory is unknown. Leave "decrypted" as true to ensure the
 	 * memory will be leaked instead of going back on the free list.
 	 */
-	gpadl->decrypted = true;
+	SUSE_vmbus_gpadl_set_decrypted(gpadl, true);
 	ret = set_memory_decrypted((unsigned long)kbuffer,
 				   PFN_UP(size));
 	if (ret) {
@@ -557,7 +557,7 @@ static int __vmbus_establish_gpadl(struc
 
 	/* At this point, we received the gpadl created msg */
 	gpadl->gpadl_handle = gpadlmsg->gpadl;
-	gpadl->buffer = kbuffer;
+	SUSE_vmbus_gpadl_set_buffer(gpadl, kbuffer);
 	gpadl->size = size;
 
 
@@ -579,7 +579,7 @@ cleanup:
 		 * put back on the free list.
 		 */
 		if (!set_memory_encrypted((unsigned long)kbuffer, PFN_UP(size)))
-			gpadl->decrypted = false;
+			SUSE_vmbus_gpadl_set_decrypted(gpadl, false);
 	}
 
 	return ret;
@@ -896,12 +896,12 @@ post_msg_err:
 
 	kfree(info);
 
-	ret = set_memory_encrypted((unsigned long)gpadl->buffer,
+	ret = set_memory_encrypted((unsigned long)SUSE_vmbus_gpadl_get_buffer(gpadl),
 				   PFN_UP(gpadl->size));
 	if (ret)
 		pr_warn("Fail to set mem host visibility in GPADL teardown %d.\n", ret);
 
-	gpadl->decrypted = ret;
+	SUSE_vmbus_gpadl_set_decrypted(gpadl, ret);
 
 	return ret;
 }
--- a/include/linux/hyperv.h
+++ b/include/linux/hyperv.h
@@ -832,10 +832,48 @@ struct vmbus_device {
 struct vmbus_gpadl {
 	u32 gpadl_handle;
 	u32 size;
+#ifdef __GENKSYMS__
 	void *buffer;
-	bool decrypted;
+#else
+	void *SUSE_buffer_and_decrypted;
+#endif
 };
 
+static inline void* SUSE_vmbus_gpadl_get_buffer(const struct vmbus_gpadl *gpadl)
+{
+	unsigned long val = (unsigned long)gpadl->SUSE_buffer_and_decrypted;
+
+	val &= ~0x1UL;
+	return (void *)val;
+}
+
+static inline void SUSE_vmbus_gpadl_set_buffer(struct vmbus_gpadl *gpadl, void *buffer)
+{
+	unsigned long old_val = (unsigned long)gpadl->SUSE_buffer_and_decrypted;
+	unsigned long old_decrypted = old_val & 0x1UL;
+	unsigned long new_ptr = (unsigned long)buffer;
+
+	new_ptr = (new_ptr & ~0x1UL) | old_decrypted;
+	gpadl->SUSE_buffer_and_decrypted = (void *)new_ptr;
+}
+
+static inline bool SUSE_vmbus_gpadl_get_decrypted(const struct vmbus_gpadl *gpadl)
+{
+	unsigned long val = (unsigned long)gpadl->SUSE_buffer_and_decrypted;
+
+	return val & 0x1UL;
+}
+
+static inline void SUSE_vmbus_gpadl_set_decrypted(struct vmbus_gpadl *gpadl, bool decrypted)
+{
+	unsigned long old_val = (unsigned long)gpadl->SUSE_buffer_and_decrypted;
+	unsigned long old_buffer = old_val & ~0x1UL;
+	unsigned long new_decrypted = decrypted;
+
+	new_decrypted |= old_buffer;
+	gpadl->SUSE_buffer_and_decrypted = (void *)new_decrypted;
+}
+
 struct vmbus_channel {
 	struct list_head listentry;
 
