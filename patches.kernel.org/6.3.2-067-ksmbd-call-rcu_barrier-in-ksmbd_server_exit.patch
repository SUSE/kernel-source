From: Namjae Jeon <linkinjeon@kernel.org>
Date: Wed, 3 May 2023 08:51:51 +0900
Subject: [PATCH] ksmbd: call rcu_barrier() in ksmbd_server_exit()
References: bsc#1012628
Patch-mainline: 6.3.2
Git-commit: eb307d09fe15844fdaebeb8cc8c9b9e925430aa5

commit eb307d09fe15844fdaebeb8cc8c9b9e925430aa5 upstream.

racy issue is triggered the bug by racing between closing a connection
and rmmod. In ksmbd, rcu_barrier() is not called at module unload time,
so nothing prevents ksmbd from getting unloaded while it still has RCU
callbacks pending. It leads to trigger unintended execution of kernel
code locally and use to defeat protections such as Kernel Lockdown

Cc: stable@vger.kernel.org
Reported-by: zdi-disclosures@trendmicro.com # ZDI-CAN-20477
Signed-off-by: Namjae Jeon <linkinjeon@kernel.org>
Signed-off-by: Steve French <stfrench@microsoft.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 fs/ksmbd/server.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/fs/ksmbd/server.c b/fs/ksmbd/server.c
index 0d824278..cd8a8733 100644
--- a/fs/ksmbd/server.c
+++ b/fs/ksmbd/server.c
@@ -606,6 +606,7 @@ static int __init ksmbd_server_init(void)
 static void __exit ksmbd_server_exit(void)
 {
 	ksmbd_server_shutdown();
+	rcu_barrier();
 	ksmbd_release_inode_hash();
 }
 
-- 
2.35.3

