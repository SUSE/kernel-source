From: Andreas Gruenbacher <agruenba@redhat.com>
Date: Thu, 6 Mar 2025 22:13:28 +0100
Subject: [PATCH] gfs2: skip if we cannot defer delete
References: bsc#1012628
Patch-mainline: 6.14.2
Git-commit: 41a8e04c94b868023986ec35ca06756e31e1e229

[ Upstream commit 41a8e04c94b868023986ec35ca06756e31e1e229 ]

In gfs2_evict_inode(), in the unlikely case that we cannot defer
deleting the inode, it is not safe to fall back to deleting the inode;
the only valid choice we have is to skip the delete.

In addition, in evict_should_delete(), if we cannot lock the inode glock
exclusively, we are in a bad enough state that skipping the delete is
likely a better choice than trying to recover from the failure later.

Fixes: c5b7a2400edc ("gfs2: Only defer deletes when we have an iopen glock")
Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
Signed-off-by: Sasha Levin <sashal@kernel.org>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 fs/gfs2/super.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/fs/gfs2/super.c b/fs/gfs2/super.c
index ff8fdc6134ff..0e6ad7bf32be 100644
--- a/fs/gfs2/super.c
+++ b/fs/gfs2/super.c
@@ -1339,7 +1339,7 @@ static enum evict_behavior evict_should_delete(struct inode *inode,
 	/* Must not read inode block until block type has been verified */
 	ret = gfs2_glock_nq_init(ip->i_gl, LM_ST_EXCLUSIVE, GL_SKIP, gh);
 	if (unlikely(ret))
-		return EVICT_SHOULD_DEFER_DELETE;
+		return EVICT_SHOULD_SKIP_DELETE;
 
 	if (gfs2_inode_already_deleted(ip->i_gl, ip->i_no_formal_ino))
 		return EVICT_SHOULD_SKIP_DELETE;
@@ -1498,7 +1498,7 @@ static void gfs2_evict_inode(struct inode *inode)
 				gfs2_glock_put(io_gl);
 			goto out;
 		}
-		behavior = EVICT_SHOULD_DELETE;
+		behavior = EVICT_SHOULD_SKIP_DELETE;
 	}
 	if (behavior == EVICT_SHOULD_DELETE)
 		ret = evict_unlinked_inode(inode);
-- 
2.49.0

