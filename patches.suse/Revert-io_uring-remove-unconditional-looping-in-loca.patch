From: Jiri Slaby <jslaby@suse.cz>
Date: Tue, 2 Apr 2024 10:01:47 +0200
Subject: Revert "io_uring: remove unconditional looping in local task_work
 handling"
Patch-mainline: never, only a workaround
References: liburing_failure

This reverts commit a352d5a59f4f8812d83bfc50d48bd3a517be1791, it breaks
liburing's recv-multishot test.

See:
https://lore.kernel.org/all/bcf80774-98c2-4c14-a1e7-6efcb79a7fee@kernel.org/

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 io_uring/io_uring.c |   44 +++++++++++++++-----------------------------
 1 file changed, 15 insertions(+), 29 deletions(-)

--- a/io_uring/io_uring.c
+++ b/io_uring/io_uring.c
@@ -1389,20 +1389,7 @@ static void __cold io_move_task_work_fro
 	}
 }
 
-static bool io_run_local_work_continue(struct io_ring_ctx *ctx, int events,
-				       int min_events)
-{
-	if (llist_empty(&ctx->work_llist))
-		return false;
-	if (events < min_events)
-		return true;
-	if (ctx->flags & IORING_SETUP_TASKRUN_FLAG)
-		atomic_or(IORING_SQ_TASKRUN, &ctx->rings->sq_flags);
-	return false;
-}
-
-static int __io_run_local_work(struct io_ring_ctx *ctx, struct io_tw_state *ts,
-			       int min_events)
+static int __io_run_local_work(struct io_ring_ctx *ctx, struct io_tw_state *ts)
 {
 	struct llist_node *node;
 	unsigned int loops = 0;
@@ -1431,20 +1418,18 @@ again:
 	}
 	loops++;
 
-	if (io_run_local_work_continue(ctx, ret, min_events))
+	if (!llist_empty(&ctx->work_llist))
 		goto again;
 	if (ts->locked) {
 		io_submit_flush_completions(ctx);
-		if (io_run_local_work_continue(ctx, ret, min_events))
+		if (!llist_empty(&ctx->work_llist))
 			goto again;
 	}
-
 	trace_io_uring_local_work_run(ctx, ret, loops);
 	return ret;
 }
 
-static inline int io_run_local_work_locked(struct io_ring_ctx *ctx,
-					   int min_events)
+static inline int io_run_local_work_locked(struct io_ring_ctx *ctx)
 {
 	struct io_tw_state ts = { .locked = true, };
 	int ret;
@@ -1452,20 +1437,20 @@ static inline int io_run_local_work_lock
 	if (llist_empty(&ctx->work_llist))
 		return 0;
 
-	ret = __io_run_local_work(ctx, &ts, min_events);
+	ret = __io_run_local_work(ctx, &ts);
 	/* shouldn't happen! */
 	if (WARN_ON_ONCE(!ts.locked))
 		mutex_lock(&ctx->uring_lock);
 	return ret;
 }
 
-static int io_run_local_work(struct io_ring_ctx *ctx, int min_events)
+static int io_run_local_work(struct io_ring_ctx *ctx)
 {
 	struct io_tw_state ts = {};
 	int ret;
 
 	ts.locked = mutex_trylock(&ctx->uring_lock);
-	ret = __io_run_local_work(ctx, &ts, min_events);
+	ret = __io_run_local_work(ctx, &ts);
 	if (ts.locked)
 		mutex_unlock(&ctx->uring_lock);
 
@@ -1661,7 +1646,7 @@ static int io_iopoll_check(struct io_rin
 		    io_task_work_pending(ctx)) {
 			u32 tail = ctx->cached_cq_tail;
 
-			(void) io_run_local_work_locked(ctx, min);
+			(void) io_run_local_work_locked(ctx);
 
 			if (task_work_pending(current) ||
 			    wq_list_empty(&ctx->iopoll_list)) {
@@ -2504,7 +2489,7 @@ int io_run_task_work_sig(struct io_ring_
 {
 	if (!llist_empty(&ctx->work_llist)) {
 		__set_current_state(TASK_RUNNING);
-		if (io_run_local_work(ctx, INT_MAX) > 0)
+		if (io_run_local_work(ctx) > 0)
 			return 0;
 	}
 	if (io_run_task_work() > 0)
@@ -2571,7 +2556,7 @@ static int io_cqring_wait(struct io_ring
 	if (!io_allowed_run_tw(ctx))
 		return -EEXIST;
 	if (!llist_empty(&ctx->work_llist))
-		io_run_local_work(ctx, min_events);
+		io_run_local_work(ctx);
 	io_run_task_work();
 	io_cqring_overflow_flush(ctx);
 	/* if user messes with these they will just get an early return */
@@ -2609,10 +2594,11 @@ static int io_cqring_wait(struct io_ring
 
 	trace_io_uring_cqring_wait(ctx, min_events);
 	do {
-		int nr_wait = (int) iowq.cq_tail - READ_ONCE(ctx->rings->cq.tail);
 		unsigned long check_cq;
 
 		if (ctx->flags & IORING_SETUP_DEFER_TASKRUN) {
+			int nr_wait = (int) iowq.cq_tail - READ_ONCE(ctx->rings->cq.tail);
+
 			atomic_set(&ctx->cq_wait_nr, nr_wait);
 			set_current_state(TASK_INTERRUPTIBLE);
 		} else {
@@ -2631,7 +2617,7 @@ static int io_cqring_wait(struct io_ring
 		 */
 		io_run_task_work();
 		if (!llist_empty(&ctx->work_llist))
-			io_run_local_work(ctx, nr_wait);
+			io_run_local_work(ctx);
 
 		/*
 		 * Non-local task_work will be run on exit to userspace, but
@@ -3290,7 +3276,7 @@ static __cold bool io_uring_try_cancel_r
 
 	if ((ctx->flags & IORING_SETUP_DEFER_TASKRUN) &&
 	    io_allowed_defer_tw_run(ctx))
-		ret |= io_run_local_work(ctx, INT_MAX) > 0;
+		ret |= io_run_local_work(ctx) > 0;
 	ret |= io_cancel_defer_files(ctx, task, cancel_all);
 	mutex_lock(&ctx->uring_lock);
 	ret |= io_poll_remove_all(ctx, task, cancel_all);
@@ -3652,7 +3638,7 @@ SYSCALL_DEFINE6(io_uring_enter, unsigned
 			 * it should handle ownership problems if any.
 			 */
 			if (ctx->flags & IORING_SETUP_DEFER_TASKRUN)
-				(void)io_run_local_work_locked(ctx, min_complete);
+				(void)io_run_local_work_locked(ctx);
 		}
 		mutex_unlock(&ctx->uring_lock);
 	}
