From: Finn Thain <fthain@linux-m68k.org>
Date: Tue, 22 Feb 2022 10:09:42 +1100
Subject: [PATCH] scsi: mesh: Stop using struct scsi_pointer
Git-commit: 2e1b3175f29c0299cc0eb2df6fb1f72e258ac5c1
Patch-mainline: v5.18-rc1
References: jsc#PED-1559

This driver doesn't use SCp.ptr to save a SCSI command data pointer which
means "scsi pointer" is a complete misnomer here. Only a few members of
struct scsi_pointer are used and the rest waste memory.  Avoid the "struct
foo { struct bar; };" silliness.

Link: https://lore.kernel.org/r/fbf930e64af5b15ca028dfe25b00fe933951f19b.1645484982.git.fthain@linux-m68k.org
Reviewed-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: Finn Thain <fthain@linux-m68k.org>
Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
Acked-by: Hannes Reinecke <hare@suse.com>
---
 drivers/scsi/mesh.c | 19 +++++++++----------
 drivers/scsi/mesh.h | 10 +++++-----
 2 files changed, 14 insertions(+), 15 deletions(-)

diff --git a/drivers/scsi/mesh.c b/drivers/scsi/mesh.c
index de9ae36def42..322d3ad38159 100644
--- a/drivers/scsi/mesh.c
+++ b/drivers/scsi/mesh.c
@@ -586,12 +586,12 @@ static void mesh_done(struct mesh_state *ms, int start_next)
 	ms->current_req = NULL;
 	tp->current_req = NULL;
 	if (cmd) {
-		struct scsi_pointer *scsi_pointer = mesh_scsi_pointer(cmd);
+		struct mesh_cmd_priv *mcmd = mesh_priv(cmd);
 
 		set_host_byte(cmd, ms->stat);
-		set_status_byte(cmd, scsi_pointer->Status);
+		set_status_byte(cmd, mcmd->status);
 		if (ms->stat == DID_OK)
-			scsi_msg_to_host_byte(cmd, scsi_pointer->Message);
+			scsi_msg_to_host_byte(cmd, mcmd->message);
 		if (DEBUG_TARGET(cmd)) {
 			printk(KERN_DEBUG "mesh_done: result = %x, data_ptr=%d, buflen=%d\n",
 			       cmd->result, ms->data_ptr, scsi_bufflen(cmd));
@@ -605,7 +605,7 @@ static void mesh_done(struct mesh_state *ms, int start_next)
 			}
 #endif
 		}
-		scsi_pointer->this_residual -= ms->data_ptr;
+		mcmd->this_residual -= ms->data_ptr;
 		scsi_done(cmd);
 	}
 	if (start_next) {
@@ -1173,7 +1173,7 @@ static void handle_msgin(struct mesh_state *ms)
 	if (ms->n_msgin < msgin_length(ms))
 		goto reject;
 	if (cmd)
-		mesh_scsi_pointer(cmd)->Message = code;
+		mesh_priv(cmd)->message = code;
 	switch (code) {
 	case COMMAND_COMPLETE:
 		break;
@@ -1264,7 +1264,7 @@ static void set_dma_cmds(struct mesh_state *ms, struct scsi_cmnd *cmd)
 	if (cmd) {
 		int nseg;
 
-		mesh_scsi_pointer(cmd)->this_residual = scsi_bufflen(cmd);
+		mesh_priv(cmd)->this_residual = scsi_bufflen(cmd);
 
 		nseg = scsi_dma_map(cmd);
 		BUG_ON(nseg < 0);
@@ -1594,13 +1594,12 @@ static void cmd_complete(struct mesh_state *ms)
 			break;
 		case statusing:
 			if (cmd) {
-				struct scsi_pointer *scsi_pointer =
-					mesh_scsi_pointer(cmd);
+				struct mesh_cmd_priv *mcmd = mesh_priv(cmd);
 
-				scsi_pointer->Status = mr->fifo;
+				mcmd->status = mr->fifo;
 				if (DEBUG_TARGET(cmd))
 					printk(KERN_DEBUG "mesh: status is %x\n",
-					       scsi_pointer->Status);
+					       mcmd->status);
 			}
 			ms->msgphase = msg_in;
 			break;
diff --git a/drivers/scsi/mesh.h b/drivers/scsi/mesh.h
index 1afa8b37295b..f70181acceac 100644
--- a/drivers/scsi/mesh.h
+++ b/drivers/scsi/mesh.h
@@ -9,14 +9,14 @@
 #define _MESH_H
 
 struct mesh_cmd_priv {
-	struct scsi_pointer scsi_pointer;
+	int this_residual;
+	int message;
+	int status;
 };
 
-static inline struct scsi_pointer *mesh_scsi_pointer(struct scsi_cmnd *cmd)
+static inline struct mesh_cmd_priv *mesh_priv(struct scsi_cmnd *cmd)
 {
-	struct mesh_cmd_priv *mcmd = scsi_cmd_priv(cmd);
-
-	return &mcmd->scsi_pointer;
+	return scsi_cmd_priv(cmd);
 }
 
 /*
-- 
2.35.3

