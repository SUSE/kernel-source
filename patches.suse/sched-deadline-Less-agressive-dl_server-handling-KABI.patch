From 38864d77fdfd392c1a5562cca30b39b648959af3 Mon Sep 17 00:00:00 2001
From: Mel Gorman <mgorman@techsingularity.net>
Date: Fri, 18 Jul 2025 13:27:47 +0100
Subject: [PATCH] sched/deadline: Less agressive dl_server handling KABI

References: bsc#1234634 (Scheduler functional and performance backports)
Patch-mainline: Never, kABI

The new bit fits in a hole so when simply remove the new bit when
comparing symbols.

Signed-off-by: Mel Gorman <mgorman@suse.de>
---
 include/linux/sched.h   | 2 ++
 kernel/sched/deadline.c | 5 ++++-
 2 files changed, 6 insertions(+), 1 deletion(-)

diff --git a/include/linux/sched.h b/include/linux/sched.h
index cd379932f74a..9b0cd2bc08e3 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -703,7 +703,9 @@ struct sched_dl_entity {
 	unsigned int			dl_defer	  : 1;
 	unsigned int			dl_defer_armed	  : 1;
 	unsigned int			dl_defer_running  : 1;
+#ifndef __GENKSYMS__
 	unsigned int			dl_server_idle    : 1;
+#endif
 
 	/*
 	 * Bandwidth enforcement timer. Each -deadline task has its
diff --git a/kernel/sched/deadline.c b/kernel/sched/deadline.c
index 67cc8892d5c1..8e81c89e2385 100644
--- a/kernel/sched/deadline.c
+++ b/kernel/sched/deadline.c
@@ -1644,7 +1644,9 @@ void dl_server_update(struct sched_dl_entity *dl_se, s64 delta_exec)
 {
 	/* 0 runtime = fair server disabled */
 	if (dl_se->dl_runtime) {
+#ifndef __GENKSYMS__
 		dl_se->dl_server_idle = 0;
+#endif
 		update_curr_dl_se(dl_se->rq, dl_se, delta_exec);
 	}
 }
@@ -1694,13 +1696,14 @@ static bool dl_server_stopped(struct sched_dl_entity *dl_se)
 {
 	if (!dl_se->dl_server_active)
 		return false;
-
+#ifndef __GENKSYMS__
 	if (dl_se->dl_server_idle) {
 		dl_server_stop(dl_se);
 		return true;
 	}
 
 	dl_se->dl_server_idle = 1;
+#endif
 	return false;
 }
 
