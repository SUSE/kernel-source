From: Nicolai Stange <nstange@suse.de>
Date: Mon, 21 Apr 2025 17:05:00 +0200
References: jsc#PED-12225
Patch-mainline: Never, kABI
Subject: kABI: restore tpm_pcr_extend()'s current upstream signature

The IMA sha1 disablement patchset hasn't been merged yet upstream.
Even though the implemented tpm_pcr_extend()'s signature change had
been proposed there, it's final form might perhaps still change again.
Avoid a situation where we're stuck with a downstream specific variant
and restore the tpm_pcr_extend() signature to what currently is at
upstream.

---
 drivers/char/tpm/tpm-interface.c          |   25 ++++++++++++++++++++++---
 include/linux/tpm.h                       |   16 ++++++++++++----
 security/integrity/ima/ima_queue.c        |    4 ++--
 security/keys/trusted-keys/trusted_tpm1.c |    2 +-
 4 files changed, 37 insertions(+), 10 deletions(-)

--- a/drivers/char/tpm/tpm-interface.c
+++ b/drivers/char/tpm/tpm-interface.c
@@ -315,8 +315,28 @@ EXPORT_SYMBOL_GPL(tpm_pcr_read);
  * Return: same as with tpm_transmit_cmd()
  */
 int tpm_pcr_extend(struct tpm_chip *chip, u32 pcr_idx,
-		   struct tpm_digest *digests,
-		   unsigned long banks_skip_mask)
+		   struct tpm_digest *digests)
+{
+  return tpm_pcr_extend_sel(chip, pcr_idx, digests, 0);
+}
+EXPORT_SYMBOL_GPL(tpm_pcr_extend);
+
+/**
+ * tpm_pcr_extend_sel - selectively extend a PCR value in SHA1 bank.
+ * @chip:	a &struct tpm_chip instance, %NULL for the default chip
+ * @pcr_idx:	the PCR to be retrieved
+ * @digests:	array of tpm_digest structures used to extend PCRs
+ * @banks_skip_mask:	pcr banks to skip
+ *
+ * Note: callers must pass a digest for every allocated PCR bank, in the same
+ * order of the banks in chip->allocated_banks, independent of the value of
+ * @banks_skip_mask.
+ *
+ * Return: same as with tpm_transmit_cmd()
+ */
+int tpm_pcr_extend_sel(struct tpm_chip *chip, u32 pcr_idx,
+		       struct tpm_digest *digests,
+		       unsigned long banks_skip_mask)
 {
 	int rc;
 	int i;
@@ -350,7 +370,6 @@ out:
 	tpm_put_ops(chip);
 	return rc;
 }
-EXPORT_SYMBOL_GPL(tpm_pcr_extend);
 
 int tpm_auto_startup(struct tpm_chip *chip)
 {
--- a/include/linux/tpm.h
+++ b/include/linux/tpm.h
@@ -447,8 +447,10 @@ extern ssize_t tpm_transmit_cmd(struct t
 extern int tpm_pcr_read(struct tpm_chip *chip, u32 pcr_idx,
 			struct tpm_digest *digest);
 extern int tpm_pcr_extend(struct tpm_chip *chip, u32 pcr_idx,
-			  struct tpm_digest *digests,
-			  unsigned long banks_skip_mask);
+			  struct tpm_digest *digests);
+extern int tpm_pcr_extend_sel(struct tpm_chip *chip, u32 pcr_idx,
+			      struct tpm_digest *digests,
+			      unsigned long banks_skip_mask);
 extern int tpm_get_random(struct tpm_chip *chip, u8 *data, size_t max);
 extern struct tpm_chip *tpm_default_chip(void);
 void tpm2_flush_context(struct tpm_chip *chip, u32 handle);
@@ -474,8 +476,14 @@ static inline int tpm_pcr_read(struct tp
 }
 
 static inline int tpm_pcr_extend(struct tpm_chip *chip, u32 pcr_idx,
-				 struct tpm_digest *digests,
-				 unsigned long banks_skip_mask)
+				 struct tpm_digest *digests)
+{
+	return -ENODEV;
+}
+
+static inline int tpm_pcr_extend_sel(struct tpm_chip *chip, u32 pcr_idx,
+				     struct tpm_digest *digests,
+				     unsigned long banks_skip_mask)
 {
 	return -ENODEV;
 }
--- a/security/integrity/ima/ima_queue.c
+++ b/security/integrity/ima/ima_queue.c
@@ -162,8 +162,8 @@ static int ima_pcr_extend(struct tpm_dig
 	pcr_banks_skip_mask = 0;
 #endif
 
-	result = tpm_pcr_extend(ima_tpm_chip, pcr, digests_arg,
-				pcr_banks_skip_mask);
+	result = tpm_pcr_extend_sel(ima_tpm_chip, pcr, digests_arg,
+				    pcr_banks_skip_mask);
 	if (result != 0) {
 		pr_err("Error Communicating to TPM chip, result: %d\n", result);
 		return result;
--- a/security/keys/trusted-keys/trusted_tpm1.c
+++ b/security/keys/trusted-keys/trusted_tpm1.c
@@ -393,7 +393,7 @@ static int pcrlock(const int pcrnum)
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 
-	return tpm_pcr_extend(chip, pcrnum, digests, 0) ? -EINVAL : 0;
+	return tpm_pcr_extend(chip, pcrnum, digests) ? -EINVAL : 0;
 }
 
 /*
