From: Jiri Slaby <jslaby@suse.cz>
Date: Tue, 14 Oct 2025 10:38:00 +0200
Subject: Revert "net: bonding: add broadcast_neighbor option for 802.3ad"
References: bsc#1250894
Patch-mainline: never, temporary revert

This reverts commit ce7a381697cb3958ffe0b45e5028ac69444e9288.

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 Documentation/networking/bonding.rst |    6 ---
 drivers/net/bonding/bond_main.c      |   66 +++--------------------------------
 drivers/net/bonding/bond_options.c   |   42 ----------------------
 include/net/bond_options.h           |    1 
 include/net/bonding.h                |    3 -
 5 files changed, 6 insertions(+), 112 deletions(-)

--- a/Documentation/networking/bonding.rst
+++ b/Documentation/networking/bonding.rst
@@ -562,12 +562,6 @@ lacp_rate
 
 	The default is slow.
 
-broadcast_neighbor
-
-	Option specifying whether to broadcast ARP/ND packets to all
-	active slaves.  This option has no effect in modes other than
-	802.3ad mode.  The default is off (0).
-
 max_bonds
 
 	Specifies the number of bonding devices to create for this
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -212,8 +212,6 @@ atomic_t netpoll_block_tx = ATOMIC_INIT(
 
 unsigned int bond_net_id __read_mostly;
 
-DEFINE_STATIC_KEY_FALSE(bond_bcast_neigh_enabled);
-
 static const struct flow_dissector_key flow_keys_bonding_keys[] = {
 	{
 		.key_id = FLOW_DISSECTOR_KEY_CONTROL,
@@ -4458,9 +4456,6 @@ static int bond_open(struct net_device *
 
 		bond_for_each_slave(bond, slave, iter)
 			dev_mc_add(slave->dev, lacpdu_mcast_addr);
-
-		if (bond->params.broadcast_neighbor)
-			static_branch_inc(&bond_bcast_neigh_enabled);
 	}
 
 	if (bond_mode_can_use_xmit_hash(bond))
@@ -4480,10 +4475,6 @@ static int bond_close(struct net_device
 		bond_alb_deinitialize(bond);
 	bond->recv_probe = NULL;
 
-	if (BOND_MODE(bond) == BOND_MODE_8023AD &&
-	    bond->params.broadcast_neighbor)
-		static_branch_dec(&bond_bcast_neigh_enabled);
-
 	if (bond_uses_primary(bond)) {
 		rcu_read_lock();
 		slave = rcu_dereference(bond->curr_active_slave);
@@ -5319,37 +5310,6 @@ static struct slave *bond_xdp_xmit_3ad_x
 	return slaves->arr[hash % count];
 }
 
-static bool bond_should_broadcast_neighbor(struct sk_buff *skb,
-					   struct net_device *dev)
-{
-	struct bonding *bond = netdev_priv(dev);
-	struct {
-		struct ipv6hdr ip6;
-		struct icmp6hdr icmp6;
-	} *combined, _combined;
-
-	if (!static_branch_unlikely(&bond_bcast_neigh_enabled))
-		return false;
-
-	if (!bond->params.broadcast_neighbor)
-		return false;
-
-	if (skb->protocol == htons(ETH_P_ARP))
-		return true;
-
-	if (skb->protocol == htons(ETH_P_IPV6)) {
-		combined = skb_header_pointer(skb, skb_mac_header_len(skb),
-					      sizeof(_combined),
-					      &_combined);
-		if (combined && combined->ip6.nexthdr == NEXTHDR_ICMP &&
-		    (combined->icmp6.icmp6_type == NDISC_NEIGHBOUR_SOLICITATION ||
-		     combined->icmp6.icmp6_type == NDISC_NEIGHBOUR_ADVERTISEMENT))
-			return true;
-	}
-
-	return false;
-}
-
 /* Use this Xmit function for 3AD as well as XOR modes. The current
  * usable slave array is formed in the control path. The xmit function
  * just calculates hash and sends the packet out.
@@ -5369,27 +5329,17 @@ static netdev_tx_t bond_3ad_xor_xmit(str
 	return bond_tx_drop(dev, skb);
 }
 
-/* in broadcast mode, we send everything to all or usable slave interfaces.
- * under rcu_read_lock when this function is called.
- */
+/* in broadcast mode, we send everything to all usable interfaces. */
 static netdev_tx_t bond_xmit_broadcast(struct sk_buff *skb,
-				       struct net_device *bond_dev,
-				       bool all_slaves)
+				       struct net_device *bond_dev)
 {
 	struct bonding *bond = netdev_priv(bond_dev);
-	struct bond_up_slave *slaves;
+	struct slave *slave = NULL;
+	struct list_head *iter;
 	bool xmit_suc = false;
 	bool skb_used = false;
-	int slaves_count, i;
 
-	if (all_slaves)
-		slaves = rcu_dereference(bond->all_slaves);
-	else
-		slaves = rcu_dereference(bond->usable_slaves);
-
-	slaves_count = slaves ? READ_ONCE(slaves->count) : 0;
-	for (i = 0; i < slaves_count; i++) {
-		struct slave *slave = slaves->arr[i];
+	bond_for_each_slave_rcu(bond, slave, iter) {
 		struct sk_buff *skb2;
 
 		if (!(bond_slave_is_up(slave) && slave->link == BOND_LINK_UP))
@@ -5627,13 +5577,10 @@ static netdev_tx_t __bond_start_xmit(str
 	case BOND_MODE_ACTIVEBACKUP:
 		return bond_xmit_activebackup(skb, dev);
 	case BOND_MODE_8023AD:
-		if (bond_should_broadcast_neighbor(skb, dev))
-			return bond_xmit_broadcast(skb, dev, false);
-		fallthrough;
 	case BOND_MODE_XOR:
 		return bond_3ad_xor_xmit(skb, dev);
 	case BOND_MODE_BROADCAST:
-		return bond_xmit_broadcast(skb, dev, true);
+		return bond_xmit_broadcast(skb, dev);
 	case BOND_MODE_ALB:
 		return bond_alb_xmit(skb, dev);
 	case BOND_MODE_TLB:
@@ -6509,7 +6456,6 @@ static int __init bond_check_params(stru
 	eth_zero_addr(params->ad_actor_system);
 	params->ad_user_port_key = ad_user_port_key;
 	params->coupled_control = 1;
-	params->broadcast_neighbor = 0;
 	if (packets_per_slave > 0) {
 		params->reciprocal_packets_per_slave =
 			reciprocal_value(packets_per_slave);
--- a/drivers/net/bonding/bond_options.c
+++ b/drivers/net/bonding/bond_options.c
@@ -87,8 +87,6 @@ static int bond_option_missed_max_set(st
 				      const struct bond_opt_value *newval);
 static int bond_option_coupled_control_set(struct bonding *bond,
 					   const struct bond_opt_value *newval);
-static int bond_option_broadcast_neigh_set(struct bonding *bond,
-					   const struct bond_opt_value *newval);
 
 static const struct bond_opt_value bond_mode_tbl[] = {
 	{ "balance-rr",    BOND_MODE_ROUNDROBIN,   BOND_VALFLAG_DEFAULT},
@@ -242,12 +240,6 @@ static const struct bond_opt_value bond_
 	{ NULL,  -1, 0},
 };
 
-static const struct bond_opt_value bond_broadcast_neigh_tbl[] = {
-	{ "off", 0, BOND_VALFLAG_DEFAULT},
-	{ "on",	 1, 0},
-	{ NULL,  -1, 0}
-};
-
 static const struct bond_option bond_opts[BOND_OPT_LAST] = {
 	[BOND_OPT_MODE] = {
 		.id = BOND_OPT_MODE,
@@ -521,14 +513,6 @@ static const struct bond_option bond_opt
 		.flags = BOND_OPTFLAG_IFDOWN,
 		.values = bond_coupled_control_tbl,
 		.set = bond_option_coupled_control_set,
-	},
-	[BOND_OPT_BROADCAST_NEIGH] = {
-		.id = BOND_OPT_BROADCAST_NEIGH,
-		.name = "broadcast_neighbor",
-		.desc = "Broadcast neighbor packets to all active slaves",
-		.unsuppmodes = BOND_MODE_ALL_EX(BIT(BOND_MODE_8023AD)),
-		.values = bond_broadcast_neigh_tbl,
-		.set = bond_option_broadcast_neigh_set,
 	}
 };
 
@@ -910,13 +894,6 @@ static int bond_option_mode_set(struct b
 	bond->params.arp_validate = BOND_ARP_VALIDATE_NONE;
 	bond->params.mode = newval->value;
 
-	/* When changing mode, the bond device is down, we may reduce
-	 * the bond_bcast_neigh_enabled in bond_close() if broadcast_neighbor
-	 * enabled in 8023ad mode. Therefore, only clear broadcast_neighbor
-	 * to 0.
-	 */
-	bond->params.broadcast_neighbor = 0;
-
 	if (bond->dev->reg_state == NETREG_REGISTERED) {
 		bool update = false;
 
@@ -1864,22 +1841,3 @@ static int bond_option_coupled_control_s
 	bond->params.coupled_control = newval->value;
 	return 0;
 }
-
-static int bond_option_broadcast_neigh_set(struct bonding *bond,
-					   const struct bond_opt_value *newval)
-{
-	if (bond->params.broadcast_neighbor == newval->value)
-		return 0;
-
-	bond->params.broadcast_neighbor = newval->value;
-	if (bond->dev->flags & IFF_UP) {
-		if (bond->params.broadcast_neighbor)
-			static_branch_inc(&bond_bcast_neigh_enabled);
-		else
-			static_branch_dec(&bond_bcast_neigh_enabled);
-	}
-
-	netdev_dbg(bond->dev, "Setting broadcast_neighbor to %s (%llu)\n",
-		   newval->string, newval->value);
-	return 0;
-}
--- a/include/net/bond_options.h
+++ b/include/net/bond_options.h
@@ -77,7 +77,6 @@ enum {
 	BOND_OPT_NS_TARGETS,
 	BOND_OPT_PRIO,
 	BOND_OPT_COUPLED_CONTROL,
-	BOND_OPT_BROADCAST_NEIGH,
 	BOND_OPT_LAST
 };
 
--- a/include/net/bonding.h
+++ b/include/net/bonding.h
@@ -115,8 +115,6 @@ static inline int is_netpoll_tx_blocked(
 #define is_netpoll_tx_blocked(dev) (0)
 #endif
 
-DECLARE_STATIC_KEY_FALSE(bond_bcast_neigh_enabled);
-
 struct bond_params {
 	int mode;
 	int xmit_policy;
@@ -151,7 +149,6 @@ struct bond_params {
 	struct in6_addr ns_targets[BOND_MAX_NS_TARGETS];
 #endif
 	int coupled_control;
-	int broadcast_neighbor;
 
 	/* 2 bytes of padding : see ether_addr_equal_64bits() */
 	u8 ad_actor_system[ETH_ALEN + 2];
