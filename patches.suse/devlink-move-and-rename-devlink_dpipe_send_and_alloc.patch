From: Jiri Pirko <jiri@nvidia.com>
Date: Mon, 28 Aug 2023 08:16:46 +0200
Subject: devlink: move and rename devlink_dpipe_send_and_alloc_skb() helper
Patch-mainline: v6.6-rc1
Git-commit: 2475ed158c478c624d8fbc8d639d344a960c1ad8
References: jsc#PED-3311

Since both dpipe and resource code is using this helper, in preparation
for code split to separate files, move
devlink_dpipe_send_and_alloc_skb() helper into netlink.c. Rename it on
the way.

Signed-off-by: Jiri Pirko <jiri@nvidia.com>
Link: https://lore.kernel.org/r/20230828061657.300667-5-jiri@resnulli.us
Signed-off-by: Jakub Kicinski <kuba@kernel.org>
Acked-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
---
 net/devlink/devl_internal.h |    2 ++
 net/devlink/leftover.c      |   34 +++++++++-------------------------
 net/devlink/netlink.c       |   15 +++++++++++++++
 3 files changed, 26 insertions(+), 25 deletions(-)

--- a/net/devlink/devl_internal.h
+++ b/net/devlink/devl_internal.h
@@ -150,6 +150,8 @@ devlink_nl_put_handle(struct sk_buff *ms
 	return 0;
 }
 
+int devlink_nl_msg_reply_and_new(struct sk_buff **msg, struct genl_info *info);
+
 /* Notify */
 void devlink_notify(struct devlink *devlink, enum devlink_command cmd);
 void devlink_ports_notify_register(struct devlink *devlink);
--- a/net/devlink/leftover.c
+++ b/net/devlink/leftover.c
@@ -1277,22 +1277,6 @@ nla_put_failure:
 	return -EMSGSIZE;
 }
 
-static int devlink_dpipe_send_and_alloc_skb(struct sk_buff **pskb,
-					    struct genl_info *info)
-{
-	int err;
-
-	if (*pskb) {
-		err = genlmsg_reply(*pskb, info);
-		if (err)
-			return err;
-	}
-	*pskb = genlmsg_new(GENLMSG_DEFAULT_SIZE, GFP_KERNEL);
-	if (!*pskb)
-		return -ENOMEM;
-	return 0;
-}
-
 static int devlink_dpipe_tables_fill(struct genl_info *info,
 				     enum devlink_command cmd, int flags,
 				     struct list_head *dpipe_tables,
@@ -1311,7 +1295,7 @@ static int devlink_dpipe_tables_fill(str
 	table = list_first_entry(dpipe_tables,
 				 struct devlink_dpipe_table, list);
 start_again:
-	err = devlink_dpipe_send_and_alloc_skb(&skb, info);
+	err = devlink_nl_msg_reply_and_new(&skb, info);
 	if (err)
 		return err;
 
@@ -1358,7 +1342,7 @@ send_done:
 	nlh = nlmsg_put(skb, info->snd_portid, info->snd_seq,
 			NLMSG_DONE, 0, flags | NLM_F_MULTI);
 	if (!nlh) {
-		err = devlink_dpipe_send_and_alloc_skb(&skb, info);
+		err = devlink_nl_msg_reply_and_new(&skb, info);
 		if (err)
 			return err;
 		goto send_done;
@@ -1551,8 +1535,8 @@ int devlink_dpipe_entry_ctx_prepare(stru
 	struct devlink *devlink;
 	int err;
 
-	err = devlink_dpipe_send_and_alloc_skb(&dump_ctx->skb,
-					       dump_ctx->info);
+	err = devlink_nl_msg_reply_and_new(&dump_ctx->skb,
+					   dump_ctx->info);
 	if (err)
 		return err;
 
@@ -1638,7 +1622,7 @@ send_done:
 	nlh = nlmsg_put(dump_ctx.skb, info->snd_portid, info->snd_seq,
 			NLMSG_DONE, 0, flags | NLM_F_MULTI);
 	if (!nlh) {
-		err = devlink_dpipe_send_and_alloc_skb(&dump_ctx.skb, info);
+		err = devlink_nl_msg_reply_and_new(&dump_ctx.skb, info);
 		if (err)
 			return err;
 		goto send_done;
@@ -1746,7 +1730,7 @@ static int devlink_dpipe_headers_fill(st
 
 	i = 0;
 start_again:
-	err = devlink_dpipe_send_and_alloc_skb(&skb, info);
+	err = devlink_nl_msg_reply_and_new(&skb, info);
 	if (err)
 		return err;
 
@@ -1782,7 +1766,7 @@ send_done:
 	nlh = nlmsg_put(skb, info->snd_portid, info->snd_seq,
 			NLMSG_DONE, 0, flags | NLM_F_MULTI);
 	if (!nlh) {
-		err = devlink_dpipe_send_and_alloc_skb(&skb, info);
+		err = devlink_nl_msg_reply_and_new(&skb, info);
 		if (err)
 			return err;
 		goto send_done;
@@ -2047,7 +2031,7 @@ static int devlink_resource_fill(struct
 	resource = list_first_entry(&devlink->resource_list,
 				    struct devlink_resource, list);
 start_again:
-	err = devlink_dpipe_send_and_alloc_skb(&skb, info);
+	err = devlink_nl_msg_reply_and_new(&skb, info);
 	if (err)
 		return err;
 
@@ -2086,7 +2070,7 @@ send_done:
 	nlh = nlmsg_put(skb, info->snd_portid, info->snd_seq,
 			NLMSG_DONE, 0, flags | NLM_F_MULTI);
 	if (!nlh) {
-		err = devlink_dpipe_send_and_alloc_skb(&skb, info);
+		err = devlink_nl_msg_reply_and_new(&skb, info);
 		if (err)
 			return err;
 		goto send_done;
--- a/net/devlink/netlink.c
+++ b/net/devlink/netlink.c
@@ -82,6 +82,21 @@ static const struct nla_policy devlink_n
 	[DEVLINK_ATTR_REGION_DIRECT] = { .type = NLA_FLAG },
 };
 
+int devlink_nl_msg_reply_and_new(struct sk_buff **msg, struct genl_info *info)
+{
+	int err;
+
+	if (*msg) {
+		err = genlmsg_reply(*msg, info);
+		if (err)
+			return err;
+	}
+	*msg = genlmsg_new(GENLMSG_DEFAULT_SIZE, GFP_KERNEL);
+	if (!*msg)
+		return -ENOMEM;
+	return 0;
+}
+
 struct devlink *
 devlink_get_from_attrs_lock(struct net *net, struct nlattr **attrs)
 {
