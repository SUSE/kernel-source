From: Dexuan Cui <decui@microsoft.com>
Date: Tue, 17 Oct 2023 23:20:50 +0000
Subject: x86/mm: Print the encryption features correctly when a paravisor is present
Patch-mainline: Never, this change carry until upstream provides better method
References: bsc#1206453

Hyper-V provides two modes for running a TDX/SNP VM:

1) In TD Partitioning mode (TDX) or vTOM mode (SNP) with a paravisor;
2) In "fully enlightened" mode with the normal TDX shared bit or SNP C-bit
   control over page encryption, and no paravisor.

In the first mode (i.e. paravisor mode), the native TDX/SNP CPUID
capability is hidden from the VM, but cc_platform_has(CC_ATTR_MEM_ENCRYPT)
and cc_platform_has(CC_ATTR_GUEST_MEM_ENCRYPT) are true; as a result,
mem_encrypt_init() incorrectly prints the below message when an Intel TDX
VM with a paravisor runs on Hyper-V:
"Memory Encryption Features active: AMD SEV".

Fix this by calling a new function hv_print_mem_enc_feature_info() if
hyperv_paravisor_present is true.

Signed-off-by: Dexuan Cui <decui@microsoft.com>
Acked-by: Olaf Hering <ohering@suse.de>
---
 arch/x86/hyperv/ivm.c     | 10 ++++++++++
 arch/x86/mm/mem_encrypt.c |  8 +++++++-
 2 files changed, 17 insertions(+), 1 deletion(-)

--- a/arch/x86/hyperv/ivm.c
+++ b/arch/x86/hyperv/ivm.c
@@ -574,6 +574,16 @@ static bool hv_is_private_mmio(u64 addr)
 	return false;
 }
 
+void hv_print_mem_enc_feature_info(void)
+{
+	enum hv_isolation_type type = hv_get_isolation_type();
+
+	if (type == HV_ISOLATION_TYPE_SNP)
+		pr_info("Memory Encryption Features active: AMD SEV\n");
+	else if (type == HV_ISOLATION_TYPE_TDX)
+		pr_info("Memory Encryption Features active: Intel TDX\n");
+}
+
 void __init hv_vtom_init(void)
 {
 	enum hv_isolation_type type = hv_get_isolation_type();
--- a/arch/x86/mm/mem_encrypt.c
+++ b/arch/x86/mm/mem_encrypt.c
@@ -76,6 +76,9 @@ static void print_mem_encrypt_feature_in
 	pr_cont("\n");
 }
 
+void hv_print_mem_enc_feature_info(void);
+extern bool hyperv_paravisor_present;
+
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void)
 {
@@ -85,7 +88,10 @@ void __init mem_encrypt_init(void)
 	/* Call into SWIOTLB to update the SWIOTLB DMA buffers */
 	swiotlb_update_mem_attributes();
 
-	print_mem_encrypt_feature_info();
+	if (!hyperv_paravisor_present)
+		print_mem_encrypt_feature_info();
+	else
+		hv_print_mem_enc_feature_info();
 }
 
 int arch_has_restricted_virtio_memory_access(void)
