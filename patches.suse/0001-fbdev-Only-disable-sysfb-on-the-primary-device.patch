From b01329e5ee02ef2524284d6b76a03f604698969f Mon Sep 17 00:00:00 2001
From: Thomas Zimmermann <tzimmermann@suse.com>
Date: Fri, 19 Jan 2024 09:31:27 +0100
Subject: fbdev: Only disable sysfb on the primary device
Patch-mainline: Never, SLE-specific workaround
References: bsc#1216441

Sysfb only operates on the primary display device. Never touch its
state when handling non-primary devices. Detect the primary VGA device
with vgaarb.

Signed-off-by: Thomas Zimmermann <tzimmermann@suse.com>
Acked-by: Thomas Zimmermann <tzimmermann@suse.com>
---
 drivers/video/fbdev/core/fbmem.c | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/drivers/video/fbdev/core/fbmem.c b/drivers/video/fbdev/core/fbmem.c
index fd2026e7980bc..91b9647fa381f 100644
--- a/drivers/video/fbdev/core/fbmem.c
+++ b/drivers/video/fbdev/core/fbmem.c
@@ -37,6 +37,7 @@
 #include <linux/fbcon.h>
 #include <linux/mem_encrypt.h>
 #include <linux/pci.h>
+#include <linux/vgaarb.h>
 
 #include <asm/fb.h>
 
@@ -1792,7 +1793,8 @@ int remove_conflicting_framebuffers(struct apertures_struct *a,
 	 * ask for this, so let's assume that a real driver for the display
 	 * was already probed and prevent sysfb to register devices later.
 	 */
-	sysfb_disable();
+	if (primary)
+		sysfb_disable();
 
 	mutex_lock(&registration_lock);
 	do_remove_conflicting_framebuffers(a, name, primary);
@@ -1843,10 +1845,8 @@ int remove_conflicting_pci_framebuffers(struct pci_dev *pdev, const char *name)
 		idx++;
 	}
 
-#ifdef CONFIG_X86
-	primary = pdev->resource[PCI_ROM_RESOURCE].flags &
-					IORESOURCE_ROM_SHADOW;
-#endif
+	if (vga_default_device() == pdev)
+		primary = true;
 	err = remove_conflicting_framebuffers(ap, name, primary);
 	kfree(ap);
 	return err;
-- 
2.43.0

