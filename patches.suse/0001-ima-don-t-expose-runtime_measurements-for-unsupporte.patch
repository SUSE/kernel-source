From 857a1108b3c8a5f85d3a737f5a752ad29b1ce304 Mon Sep 17 00:00:00 2001
From: Nicolai Stange <nstange@suse.de>
Date: Mon, 21 Apr 2025 16:41:25 +0200
References: jsc#PED-12225
Patch-mainline: Submitted, RFC v2 security ML 2025-03-23, about to submit v3
Subject: [PATCH 1/9] ima: don't expose runtime_measurements for unsupported
 hashes

IMA creates one runtime_measurements_<hash-algo> sysfs file for every TPM
bank + for SHA1 if not covered by any such. These differ only in that the
template hash value for each record is of the file's associated algorithm
each.

The kernel does not necessarily support each hash algorithm associated
with some TPM bank though -- even if some hash algorithm is built-in, its
instantiation can still fail at runtime. Note that hash instantiations
for built-in implementations don't commonly fail in practice though,
except for with "unapproved" algorithms when booted in FIPS mode, where
-ENOENT would get returned by the crypto API for those.

If that happened to be the case, IMA would resort to substituting a padded
SHA1 digest for the unsupported template hash as a fallback mechanism,
both for the respective sysfs runtime_measurements_<hash-algo> file as
well as for the extension of the associated TPM PCR bank. For example if
SHA256 was unavailable at IMA init time, runtime_measurements_sha256
would contain SHA1 template hashes padded to the SHA256 digest length of
32 bytes.

Of course, this fallback scheme relies on the assumption that a working
SHA1 implementation would always be available at runtime. For FIPS setups,
that's going to change though, as NIST announced to sunset it and the
crypto API will have to return -ENOENT for any attempts to use it in the
not so distant future.

So some alternative solution for handling unavailable hash algorithm
needs to get implemented for both, the runtime_measurements_* sysfs
files as well as for the TPM PCR extensions. Start out by addressing
the sysfs files. Rather than falling back to some other fixed fallback
substitute hash -- e.g. SHA256 might seem a good candidate nowadays --
avoid any additional guesswork at the userspace side and simply don't
expose any template hashes for unavailable algorithms at all.

So, do not create runtime_measurements_<hash-algo> sysfs files for
unsupported hash algorithms. Likewise for their ascii counterparts.

Note that at this point, SHA-1 is still mandatory, and thus,
runtime_measurements_sha1 as well as the "runtime_measurements" will
remain there, even though the code has provisions already to skip their
creation in case SHA-1 was unavailable.

Signed-off-by: Nicolai Stange <nstange@suse.de>
---
 security/integrity/ima/ima_fs.c |   37 +++++++++++++++++++++++--------------
 1 file changed, 23 insertions(+), 14 deletions(-)

--- a/security/integrity/ima/ima_fs.c
+++ b/security/integrity/ima/ima_fs.c
@@ -454,6 +454,9 @@ static int __init create_securityfs_meas
 		return -ENOMEM;
 
 	for (i = 0; i < securityfs_measurement_list_count; i++) {
+		if (!ima_algo_array[i].tfm)
+			continue;
+
 		algo = ima_algo_array[i].algo;
 
 		sprintf(file_name, "ascii_runtime_measurements_%s",
@@ -573,20 +576,26 @@ int __init ima_fs_init(void)
 	if (ret != 0)
 		goto out;
 
-	binary_runtime_measurements =
-	    securityfs_create_symlink("binary_runtime_measurements", ima_dir,
-				      "binary_runtime_measurements_sha1", NULL);
-	if (IS_ERR(binary_runtime_measurements)) {
-		ret = PTR_ERR(binary_runtime_measurements);
-		goto out;
-	}
-
-	ascii_runtime_measurements =
-	    securityfs_create_symlink("ascii_runtime_measurements", ima_dir,
-				      "ascii_runtime_measurements_sha1", NULL);
-	if (IS_ERR(ascii_runtime_measurements)) {
-		ret = PTR_ERR(ascii_runtime_measurements);
-		goto out;
+	if (ima_algo_array[ima_sha1_idx].tfm) {
+		binary_runtime_measurements =
+		    securityfs_create_symlink("binary_runtime_measurements",
+					      ima_dir,
+					      "binary_runtime_measurements_sha1",
+					      NULL);
+		if (IS_ERR(binary_runtime_measurements)) {
+			ret = PTR_ERR(binary_runtime_measurements);
+			goto out;
+		}
+
+		ascii_runtime_measurements =
+		    securityfs_create_symlink("ascii_runtime_measurements",
+					      ima_dir,
+					      "ascii_runtime_measurements_sha1",
+					      NULL);
+		if (IS_ERR(ascii_runtime_measurements)) {
+			ret = PTR_ERR(ascii_runtime_measurements);
+			goto out;
+		}
 	}
 
 	runtime_measurements_count =
