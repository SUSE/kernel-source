From: Song Liu <songliubraving@fb.com>
Date: Fri, 22 Oct 2021 16:48:14 -0700
Subject: selftests/bpf: Guess function end for test_get_branch_snapshot
Patch-mainline: v5.16-rc1
Git-commit: 20d1b54a52bd9a1d5d23a45dab75993ce2f1d617
References: jsc#PED-1377

Function in modules could appear in /proc/kallsyms in random order.

ffffffffa02608a0 t bpf_testmod_loop_test
ffffffffa02600c0 t __traceiter_bpf_testmod_test_writable_bare
ffffffffa0263b60 d __tracepoint_bpf_testmod_test_write_bare
ffffffffa02608c0 T bpf_testmod_test_read
ffffffffa0260d08 t __SCT__tp_func_bpf_testmod_test_writable_bare
ffffffffa0263300 d __SCK__tp_func_bpf_testmod_test_read
ffffffffa0260680 T bpf_testmod_test_write
ffffffffa0260860 t bpf_testmod_test_mod_kfunc

Therefore, we cannot reliably use kallsyms_find_next() to find the end of
a function. Replace it with a simple guess (start + 128). This is good
enough for this test.

Signed-off-by: Song Liu <songliubraving@fb.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20211022234814.318457-1-songliubraving@fb.com
Acked-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
---
 tools/testing/selftests/bpf/prog_tests/get_branch_snapshot.c |    7 +-
 tools/testing/selftests/bpf/trace_helpers.c                  |   36 -----------
 tools/testing/selftests/bpf/trace_helpers.h                  |    5 -
 3 files changed, 4 insertions(+), 44 deletions(-)

--- a/tools/testing/selftests/bpf/prog_tests/get_branch_snapshot.c
+++ b/tools/testing/selftests/bpf/prog_tests/get_branch_snapshot.c
@@ -97,9 +97,10 @@ void serial_test_get_branch_snapshot(voi
 	if (!ASSERT_OK(err, "kallsyms_find"))
 		goto cleanup;
 
-	err = kallsyms_find_next("bpf_testmod_loop_test", &skel->bss->address_high);
-	if (!ASSERT_OK(err, "kallsyms_find_next"))
-		goto cleanup;
+	/* Just a guess for the end of this function, as module functions
+	 * in /proc/kallsyms could come in any order.
+	 */
+	skel->bss->address_high = skel->bss->address_low + 128;
 
 	err = get_branch_snapshot__attach(skel);
 	if (!ASSERT_OK(err, "get_branch_snapshot__attach"))
--- a/tools/testing/selftests/bpf/trace_helpers.c
+++ b/tools/testing/selftests/bpf/trace_helpers.c
@@ -118,42 +118,6 @@ out:
 	return err;
 }
 
-/* find the address of the next symbol of the same type, this can be used
- * to determine the end of a function.
- */
-int kallsyms_find_next(const char *sym, unsigned long long *addr)
-{
-	char type, found_type, name[500];
-	unsigned long long value;
-	bool found = false;
-	int err = 0;
-	FILE *f;
-
-	f = fopen("/proc/kallsyms", "r");
-	if (!f)
-		return -EINVAL;
-
-	while (fscanf(f, "%llx %c %499s%*[^\n]\n", &value, &type, name) > 0) {
-		/* Different types of symbols in kernel modules are mixed
-		 * in /proc/kallsyms. Only return the next matching type.
-		 * Use tolower() for type so that 'T' matches 't'.
-		 */
-		if (found && found_type == tolower(type)) {
-			*addr = value;
-			goto out;
-		}
-		if (strcmp(name, sym) == 0) {
-			found = true;
-			found_type = tolower(type);
-		}
-	}
-	err = -ENOENT;
-
-out:
-	fclose(f);
-	return err;
-}
-
 void read_trace_pipe(void)
 {
 	int trace_fd;
--- a/tools/testing/selftests/bpf/trace_helpers.h
+++ b/tools/testing/selftests/bpf/trace_helpers.h
@@ -16,11 +16,6 @@ long ksym_get_addr(const char *name);
 /* open kallsyms and find addresses on the fly, faster than load + search. */
 int kallsyms_find(const char *sym, unsigned long long *addr);
 
-/* find the address of the next symbol, this can be used to determine the
- * end of a function
- */
-int kallsyms_find_next(const char *sym, unsigned long long *addr);
-
 void read_trace_pipe(void);
 
 ssize_t get_uprobe_offset(const void *addr, ssize_t base);
