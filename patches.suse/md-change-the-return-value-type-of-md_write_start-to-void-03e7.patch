From 03e792eaf18ec2e93e2c623f9f1a4bdb97fe4126 Mon Sep 17 00:00:00 2001
From: Li Nan <linan122@huawei.com>
Date: Sun, 26 May 2024 02:52:56 +0800
Subject: [PATCH] md: change the return value type of md_write_start to void
Git-commit: 03e792eaf18ec2e93e2c623f9f1a4bdb97fe4126
Patch-mainline: v6.11-rc1
References: git-fixes

Commit cc27b0c78c79 ("md: fix deadlock between mddev_suspend() and
md_write_start()") aborted md_write_start() with false when mddev is
suspended, which fixed a deadlock if calling mddev_suspend() with
holding reconfig_mutex(). Since mddev_suspend() now includes
lockdep_assert_not_held(), it no longer holds the reconfig_mutex. This
makes previous abort unnecessary. Now, remove unnecessary abort and
change function return value to void.

(Coly Li: rebased for Linux 6.4 based SUSE kernel)

Signed-off-by: Li Nan <linan122@huawei.com>
Reviewed-by: Yu Kuai <yukuai3@huawei.com>
Signed-off-by: Song Liu <song@kernel.org>
Link: https://lore.kernel.org/r/20240525185257.3896201-2-linan666@huaweicloud.com
Signed-off-by: Coly Li <colyli@suse.de>

---
 drivers/md/md.c     |   20 ++++++++++----------
 drivers/md/raid1.c  |    3 +--
 drivers/md/raid10.c |    3 +--
 drivers/md/raid5.c  |    3 +--
 4 files changed, 13 insertions(+), 16 deletions(-)

--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@ -8657,12 +8657,12 @@ EXPORT_SYMBOL(md_done_sync);
  * A return value of 'false' means that the write wasn't recorded
  * and cannot proceed as the array is being suspend.
  */
-bool md_write_start(struct mddev *mddev, struct bio *bi)
+void _md_write_start(struct mddev *mddev, struct bio *bi)
 {
 	int did_change = 0;
 
 	if (bio_data_dir(bi) != WRITE)
-		return true;
+		return;
 
 	BUG_ON(mddev->ro == MD_RDONLY);
 	if (mddev->ro == MD_AUTO_READ) {
@@ -8695,14 +8695,14 @@ bool md_write_start(struct mddev *mddev,
 	if (did_change)
 		sysfs_notify_dirent_safe(mddev->sysfs_state);
 	if (!mddev->has_superblocks)
-		return true;
+		return;
 	wait_event(mddev->sb_wait,
-		   !test_bit(MD_SB_CHANGE_PENDING, &mddev->sb_flags) ||
-		   is_md_suspended(mddev));
-	if (test_bit(MD_SB_CHANGE_PENDING, &mddev->sb_flags)) {
-		percpu_ref_put(&mddev->writes_pending);
-		return false;
-	}
+		   !test_bit(MD_SB_CHANGE_PENDING, &mddev->sb_flags));
+}
+
+bool md_write_start(struct mddev *mddev, struct bio *bi)
+{
+	_md_write_start(mddev, bi);
 	return true;
 }
 EXPORT_SYMBOL(md_write_start);
--- a/drivers/md/raid1.c
+++ b/drivers/md/raid1.c
@@ -1695,8 +1695,7 @@ static bool raid1_make_request(struct md
 	if (bio_data_dir(bio) == READ)
 		raid1_read_request(mddev, bio, sectors, NULL);
 	else {
-		if (!md_write_start(mddev,bio))
-			return false;
+		md_write_start(mddev,bio);
 		raid1_write_request(mddev, bio, sectors);
 	}
 	return true;
--- a/drivers/md/raid10.c
+++ b/drivers/md/raid10.c
@@ -1846,8 +1846,7 @@ static bool raid10_make_request(struct m
 	    && md_flush_request(mddev, bio))
 		return true;
 
-	if (!md_write_start(mddev, bio))
-		return false;
+	md_write_start(mddev, bio);
 
 	if (unlikely(bio_op(bio) == REQ_OP_DISCARD))
 		if (!raid10_handle_discard(mddev, bio))
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@ -6105,8 +6105,7 @@ static bool raid5_make_request(struct md
 		ctx.do_flush = bi->bi_opf & REQ_PREFLUSH;
 	}
 
-	if (!md_write_start(mddev, bi))
-		return false;
+	md_write_start(mddev, bi);
 	/*
 	 * If array is degraded, better not do chunk aligned read because
 	 * later we might have to read it again in order to reconstruct
