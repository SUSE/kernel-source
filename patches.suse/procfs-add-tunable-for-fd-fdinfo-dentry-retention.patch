From 723f449add198ece9539cd1693e36a99fc9ec527 Mon Sep 17 00:00:00 2001
From: Jeff Mahoney <jeffm@suse.com>
Date: Tue, 26 Jun 2018 13:51:20 -0500
Subject: [PATCH] procfs: add tunable for fd/fdinfo dentry retention
Patch-mainline: Never, should be https://lkml.org/lkml/2018/4/23/1148
References: bsc#1086652


With a test workload of 4096 threads and 16384 files opened, a simple
find /proc can create about 268 million dentry/inode pairs just to
handle the "fd" and "fdinfo" files.  This is due to every thread
in the /proc/tgid/task directory having its own copy of fd and fdinfo.

On smaller systems, we never have 268M dentry/inode pairs in memory
since memory pressure forces most of them to be dropped.  That same
pressure will force writeback and real file system dentries and inodes
to be dropped as well.  On large memory systems with many CPU cores,
the full 268M dentry/inode pairs can fit into memory at once and
when a large multithreaded task exits, we can hit soft lockups or
the system can become otherwise unresponsive for minutes at a time.

The right fix for this is to eliminate all the duplicate entries but
that is a change that needs discussion.  For now, we can provide a
workaround that limits the exposure to the largest contingent of
proc files: fd and fdinfo.

Usually, we'll only drop procfs dentries immediately when the task
has exited.  This patch adds a sysctl, procfs-drop-fd-dentries, that
deletes the dentries for fd and fdinfo directories immediately, which
also releases the inodes.  The result is that the count never climbs
above a few hundred thousand procfs files and large multithreaded
tasks can exit without causing undue load on the system.

Signed-off-by: Jeff Mahoney <jeffm@suse.com>
---
 Documentation/admin-guide/sysctl/fs.rst |   36 ++++++++++++++++++++++++++++++++
 fs/proc/fd.c                            |   36 +++++++++++++++++++++++++++++++-
 2 files changed, 71 insertions(+), 1 deletion(-)

--- a/Documentation/admin-guide/sysctl/fs.rst
+++ b/Documentation/admin-guide/sysctl/fs.rst
@@ -167,6 +167,42 @@ allocate up to 1024 pipes at their defau
 applied.
 
 
+procfs-drop-fd-dentries
+-----------------------
+
+* SUSE-specific; This option may be removed in a future release.
+
+This option controls when the proc files representing a task's
+opene files are removed.  It applies to the following directories:
+- /proc/pid/fd
+- /proc/pid/fdinfo
+- /proc/pid/task/*/fd
+- /proc/pid/task/*/fdinfo
+
+By default, dentries belonging to tasks that are still running
+will be retained and those belonging to exited tasks will be
+dropped immediately.
+
+This policy ensures that memory is not wasted, but can run into
+scalability issues on very large systems when a task with thousands
+of threads and many open files exits.  When many tasks exit
+simultaneously, substantial contention on the global inode spinlock
+may result in suboptimal performance of the system until the inodes
+are released.
+
+When set to "0" (default), the policy is to retain dentries for running
+tasks and delete dentries from tasks which have exited immediately.  Once
+the dentry is released, the inode will be freed immediately.
+
+When set to "1", the policy is to delete the dentries immediately after
+the last reference is dropped.  Once the dentry is released, the inode
+will be freed immediately.  This ensures that the thread which created
+the inodes will also clean them up, eliminating much of the lock
+contention.  The tradeoff is that frequent use of fd/fdinfo will be
+slower as these files will need to be recreated each time they
+are accessed.
+
+
 protected_fifos
 ---------------
 
--- a/fs/proc/fd.c
+++ b/fs/proc/fd.c
@@ -13,6 +13,7 @@
 #include <linux/seq_file.h>
 #include <linux/fs.h>
 #include <linux/filelock.h>
+#include <linux/sysctl.h>
 
 #include <linux/proc_fs.h>
 
@@ -20,6 +21,30 @@
 #include "internal.h"
 #include "fd.h"
 
+static int procfs_drop_fd_dentries = 0;
+
+#ifdef CONFIG_SYSCTL
+static struct ctl_table proc_fd_sysctls[] = {
+	{
+		.procname	= "procfs-drop-fd-dentries",
+		.data		= &procfs_drop_fd_dentries,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec_minmax,
+		.extra1		= SYSCTL_ZERO,
+		.extra2		= SYSCTL_ONE,
+	},
+	{ }
+};
+
+static int __init init_proc_fd_sysctls(void)
+{
+	register_sysctl_init("fs", proc_fd_sysctls);
+	return 0;
+}
+fs_initcall(init_proc_fd_sysctls);
+#endif
+
 static int seq_show(struct seq_file *m, void *v)
 {
 	struct files_struct *files = NULL;
@@ -161,9 +186,18 @@ static int tid_fd_revalidate(struct dent
 	return 0;
 }
 
+static int tid_fd_delete_dentry(const struct dentry *dentry)
+{
+	/* Always delete immediately */
+	if (procfs_drop_fd_dentries)
+		return 1;
+
+	return pid_delete_dentry(dentry);
+}
+
 static const struct dentry_operations tid_fd_dentry_operations = {
 	.d_revalidate	= tid_fd_revalidate,
-	.d_delete	= pid_delete_dentry,
+	.d_delete	= tid_fd_delete_dentry,
 };
 
 static int proc_fd_link(struct dentry *dentry, struct path *path)
