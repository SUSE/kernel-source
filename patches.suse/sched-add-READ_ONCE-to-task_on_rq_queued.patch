From 5f6f76b3a021d8b3f613b278f78eaf86d7fc5b30 Mon Sep 17 00:00:00 2001
From: Harshit Agarwal <harshit@nutanix.com>
Date: Thu, 14 Nov 2024 14:08:11 -0700
Subject: [PATCH] sched: add READ_ONCE to task_on_rq_queued

References: bsc#1234634 (Scheduler functional and performance backports)
Git-commit: 59297e2093ceced86393a059a4bd36802311f7bb
Patch-mainline: v6.14-rc1

task_on_rq_queued read p->on_rq without READ_ONCE, though p->on_rq is
set with WRITE_ONCE in {activate|deactivate}_task and smp_store_release
in __block_task, and also read with READ_ONCE in task_on_rq_migrating.

Make all of these accesses pair together by adding READ_ONCE in the
task_on_rq_queued.

Signed-off-by: Harshit Agarwal <harshit@nutanix.com>
Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Reviewed-by: Phil Auld <pauld@redhat.com>
Link: https://lkml.kernel.org/r/20241114210812.1836587-1-jon@nutanix.com
Signed-off-by: Mel Gorman <mgorman@suse.de>
---
 kernel/sched/sched.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index c5d67a43fe52..51feda5542d4 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -2280,7 +2280,7 @@ static inline int task_on_cpu(struct rq *rq, struct task_struct *p)
 
 static inline int task_on_rq_queued(struct task_struct *p)
 {
-	return p->on_rq == TASK_ON_RQ_QUEUED;
+	return READ_ONCE(p->on_rq) == TASK_ON_RQ_QUEUED;
 }
 
 static inline int task_on_rq_migrating(struct task_struct *p)
