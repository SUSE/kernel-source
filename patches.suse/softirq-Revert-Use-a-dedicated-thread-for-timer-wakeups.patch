From e460f7bd3767da531a5abc51b8835c468cf0bd03 Mon Sep 17 00:00:00 2001
From: Mel Gorman <mgorman@techsingularity.net>
Date: Thu, 31 Mar 2022 12:03:00 +0100
Subject: [PATCH] softirq: Revert "Use a dedicated thread for timer wakeups"

References: bnc#1197720, SLE Realtime Extention
Patch-mainline: Never, needs to be fixed in upstream 5.17-rc15 properly

Both SLE 15 SP4 RT and upstream 5.17-rt15 fail the TREE04 r rcutorture test
with PREEMPT_RT enabled and the root cause appears to be c5440d9e6805
("softirq: Use a dedicated thread for timer wakeups."). The minimal
reproducer requires the following patch to build the kernel and run the
test as PREEMPT_RT.

Until upstream has a solution, temporarily revert the relevant patch as
a workaround.

On rotom, reproduction steps were

# Using defconfig
$ tools/testing/selftests/rcutorture/bin/kvm.sh --cpus 8 --configs TREE04 --kconfig "CONFIG_SUSE_VERSION=15 CONFIG_SUSE_PATCHLEVEL=4 CONFIG_PREEMPT_DYNAMIC=n CONFIG_EXPERT=y CONFIG_PREEMPT_NONE=y CONFIG_PREEMPT_VOLUNTARY=n CONFIG_PREEMPT=n CONFIG_PREEMPT_RT=y CONFIG_PREEMPT_RCU=y CONFIG_RCU_BOOST=y CONFIG_RT_GROUP_SCHED=n CONFIG_BCACHE=n CONFIG_PREEMPT_TRACER=n CONFIG_DEBUG_PREEMPT=y"

# Using SLE 15 SP4 RT config
$ config-getconfig SLE15-SP4-RT
$ rm tools/testing/selftests/rcutorture/configs/rcu/TREE04
$ touch tools/testing/selftests/rcutorture/configs/rcu/TREE04
$ tools/testing/selftests/rcutorture/bin/kvm.sh --defconfig oldconfig --cpus 8 --configs TREE04 --kconfig "CONFIG_SUSE_VERSION=15 CONFIG_SUSE_PATCHLEVEL=4 CONFIG_PREEMPT_DYNAMIC=n CONFIG_EXPERT=y CONFIG_PREEMPT_NONE=y CONFIG_PREEMPT_VOLUNTARY=n CONFIG_PREEMPT=n CONFIG_PREEMPT_RT=y CONFIG_PREEMPT_RCU=y CONFIG_RCU_BOOST=y CONFIG_RT_GROUP_SCHED=n CONFIG_BCACHE=n CONFIG_PREEMPT_TRACER=n CONFIG_DEBUG_PREEMPT=y"


Signed-off-by: Mel Gorman <mgorman@suse.de>
---
 include/linux/interrupt.h | 16 ----------
 kernel/softirq.c          | 76 -----------------------------------------------
 kernel/time/hrtimer.c     |  4 +--
 kernel/time/timer.c       |  2 +-
 4 files changed, 3 insertions(+), 95 deletions(-)

diff --git a/include/linux/interrupt.h b/include/linux/interrupt.h
index 9c35024be942..1f22a30c0963 100644
--- a/include/linux/interrupt.h
+++ b/include/linux/interrupt.h
@@ -554,22 +554,6 @@ extern void __raise_softirq_irqoff(unsigned int nr);
 extern void raise_softirq_irqoff(unsigned int nr);
 extern void raise_softirq(unsigned int nr);
 
-#ifdef CONFIG_PREEMPT_RT
-extern void raise_timer_softirq(void);
-extern void raise_hrtimer_softirq(void);
-
-#else
-static inline void raise_timer_softirq(void)
-{
-	raise_softirq(TIMER_SOFTIRQ);
-}
-
-static inline void raise_hrtimer_softirq(void)
-{
-	raise_softirq_irqoff(HRTIMER_SOFTIRQ);
-}
-#endif
-
 DECLARE_PER_CPU(struct task_struct *, ksoftirqd);
 
 static inline struct task_struct *this_cpu_ksoftirqd(void)
diff --git a/kernel/softirq.c b/kernel/softirq.c
index 0d1cc191e4f4..322b65d45676 100644
--- a/kernel/softirq.c
+++ b/kernel/softirq.c
@@ -623,22 +623,6 @@ static inline void tick_irq_exit(void)
 #endif
 }
 
-static DEFINE_PER_CPU(struct task_struct *, timersd);
-static DEFINE_PER_CPU(unsigned long, pending_timer_softirq);
-
-static unsigned int local_pending_timers(void)
-{
-        return __this_cpu_read(pending_timer_softirq);
-}
-
-static void wake_timersd(void)
-{
-        struct task_struct *tsk = __this_cpu_read(timersd);
-
-        if (tsk)
-                wake_up_process(tsk);
-}
-
 static inline void __irq_exit_rcu(void)
 {
 #ifndef __ARCH_IRQ_EXIT_IRQS_DISABLED
@@ -650,8 +634,6 @@ static inline void __irq_exit_rcu(void)
 	preempt_count_sub(HARDIRQ_OFFSET);
 	if (!in_interrupt() && local_softirq_pending())
 		invoke_softirq();
-	if (IS_ENABLED(CONFIG_PREEMPT_RT) && !in_interrupt() && local_pending_timers())
-		wake_timersd();
 
 	tick_irq_exit();
 }
@@ -980,69 +962,11 @@ static struct smp_hotplug_thread softirq_threads = {
 	.thread_comm		= "ksoftirqd/%u",
 };
 
-static void timersd_setup(unsigned int cpu)
-{
-        sched_set_fifo_low(current);
-}
-
-static int timersd_should_run(unsigned int cpu)
-{
-        return local_pending_timers();
-}
-
-static void run_timersd(unsigned int cpu)
-{
-	unsigned int timer_si;
-
-	ksoftirqd_run_begin();
-
-	timer_si = local_pending_timers();
-	__this_cpu_write(pending_timer_softirq, 0);
-	or_softirq_pending(timer_si);
-
-	__do_softirq();
-
-	ksoftirqd_run_end();
-}
-
-#ifdef CONFIG_PREEMPT_RT
-static void raise_ktimers_thread(unsigned int nr)
-{
-	trace_softirq_raise(nr);
-	__this_cpu_or(pending_timer_softirq, 1 << nr);
-}
-
-void raise_hrtimer_softirq(void)
-{
-	raise_ktimers_thread(HRTIMER_SOFTIRQ);
-}
-
-void raise_timer_softirq(void)
-{
-	unsigned long flags;
-
-	local_irq_save(flags);
-	raise_ktimers_thread(TIMER_SOFTIRQ);
-	wake_timersd();
-	local_irq_restore(flags);
-}
-#endif
-
-static struct smp_hotplug_thread timer_threads = {
-        .store                  = &timersd,
-        .setup                  = timersd_setup,
-        .thread_should_run      = timersd_should_run,
-        .thread_fn              = run_timersd,
-        .thread_comm            = "ktimers/%u",
-};
-
 static __init int spawn_ksoftirqd(void)
 {
 	cpuhp_setup_state_nocalls(CPUHP_SOFTIRQ_DEAD, "softirq:dead", NULL,
 				  takeover_tasklets);
 	BUG_ON(smpboot_register_percpu_thread(&softirq_threads));
-	if (IS_ENABLED(CONFIG_PREEMPT_RT))
-		BUG_ON(smpboot_register_percpu_thread(&timer_threads));
 
 	return 0;
 }
diff --git a/kernel/time/hrtimer.c b/kernel/time/hrtimer.c
index dead5e738ecf..0ea8702eb516 100644
--- a/kernel/time/hrtimer.c
+++ b/kernel/time/hrtimer.c
@@ -1805,7 +1805,7 @@ void hrtimer_interrupt(struct clock_event_device *dev)
 	if (!ktime_before(now, cpu_base->softirq_expires_next)) {
 		cpu_base->softirq_expires_next = KTIME_MAX;
 		cpu_base->softirq_activated = 1;
-		raise_hrtimer_softirq();
+		raise_softirq_irqoff(HRTIMER_SOFTIRQ);
 	}
 
 	__hrtimer_run_queues(cpu_base, now, flags, HRTIMER_ACTIVE_HARD);
@@ -1918,7 +1918,7 @@ void hrtimer_run_queues(void)
 	if (!ktime_before(now, cpu_base->softirq_expires_next)) {
 		cpu_base->softirq_expires_next = KTIME_MAX;
 		cpu_base->softirq_activated = 1;
-		raise_hrtimer_softirq();
+		raise_softirq_irqoff(HRTIMER_SOFTIRQ);
 	}
 
 	__hrtimer_run_queues(cpu_base, now, flags, HRTIMER_ACTIVE_HARD);
diff --git a/kernel/time/timer.c b/kernel/time/timer.c
index b276c34690fa..e3d2c23c413d 100644
--- a/kernel/time/timer.c
+++ b/kernel/time/timer.c
@@ -1766,7 +1766,7 @@ static void run_local_timers(void)
 		if (time_before(jiffies, base->next_expiry))
 			return;
 	}
-	raise_timer_softirq();
+	raise_softirq(TIMER_SOFTIRQ);
 }
 
 /*
