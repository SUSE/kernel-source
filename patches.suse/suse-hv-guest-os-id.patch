From: "ohering@suse.de" <ohering@suse.de>
Subject: hv: set guest os id
Patch-mainline: Never, this change carry until upstream provides better method
References: bsc#814005, bsc#1189965

Give the host more detailed info about the running guest.
Provide the guest OS id.

Per the Hyper-V TLFS, the guest OS ID is required to be set before
performing any Hyper-V related operations such as making hypercalls.
The guest OS ID is not consumed anywhere within the Linux guest OS.
There are a few situations where Hyper-V looks at the value of the
guest OS ID and makes decisions about its behavior.  The decisions
could be based on whether the flag is set to indicate an open source
operating system vs. Windows.  In the specific case where the open
source operating system is Linux, there is a Hyper-V behavior that is
based on the Linux kernel version that is included in the guest OS ID.
Hyper-V tries to avoid making decisions on info in the guest OS ID,
but there are a few cases where correctly supporting certain old Linux
kernel versions has been problematic without such a dependency.

There is a subfield in the guest OS ID to allow a distro to be
specifically identified.  That's what this patch does -- it codes the
subfield to indicate "SUSE".  This kind of change obviously won't go
upstream, and we never did come up with a better scheme for setting
the subfield on a per-distro basis.

There is internal Microsoft telemetry based on the guest OS ID.  In
the kernel panic path, the guest OS ID value is recorded and logged by
Hyper-V, and it is useful to be able to know the distro that was
running, independent of the kernel version number.

Acked-by: Olaf Hering <ohering@suse.de>
---
 arch/x86/hyperv/hv_init.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

--- a/arch/x86/hyperv/hv_init.c
+++ b/arch/x86/hyperv/hv_init.c
@@ -325,6 +325,8 @@ void __init hyperv_init(void)
 	u64 guest_id, required_msrs;
 	union hv_x64_msr_hypercall_contents hypercall_msr;
 	int cpuhp, i;
+	__u8 d1 = 0x10; /* SUSE */
+	__u16 d2 = 0x0; /* -d of a.b.c-d */
 
 	if (x86_hyper_type != X86_HYPER_MS_HYPERV)
 		return;
@@ -372,7 +374,7 @@ void __init hyperv_init(void)
 	 * 1. Register the guest ID
 	 * 2. Enable the hypercall and register the hypercall page
 	 */
-	guest_id = generate_guest_id(0, LINUX_VERSION_CODE, 0);
+	guest_id = generate_guest_id(d1, LINUX_VERSION_CODE, d2);
 	wrmsrl(HV_X64_MSR_GUEST_OS_ID, guest_id);
 
 	hv_hypercall_pg = __vmalloc_node_range(PAGE_SIZE, 1, VMALLOC_START,
