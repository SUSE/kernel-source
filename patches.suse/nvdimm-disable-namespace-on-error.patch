From cc71b3dc359371749bbf3dee905bdd9b038f2d17 Mon Sep 17 00:00:00 2001
From: Hannes Reinecke <hare@suse.de>
Date: Thu, 19 Mar 2020 12:00:55 +0100
Subject: [PATCH] nvdimm: disable namespace on error
Patch-mainline: Never, in-house usage only.
References: bsc#1166486

Fixup all error paths to correctly disable any enabled namespace
before returning.

Signed-off-by: Hannes Reinecke <hare@suse.de>
Acked-by: Coly Li <colyli@suse.de>
---
 drivers/dax/pmem/core.c   |    2 +-
 drivers/nvdimm/btt.c      |    5 ++++-
 drivers/nvdimm/claim.c    |   12 ++++++++++--
 drivers/nvdimm/pfn_devs.c |    1 +
 drivers/nvdimm/pmem.c     |   31 ++++++++++++++++++++-----------
 5 files changed, 36 insertions(+), 15 deletions(-)

--- a/drivers/dax/pmem/core.c
+++ b/drivers/dax/pmem/core.c
@@ -32,9 +32,9 @@ struct dev_dax *__dax_pmem_probe(struct
 	if (rc)
 		return ERR_PTR(rc);
 	rc = nvdimm_setup_pfn(nd_pfn, &pgmap);
+	devm_namespace_disable(dev, ndns);
 	if (rc)
 		return ERR_PTR(rc);
-	devm_namespace_disable(dev, ndns);
 
 	/* reserve the metadata area, device-dax will reserve the data */
 	pfn_sb = nd_pfn->pfn_sb;
--- a/drivers/nvdimm/btt.c
+++ b/drivers/nvdimm/btt.c
@@ -1694,13 +1694,16 @@ int nvdimm_namespace_attach_btt(struct n
 		dev_dbg(&nd_btt->dev, "%s must be at least %ld bytes\n",
 				dev_name(&ndns->dev),
 				ARENA_MIN_SIZE + nd_btt->initial_offset);
+		devm_namespace_disable(&nd_btt->dev, ndns);
 		return -ENXIO;
 	}
 	nd_region = to_nd_region(nd_btt->dev.parent);
 	btt = btt_init(nd_btt, rawsize, nd_btt->lbasize, nd_btt->uuid,
 		       nd_region);
-	if (!btt)
+	if (!btt) {
+		devm_namespace_disable(&nd_btt->dev, ndns);
 		return -ENOMEM;
+	}
 	nd_btt->btt = btt;
 
 	return 0;
--- a/drivers/nvdimm/claim.c
+++ b/drivers/nvdimm/claim.c
@@ -309,6 +309,7 @@ int devm_nsio_enable(struct device *dev,
 		.start = nsio->res.start,
 		.end = nsio->res.end,
 	};
+	int ret;
 
 	nsio->size = size;
 	if (!devm_request_mem_region(dev, range.start, size,
@@ -318,14 +319,21 @@ int devm_nsio_enable(struct device *dev,
 	}
 
 	ndns->rw_bytes = nsio_rw_bytes;
-	if (devm_init_badblocks(dev, &nsio->bb))
+	if (devm_init_badblocks(dev, &nsio->bb)) {
+		devm_release_mem_region(dev, range.start, size);
 		return -ENOMEM;
+	}
 	nvdimm_badblocks_populate(to_nd_region(ndns->dev.parent), &nsio->bb,
 			&range);
 
 	nsio->addr = devm_memremap(dev, range.start, size, ARCH_MEMREMAP_PMEM);
+	ret = PTR_ERR_OR_ZERO(nsio->addr);
+	if (ret) {
+		devm_exit_badblocks(dev, &nsio->bb);
+		devm_release_mem_region(dev, range.start, size);
+	}
 
-	return PTR_ERR_OR_ZERO(nsio->addr);
+	return ret;
 }
 
 void devm_nsio_disable(struct device *dev, struct nd_namespace_io *nsio)
--- a/drivers/nvdimm/pfn_devs.c
+++ b/drivers/nvdimm/pfn_devs.c
@@ -410,6 +410,7 @@ static int nd_pfn_clear_memmap_errors(st
 				dev_err(&nd_pfn->dev,
 					"error clearing %x badblocks at %llx\n",
 					num_bad, first_bad);
+				devm_namespace_disable(&nd_pfn->dev, ndns);
 				return rc;
 			}
 		}
--- a/drivers/nvdimm/pmem.c
+++ b/drivers/nvdimm/pmem.c
@@ -373,8 +373,10 @@ static int pmem_attach_disk(struct devic
 	if (is_nd_pfn(dev)) {
 		nd_pfn = to_nd_pfn(dev);
 		rc = nvdimm_setup_pfn(nd_pfn, &pmem->pgmap);
-		if (rc)
+		if (rc) {
+			devm_namespace_disable(dev, ndns);
 			return rc;
+		}
 	}
 
 	/* we're attaching a block device, disable raw namespace access */
@@ -504,8 +506,10 @@ static int nd_pmem_probe(struct device *
 		return ret;
 
 	ret = nd_btt_probe(dev, ndns);
-	if (ret == 0)
-		return -ENXIO;
+	if (ret == 0) {
+		ret = -ENXIO;
+		goto out_disable;
+	}
 
 	/*
 	 * We have two failure conditions here, there is no
@@ -519,21 +523,26 @@ static int nd_pmem_probe(struct device *
 	 * seed.
 	 */
 	ret = nd_pfn_probe(dev, ndns);
-	if (ret == 0)
-		return -ENXIO;
-	else if (ret == -EOPNOTSUPP)
-		return ret;
+	if (ret == 0) {
+		ret = -ENXIO;
+		goto out_disable;
+	} else if (ret == -EOPNOTSUPP)
+		goto out_disable;
 
 	ret = nd_dax_probe(dev, ndns);
-	if (ret == 0)
-		return -ENXIO;
-	else if (ret == -EOPNOTSUPP)
-		return ret;
+	if (ret == 0) {
+		ret = -ENXIO;
+		goto out_disable;
+	} else if (ret == -EOPNOTSUPP)
+		goto out_disable;
 
 	/* probe complete, attach handles namespace enabling */
 	devm_namespace_disable(dev, ndns);
 
 	return pmem_attach_disk(dev, ndns);
+out_disable:
+	devm_namespace_disable(dev, ndns);
+	return ret;
 }
 
 static void nd_pmem_remove(struct device *dev)
