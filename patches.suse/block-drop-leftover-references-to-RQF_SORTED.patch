From: Jean Delvare <jdelvare@suse.de>
Date: Mon, 1 Mar 2021 17:23:25 +0100
Subject: block: Drop leftover references to RQF_SORTED
Git-commit: 5218e12e9f3a324f41c05da4874d76d7ea3677cb
Patch-mainline: v5.12
References: bsc#1182073

Commit a1ce35fa49852db60fc6e268038530be533c5b15 ("block: remove dead
elevator code") removed all users of RQF_SORTED. However it is still
defined, and there is one reference left to it (which in effect is
dead code). Clear it all up.

Backporting notes:
The definition of RQF_SORTED is preserved so as to not break the API.
Instead of removing it, we change the comment, to make it clear that
this flag no longer has any effect.

Signed-off-by: Jean Delvare <jdelvare@suse.de>
Cc: Jens Axboe <axboe@kernel.dk>
Cc: Ming Lei <ming.lei@redhat.com>
Cc: Omar Sandoval <osandov@fb.com>
Cc: Hannes Reinecke <hare@suse.com>
Signed-off-by: Jens Axboe <axboe@kernel.dk>
---
 block/blk-mq-debugfs.c |    1 -
 block/blk-mq-sched.c   |    6 +-----
 include/linux/blkdev.h |    2 +-
 3 files changed, 2 insertions(+), 7 deletions(-)

--- a/block/blk-mq-debugfs.c
+++ b/block/blk-mq-debugfs.c
@@ -290,7 +290,6 @@ static const char *const cmd_flag_name[]
 
 #define RQF_NAME(name) [ilog2((__force u32)RQF_##name)] = #name
 static const char *const rqf_name[] = {
-	RQF_NAME(SORTED),
 	RQF_NAME(STARTED),
 	RQF_NAME(SOFTBARRIER),
 	RQF_NAME(FLUSH_SEQ),
--- a/block/blk-mq-sched.c
+++ b/block/blk-mq-sched.c
@@ -494,7 +494,6 @@ void blk_mq_sched_request_inserted(struc
 EXPORT_SYMBOL_GPL(blk_mq_sched_request_inserted);
 
 static bool blk_mq_sched_bypass_insert(struct blk_mq_hw_ctx *hctx,
-				       bool has_sched,
 				       struct request *rq)
 {
 	/*
@@ -511,9 +510,6 @@ static bool blk_mq_sched_bypass_insert(s
 	if ((rq->rq_flags & RQF_FLUSH_SEQ) || blk_rq_is_passthrough(rq))
 		return true;
 
-	if (has_sched)
-		rq->rq_flags |= RQF_SORTED;
-
 	return false;
 }
 
@@ -533,7 +529,7 @@ void blk_mq_sched_insert_request(struct
 
 	WARN_ON(e && (rq->tag != -1));
 
-	if (blk_mq_sched_bypass_insert(hctx, !!e, rq)) {
+	if (blk_mq_sched_bypass_insert(hctx, rq)) {
 		/*
 		 * Firstly normal IO request is inserted to scheduler queue or
 		 * sw queue, meantime we add flush request to dispatch queue(
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -64,7 +64,7 @@ typedef void (rq_end_io_fn)(struct reque
  * request flags */
 typedef __u32 __bitwise req_flags_t;
 
-/* elevator knows about this request */
+/* this flag has no effect, will be removed in the future */
 #define RQF_SORTED		((__force req_flags_t)(1 << 0))
 /* drive already may have started this one */
 #define RQF_STARTED		((__force req_flags_t)(1 << 1))
