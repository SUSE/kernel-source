From: Chuck Lever <chuck.lever@oracle.com>
Date: Thu, 1 Sep 2022 15:10:18 -0400
Subject: [PATCH] NFSD: Protect against send buffer overflow in NFSv2 READ
Git-commit: 401bc1f90874280a80b93f23be33a0e7e2d1f912
Patch-mainline: v6.1
References: bsc#1205128 CVE-2022-43945

Since before the git era, NFSD has conserved the number of pages
held by each nfsd thread by combining the RPC receive and send
buffers into a single array of pages. This works because there are
no cases where an operation needs a large RPC Call message and a
large RPC Reply at the same time.

Once an RPC Call has been received, svc_process() updates
svc_rqst::rq_res to describe the part of rq_pages that can be
used for constructing the Reply. This means that the send buffer
(rq_res) shrinks when the received RPC record containing the RPC
Call is large.

A client can force this shrinkage on TCP by sending a correctly-
formed RPC Call header contained in an RPC record that is
excessively large. The full maximum payload size cannot be
constructed in that case.

Cc: <stable@vger.kernel.org>
Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
Reviewed-by: Jeff Layton <jlayton@kernel.org>
Acked-by: NeilBrown <neilb@suse.com>

---
 fs/nfsd/nfsxdr.c |    1 +
 1 file changed, 1 insertion(+)

--- a/fs/nfsd/nfsxdr.c
+++ b/fs/nfsd/nfsxdr.c
@@ -249,6 +249,7 @@ nfssvc_decode_readargs(struct svc_rqst *
 	p++; /* totalcount - unused */
 
 	len = min_t(unsigned int, len, NFSSVC_MAXBLKSIZE_V2);
+	len = min_t(unsigned int, len, rqstp->rq_res.buflen);
 
 	/* set up somewhere to store response.
 	 * We take pages, put them on reslist and include in iovec
