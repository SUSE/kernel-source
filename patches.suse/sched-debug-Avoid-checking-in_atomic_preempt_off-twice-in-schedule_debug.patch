From dfe1a3fc28efb33b5c76cd4ba316e64ede34ea9a Mon Sep 17 00:00:00 2001
From: Liming Wu <liming.wu@jaguarmicro.com>
Date: Fri, 25 Aug 2023 10:35:00 +0800
Subject: [PATCH] sched/debug: Avoid checking in_atomic_preempt_off() twice in
 schedule_debug()

References: bsc#1212887 (Scheduler functional and performance backports)
Git-commit: dc461c48deda8a2d243fbaf49e276d555eb833d8
Patch-mainline: v6.7-rc1

in_atomic_preempt_off() already gets called in schedule_debug() once,
which is the only caller of __schedule_bug().

Skip the second call within __schedule_bug(), it should always be true
at this point.

[ mingo: Clarified the changelog. ]

Signed-off-by: Liming Wu <liming.wu@jaguarmicro.com>
Signed-off-by: Ingo Molnar <mingo@kernel.org>
Link: https://lore.kernel.org/r/20230825023501.1848-1-liming.wu@jaguarmicro.com
Signed-off-by: Mel Gorman <mgorman@suse.de>
---
 kernel/sched/core.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index e2239da53ea5..a32379c32a1f 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -5953,8 +5953,7 @@ static noinline void __schedule_bug(struct task_struct *prev)
 	print_modules();
 	if (irqs_disabled())
 		print_irqtrace_events(prev);
-	if (IS_ENABLED(CONFIG_DEBUG_PREEMPT)
-	    && in_atomic_preempt_off()) {
+	if (IS_ENABLED(CONFIG_DEBUG_PREEMPT)) {
 		pr_err("Preemption disabled at:");
 		print_ip_sym(KERN_ERR, preempt_disable_ip);
 	}
