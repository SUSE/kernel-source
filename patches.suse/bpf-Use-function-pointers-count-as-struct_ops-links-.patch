From: Xu Kuohai <xukuohai@huawei.com>
Date: Tue, 12 Nov 2024 22:58:48 +0800
Subject: bpf: Use function pointers count as struct_ops links count
Patch-mainline: v6.13-rc1
Git-commit: 821a3fa32bbe3bc0fa23b3189325d3720a49a24c
References: jsc#PED-11651
X-Info: dependency of commit 7c8ce4ffb684 "bpf: Add kernel symbol for struct_ops trampoline"

Only function pointers in a struct_ops structure can be linked to bpf
progs, so set the links count to the function pointers count, instead
of the total members count in the structure.

Suggested-by: Martin KaFai Lau <martin.lau@linux.dev>
Signed-off-by: Xu Kuohai <xukuohai@huawei.com>
Link: https://lore.kernel.org/r/20241112145849.3436772-3-xukuohai@huaweicloud.com
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Stable-dep-of: 7c8ce4ffb684 ("bpf: Add kernel symbol for struct_ops trampoline")
[ shung-hsi.yu: various contextual difference due to "Allow
  struct_ops maps with a large number of programs" series,
  specifically commit 187e2af05abe ("bpf: struct_ops supports more
  than one page for trampolines."), not backported. And
  btf_vmlinux is passed to count_func_ptr() instead of the btf
  because commit 47f4f657acd5 ("bpf: make struct_ops_map support
  btfs other than btf_vmlinux.") is not backported ]
Signed-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
---
 kernel/bpf/bpf_struct_ops.c |   35 +++++++++++++++++++++++++----------
 1 file changed, 25 insertions(+), 10 deletions(-)

--- a/kernel/bpf/bpf_struct_ops.c
+++ b/kernel/bpf/bpf_struct_ops.c
@@ -40,7 +40,7 @@ struct bpf_struct_ops_map {
 	 * (in kvalue.data).
 	 */
 	struct bpf_link **links;
-	u32 links_cnt;
+	u32 funcs_cnt;
 	/* image is a page that has all the trampolines
 	 * that stores the func args before calling the bpf_prog.
 	 * A PAGE_SIZE "image" is enough to store all trampoline for
@@ -299,11 +299,11 @@ static void bpf_struct_ops_map_put_progs
 {
 	u32 i;
 
-	for (i = 0; i < st_map->links_cnt; i++) {
-		if (st_map->links[i]) {
-			bpf_link_put(st_map->links[i]);
-			st_map->links[i] = NULL;
-		}
+	for (i = 0; i < st_map->funcs_cnt; i++) {
+		if (!st_map->links[i])
+			break;
+		bpf_link_put(st_map->links[i]);
+		st_map->links[i] = NULL;
 	}
 }
 
@@ -379,6 +379,7 @@ static long bpf_struct_ops_map_update_el
 	int prog_fd, err;
 	void *image, *image_end;
 	u32 i;
+	struct bpf_link **plink;
 
 	if (flags)
 		return -EINVAL;
@@ -419,6 +420,7 @@ static long bpf_struct_ops_map_update_el
 	image = st_map->image;
 	image_end = st_map->image + PAGE_SIZE;
 
+	plink = st_map->links;
 	for_each_member(i, t, member) {
 		const struct btf_type *mtype, *ptype;
 		struct bpf_prog *prog;
@@ -493,7 +495,7 @@ static long bpf_struct_ops_map_update_el
 		}
 		bpf_link_init(&link->link, BPF_LINK_TYPE_STRUCT_OPS,
 			      &bpf_struct_ops_link_lops, prog);
-		st_map->links[i] = &link->link;
+		*plink++ = &link->link;
 
 		err = bpf_struct_ops_prepare_trampoline(tlinks, link,
 							&st_ops->func_models[i],
@@ -655,6 +657,19 @@ static int bpf_struct_ops_map_alloc_chec
 	return 0;
 }
 
+static u32 count_func_ptrs(const struct btf *btf, const struct btf_type *t)
+{
+	int i;
+	u32 count;
+	const struct btf_member *member;
+
+	count = 0;
+	for_each_member(i, t, member)
+		if (btf_type_resolve_func_ptr(btf, member->type, NULL))
+			count++;
+	return count;
+}
+
 static struct bpf_map *bpf_struct_ops_map_alloc(union bpf_attr *attr)
 {
 	const struct bpf_struct_ops *st_ops;
@@ -704,9 +719,9 @@ static struct bpf_map *bpf_struct_ops_ma
 		return ERR_PTR(-ENOMEM);
 	}
 	st_map->uvalue = bpf_map_area_alloc(vt->size, NUMA_NO_NODE);
-	st_map->links_cnt = btf_type_vlen(t);
+	st_map->funcs_cnt = count_func_ptrs(btf_vmlinux, t);
 	st_map->links =
-		bpf_map_area_alloc(st_map->links_cnt * sizeof(struct bpf_links *),
+		bpf_map_area_alloc(st_map->funcs_cnt * sizeof(struct bpf_link *),
 				   NUMA_NO_NODE);
 	if (!st_map->uvalue || !st_map->links) {
 		__bpf_struct_ops_map_free(map);
@@ -730,7 +745,7 @@ static u64 bpf_struct_ops_map_mem_usage(
 	usage = sizeof(*st_map) +
 			vt->size - sizeof(struct bpf_struct_ops_value);
 	usage += vt->size;
-	usage += btf_type_vlen(vt) * sizeof(struct bpf_links *);
+	usage += st_map->funcs_cnt * sizeof(struct bpf_link *);
 	usage += PAGE_SIZE;
 	return usage;
 }
