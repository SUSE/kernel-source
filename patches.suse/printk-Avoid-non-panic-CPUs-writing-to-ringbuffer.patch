From: John Ogness <john.ogness@linutronix.de>
Date: Wed, 7 Feb 2024 14:47:01 +0106
Subject: printk: Avoid non-panic CPUs writing to ringbuffer
Git-commit: 779dbc2e78d746250f07c463e13ac603b349f6f3
Patch-mainline: v6.9-rc1
References: bsc#1223574

Commit 13fb0f74d702 ("printk: Avoid livelock with heavy printk
during panic") introduced a mechanism to silence non-panic CPUs
if too many messages are being dropped. Aside from trying to
workaround the livelock bugs of legacy consoles, it was also
intended to avoid losing panic messages. However, if non-panic
CPUs are writing to the ringbuffer, then reacting to dropped
messages is too late.

Another motivation is that non-finalized messages already might
be skipped in panic(). In other words, random messages from
non-panic CPUs might already get lost. It is better to ignore
all to avoid confusion.

To avoid losing panic CPU messages, silence non-panic CPUs
immediately on panic.

Signed-off-by: John Ogness <john.ogness@linutronix.de>
Reviewed-by: Petr Mladek <pmladek@suse.com>
Link: https://lore.kernel.org/r/20240207134103.1357162-13-john.ogness@linutronix.de
Signed-off-by: Petr Mladek <pmladek@suse.com>

[pmladek@suse.com: The commit 13fb0f74d702 ("printk: Avoid livelock with
	heavy printk during panic") has never been backported for 5.14.
	As a result, this patch could just add the straightforward
	final code.
]
---
 kernel/printk/printk.c |    8 ++++++++
 1 file changed, 8 insertions(+)

--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -2309,6 +2309,14 @@ asmlinkage int vprintk_emit(int facility
 	if (unlikely(suppress_printk))
 		return 0;
 
+	/*
+	 * The messages on the panic CPU are the most important. If
+	 * non-panic CPUs are generating any messages, they will be
+	 * silently dropped.
+	 */
+	if (other_cpu_in_panic())
+		return 0;
+
 	if (level == LOGLEVEL_SCHED) {
 		level = LOGLEVEL_DEFAULT;
 		in_sched = true;
