From 6689ede07b393d59caa83078af9122b01df028ce Mon Sep 17 00:00:00 2001
From: Pablo Neira Ayuso <pablo@netfilter.org>
Date: Tue, 15 Aug 2023 15:39:00 +0200
Subject: [PATCH 02/11] netfilter: nf_tables: fix GC transaction races with
 netns and netlink event exit path
References: git-fixes
Patch-mainline: v6.5-rc7
Git-commit: 6a33d8b73dfac0a41f3877894b38082bd0c9a5bc

Netlink event path is missing a synchronization point with GC
transactions. Add GC sequence number update to netns release path and
netlink event path, any GC transaction losing race will be discarded.

Fixes: 5f68718b34a5 ("netfilter: nf_tables: GC transaction API to avoid race with control plane")
Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
Signed-off-by: Florian Westphal <fw@strlen.de>
Signed-off-by: Denis Kirjanov <denis.kirjanov@suse.com>
---
 net/netfilter/nf_tables_api.c |   30 ++++++++++++++++++++++++++----
 1 file changed, 26 insertions(+), 4 deletions(-)

--- a/net/netfilter/nf_tables_api.c
+++ b/net/netfilter/nf_tables_api.c
@@ -8000,6 +8000,22 @@ static void nf_tables_commit_release(str
 	mutex_unlock(&net->nft.commit_mutex);
 }
 
+static unsigned int nft_gc_seq_begin(struct net *net)
+{
+	unsigned int gc_seq;
+
+	/* Bump gc counter, it becomes odd, this is the busy mark. */
+	gc_seq = READ_ONCE(net->nft.gc_seq);
+	WRITE_ONCE(net->nft.gc_seq, ++gc_seq);
+
+	return gc_seq;
+}
+
+static void nft_gc_seq_end(struct net *net, unsigned int gc_seq)
+{
+	WRITE_ONCE(net->nft.gc_seq, ++gc_seq);
+}
+
 static int nf_tables_commit(struct net *net, struct sk_buff *skb)
 {
 	struct nft_trans *trans, *next;
@@ -8054,9 +8070,7 @@ static int nf_tables_commit(struct net *
 
 	WRITE_ONCE(net->nft.base_seq, base_seq);
 
-	/* Bump gc counter, it becomes odd, this is the busy mark. */
-	gc_seq = READ_ONCE(net->nft.gc_seq);
-	WRITE_ONCE(net->nft.gc_seq, ++gc_seq);
+	gc_seq = nft_gc_seq_begin(net);
 
 	/* step 3. Start new generation, rules_gen_X now in use. */
 	net->nft.gencursor = nft_gencursor_next(net);
@@ -8216,7 +8230,7 @@ static int nf_tables_commit(struct net *
 
 	nf_tables_gen_notify(net, skb, NFT_MSG_NEWGEN);
 
-	WRITE_ONCE(net->nft.gc_seq, ++gc_seq);
+	nft_gc_seq_end(net, gc_seq);
 	nf_tables_commit_release(net);
 
 	return 0;
@@ -9053,10 +9067,18 @@ static int __net_init nf_tables_init_net
 
 static void __net_exit nf_tables_exit_net(struct net *net)
 {
+	unsigned int gc_seq;
+
 	mutex_lock(&net->nft.commit_mutex);
+
+	gc_seq = nft_gc_seq_begin(net);
+
 	if (!list_empty(&net->nft.commit_list))
 		__nf_tables_abort(net, false);
 	__nft_release_tables(net);
+
+	nft_gc_seq_end(net, gc_seq);
+
 	mutex_unlock(&net->nft.commit_mutex);
 	WARN_ON_ONCE(!list_empty(&net->nft.tables));
 	WARN_ON_ONCE(!list_empty(&net->nft.module_list));
