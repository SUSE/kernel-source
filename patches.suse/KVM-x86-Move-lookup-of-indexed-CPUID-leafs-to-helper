From: Michael Roth <michael.roth@amd.com>
Date: Thu, 24 Feb 2022 10:56:10 -0600
Subject: KVM: x86: Move lookup of indexed CPUID leafs to helper
Git-commit: b66370db9a90b3fa4c4a1a732af3e7e38d6d4c7c
Patch-mainline: v5.19-rc1
References: jsc#SLE-19924, jsc#SLE-24814

Determining which CPUID leafs have significant ECX/index values is
also needed by guest kernel code when doing SEV-SNP-validated CPUID
lookups. Move this to common code to keep future updates in sync.

Signed-off-by: Michael Roth <michael.roth@amd.com>
Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Signed-off-by: Borislav Petkov <bp@suse.de>
Reviewed-by: Venu Busireddy <venu.busireddy@oracle.com>
Link: https://lore.kernel.org/r/20220307213356.2797205-31-brijesh.singh@amd.com

Acked-by: Joerg Roedel <jroedel@suse.de>
---
 arch/x86/include/asm/cpuid.h |   34 ++++++++++++++++++++++++++++++++++
 arch/x86/kvm/cpuid.c         |   37 ++++++++-----------------------------
 2 files changed, 42 insertions(+), 29 deletions(-)

--- /dev/null
+++ b/arch/x86/include/asm/cpuid.h
@@ -0,0 +1,34 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * CPUID-related helpers/definitions
+ *
+ * Derived from arch/x86/kvm/cpuid.c
+ */
+
+#ifndef _ASM_X86_CPUID_H
+#define _ASM_X86_CPUID_H
+
+static __always_inline bool cpuid_function_is_indexed(u32 function)
+{
+	switch (function) {
+	case 4:
+	case 7:
+	case 0xb:
+	case 0xd:
+	case 0xf:
+	case 0x10:
+	case 0x12:
+	case 0x14:
+	case 0x17:
+	case 0x18:
+	case 0x1d:
+	case 0x1e:
+	case 0x1f:
+	case 0x8000001d:
+		return true;
+	}
+
+	return false;
+}
+
+#endif /* _ASM_X86_CPUID_H */
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@ -19,6 +19,7 @@
 #include <asm/user.h>
 #include <asm/fpu/xstate.h>
 #include <asm/sgx.h>
+#include <asm/cpuid.h>
 #include "cpuid.h"
 #include "lapic.h"
 #include "mmu.h"
@@ -584,36 +585,14 @@ static struct kvm_cpuid_entry2 *do_host_
 	cpuid_count(entry->function, entry->index,
 		    &entry->eax, &entry->ebx, &entry->ecx, &entry->edx);
 
-	switch (function) {
-	case 4:
-	case 7:
-	case 0xb:
-	case 0xd:
-	case 0xf:
-	case 0x10:
-	case 0x12:
-	case 0x14:
-	case 0x17:
-	case 0x18:
-	case 0x1f:
-	case 0x8000001d:
+	if (cpuid_function_is_indexed(function)) {
 		entry->flags |= KVM_CPUID_FLAG_SIGNIFCANT_INDEX;
-		break;
-	case 0x80000000:
-		/*
-		 * 0x80000021 is sometimes synthesized by __do_cpuid_func, which
-		 * would result in out-of-bounds calls to do_host_cpuid.
-		 */
-		{
-			static int max_cpuid_80000000;
-			if (!READ_ONCE(max_cpuid_80000000))
-				WRITE_ONCE(max_cpuid_80000000, cpuid_eax(0x80000000));
-			if (function > READ_ONCE(max_cpuid_80000000))
-				return entry;
-		}
-	default:
-		break;
-
+	} else if (function == 0x80000000) {
+		static int max_cpuid_80000000;
+		if (!READ_ONCE(max_cpuid_80000000))
+			WRITE_ONCE(max_cpuid_80000000, cpuid_eax(0x80000000));
+		if (function > READ_ONCE(max_cpuid_80000000))
+			return entry;
 	}
 
 	return entry;
