From: Benjamin Coddington <bcodding@redhat.com>
Date: Tue, 20 Sep 2022 13:00:21 -0400
Subject: [PATCH] NFS: Trigger the "ls -l" readdir heuristic sooner
Git-commit: 85aa8ddc3818718208c3cfdfda9c8c908c9dead1
Patch-mainline: v6.2
References: bsc#1231847

Since commit 1a34c8c9a49e ("NFS: Support larger readdir buffers") has
updated dtsize, and with recent improvements to the READDIRPLUS helper
heuristic, the heuristic may not trigger until many dentries are emitted
to userspace.   This will cause many thousands of GETATTR calls for "ls
-l" when the directory's pagecache has already been populated.  This
manifests as poor performance for long directory listings after an
initially fast "ls -l".

Fix this by emitting only 17 entries for any first pass through the NFS
directory's ->iterate_shared(), which allows userpace to prime the
counters for the heuristic.

Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
Acked-by: NeilBrown <neilb@suse.com>

---
 fs/nfs/dir.c |    9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

--- a/fs/nfs/dir.c
+++ b/fs/nfs/dir.c
@@ -958,6 +958,8 @@ int readdir_search_pagecache(nfs_readdir
 	return res;
 }
 
+#define NFS_READDIR_CACHE_MISS_THRESHOLD (16UL)
+
 /*
  * Once we've found the start of the dirent within a page: fill 'er up...
  */
@@ -968,6 +970,7 @@ int nfs_do_filldir(nfs_readdir_descripto
 	int i = 0;
 	int res = 0;
 	struct nfs_cache_array *array = NULL;
+	bool first_emit = !desc->dir_cookie;
 
 	array = kmap(desc->page);
 	for (i = desc->cache_entry_index; i < array->size; i++) {
@@ -989,6 +992,10 @@ int nfs_do_filldir(nfs_readdir_descripto
 			desc->ctx->pos++;
 		if (desc->duped != 0)
 			desc->duped = 1;
+		if (first_emit && i > NFS_READDIR_CACHE_MISS_THRESHOLD + 1) {
+			desc->eob = true;
+			break;
+		}
 	}
 	if (array->page_is_eof)
 		desc->eof = !desc->eob;
@@ -1064,8 +1071,6 @@ out:
 	return status;
 }
 
-#define NFS_READDIR_CACHE_MISS_THRESHOLD (16UL)
-
 static void nfs_readdir_handle_cache_misses(struct inode *inode,
 					    struct nfs_readdir_descriptor *desc,
 					    pgoff_t page_index,
