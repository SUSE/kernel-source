From 92a568fa4e2073cb00de90893240ba18bd4723f3 Mon Sep 17 00:00:00 2001
From: Chun-Yi Lee <jlee@suse.com>
Date: Wed, 18 Dec 2024 20:25:30 +0800
Subject: [PATCH 1/5] Lock down x86_64 kernel in secure boot mode in
 subsys_initcall stage
Patch-mainline: Never, temporary solution
References: bsc#1234646

Since '77b644c39d6a init/main.c: Initialize early LSMs after arch code,
static keys and calls' be merged to v6.12 kernel. The
early_security_init() be moved behine setup_arch(). It causes that the
original code CONFIG_LOCK_DOWN_IN_EFI_SECURE_BOOT in setup_arch() is
invalid.

This patch reuse the arm64_kernel_lockdown() on x86_64 in subsys_initcall
stage. The following functions in early boot stage can not locked down by
LSM:

- LOCKDOWN_ACPI_TABLES in setup_arch() on x86_64
- LOCKDOWN_DBG_WRITE_KERNEL in early_initcall stage

For the above functions, I will apply old lockdown approach (e.g. SLE15-SP1),
maintaining a lockdown flag for early boot stage. Until kernel upstream has
solution for "early LSMs" (CONFIG_SECURITY_LOCKDOWN_LSM_EARLY).

References: https://bugzilla.opensuse.org/show_bug.cgi?id=1234646
Signed-off-by: Chun-Yi Lee <jlee@suse.com>
---
 drivers/firmware/efi/secureboot.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/firmware/efi/secureboot.c b/drivers/firmware/efi/secureboot.c
index b0b4629e4..bd986125e 100644
--- a/drivers/firmware/efi/secureboot.c
+++ b/drivers/firmware/efi/secureboot.c
@@ -39,12 +39,12 @@ void __init efi_set_secure_boot(enum efi_secureboot_mode mode)
 	}
 }
 
-#if defined(CONFIG_ARM64) && defined(CONFIG_LOCK_DOWN_IN_EFI_SECURE_BOOT)
+#if defined(CONFIG_LOCK_DOWN_IN_EFI_SECURE_BOOT)
 /*
  * The arm64_kernel_lockdown() must run after efisubsys_init() because the
  * the secure boot mode query relies on efi_rts_wq to call EFI_GET_VARIABLE.
  */
-static int __init arm64_kernel_lockdown(void)
+static int __init kernel_lockdown(void)
 {
 	if (arch_ima_get_secureboot())
 		security_lock_kernel_down("EFI Secure Boot mode",
@@ -52,5 +52,5 @@ static int __init arm64_kernel_lockdown(void)
 	return 0;
 }
 
-subsys_initcall(arm64_kernel_lockdown);
+subsys_initcall(kernel_lockdown);
 #endif
-- 
2.35.3

