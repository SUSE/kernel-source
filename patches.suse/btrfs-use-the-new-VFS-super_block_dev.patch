From: "Luis R. Rodriguez" <mcgrof@suse.com>
Date: Wed, 13 Aug 2014 16:05:22 -0400
Subject: btrfs: use the new VFS super_block_dev
Patch-mainline: Never, submitted but not accepted
References: bsc#865869

Use the new VFS layer struct super_block_dev instead of carrying
the anonymous bdev's on our own. This makes the VFS layer aware of
all of our anonymous dev's on the super block.

Signed-off-by: Luis R. Rodriguez <mcgrof@suse.com>
Signed-off-by: Filipe Manana <fdmanana@suse.com>
fdmanana: fix for running qgroup sanity tests
---
 fs/btrfs/ctree.h   |  7 ++-----
 fs/btrfs/disk-io.c | 11 ++++++-----
 fs/btrfs/inode.c   |  5 ++---
 fs/btrfs/ioctl.c   |  7 +++++--
 fs/btrfs/super.c   |  2 +-
 fs/super.c         | 18 +++++++++++++++++-
 include/linux/fs.h |  2 ++
 7 files changed, 35 insertions(+), 17 deletions(-)

--- a/fs/btrfs/ctree.h
+++ b/fs/btrfs/ctree.h
@@ -1133,11 +1133,8 @@ struct btrfs_root {
 	 * protected by inode_lock
 	 */
 	struct radix_tree_root delayed_nodes_tree;
-	/*
-	 * right now this just gets used so that a root has its own devid
-	 * for stat.  It may be used for more later
-	 */
-	dev_t anon_dev;
+
+	struct super_block_dev sbdev;
 
 	spinlock_t root_item_lock;
 	refcount_t refs;
--- a/fs/btrfs/disk-io.c
+++ b/fs/btrfs/disk-io.c
@@ -1135,9 +1135,9 @@ static void __setup_root(struct btrfs_root *root, struct btrfs_fs_info *fs_info,
 	memset(&root->root_item, 0, sizeof(root->root_item));
 	memset(&root->defrag_progress, 0, sizeof(root->defrag_progress));
 	root->root_key.objectid = objectid;
-	root->anon_dev = 0;
 
 	spin_lock_init(&root->root_item_lock);
+	init_anon_sbdev(&root->sbdev);
 	btrfs_qgroup_init_swapped_blocks(&root->swapped_blocks);
 #ifdef CONFIG_BTRFS_DEBUG
 	INIT_LIST_HEAD(&root->leak_list);
@@ -1446,11 +1446,13 @@ static int btrfs_init_fs_root(struct btrfs_root *root, dev_t anon_dev)
 	if (is_fstree(root->root_key.objectid) &&
 	    btrfs_root_refs(&root->root_item) > 0) {
 		if (!anon_dev) {
-			ret = get_anon_bdev(&root->anon_dev);
+			ret = insert_anon_sbdev(root->fs_info->sb,
+						&root->sbdev);
 			if (ret)
 				goto fail;
 		} else {
-			root->anon_dev = anon_dev;
+			insert_prealloc_anon_sbdev(root->fs_info->sb,
+						   &root->sbdev, anon_dev);
 		}
 	}
 
@@ -2103,8 +2105,7 @@ void btrfs_put_root(struct btrfs_root *root)
 	if (refcount_dec_and_test(&root->refs)) {
 		WARN_ON(!RB_EMPTY_ROOT(&root->inode_tree));
 		WARN_ON(test_bit(BTRFS_ROOT_DEAD_RELOC_TREE, &root->state));
-		if (root->anon_dev)
-			free_anon_bdev(root->anon_dev);
+		remove_anon_sbdev(&root->sbdev);
 		btrfs_drew_lock_destroy(&root->snapshot_lock);
 		free_root_extent_buffers(root);
 #ifdef CONFIG_BTRFS_DEBUG
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -4366,8 +4366,7 @@ int btrfs_delete_subvolume(struct inode *dir, struct dentry *dentry)
 		}
 	}
 
-	free_anon_bdev(dest->anon_dev);
-	dest->anon_dev = 0;
+	remove_anon_sbdev(&dest->sbdev);
 out_end_trans:
 	trans->block_rsv = NULL;
 	trans->bytes_reserved = 0;
@@ -9048,7 +9047,7 @@ static int btrfs_getattr(struct user_namespace *mnt_userns,
 				  STATX_ATTR_NODUMP);
 
 	generic_fillattr(&init_user_ns, inode, stat);
-	stat->dev = BTRFS_I(inode)->root->anon_dev;
+	stat->dev = BTRFS_I(inode)->root->sbdev.anon_dev;
 
 	spin_lock(&BTRFS_I(inode)->lock);
 	delalloc_bytes = BTRFS_I(inode)->new_delalloc_bytes;
--- a/fs/btrfs/ioctl.c
+++ b/fs/btrfs/ioctl.c
@@ -881,8 +881,11 @@ static int create_snapshot(struct btrfs_root *root, struct inode *dir,
 	pending_snapshot->anon_dev = 0;
 fail:
 	/* Prevent double freeing of anon_dev */
-	if (ret && pending_snapshot->snap)
-		pending_snapshot->snap->anon_dev = 0;
+	if (ret && pending_snapshot->snap &&
+	    pending_snapshot->snap->sbdev.anon_dev) {
+		remove_anon_sbdev(&pending_snapshot->snap->sbdev);
+		pending_snapshot->anon_dev = 0;
+	}
 	btrfs_put_root(pending_snapshot->snap);
 	btrfs_subvolume_release_metadata(root, &pending_snapshot->block_rsv);
 free_pending:
--- a/fs/btrfs/super.c
+++ b/fs/btrfs/super.c
@@ -2497,7 +2497,7 @@ static int btrfs_show_devname(struct seq_file *m, struct dentry *root)
 
 static dev_t btrfs_get_inode_dev(const struct inode *inode)
 {
-	return BTRFS_I(inode)->root->anon_dev;
+	return BTRFS_I(inode)->root->sbdev.anon_dev;
 }
 
 static const struct super_operations btrfs_super_ops = {
--- a/fs/super.c
+++ b/fs/super.c
@@ -190,6 +190,20 @@ int insert_anon_sbdev(struct super_block *sb, struct super_block_dev *sbdev)
 }
 EXPORT_SYMBOL_GPL(insert_anon_sbdev);
 
+/* To be used only by btrfs */
+void insert_prealloc_anon_sbdev(struct super_block *sb,
+		struct super_block_dev *sbdev, dev_t preallocated)
+{
+	sbdev->anon_dev = preallocated;
+
+	sbdev->sb = sb;
+
+	spin_lock(&sb_lock);
+	list_add_tail(&sbdev->entry, &sb->s_sbdevs);
+	spin_unlock(&sb_lock);
+}
+EXPORT_SYMBOL_GPL(insert_prealloc_anon_sbdev);
+
 /* To be used only by btrfs */
 void remove_anon_sbdev(struct super_block_dev *sbdev)
 {
@@ -202,8 +216,10 @@ void remove_anon_sbdev(struct super_block_dev *sbdev)
 	}
 	spin_unlock(&sb_lock);
 
-	if (remove)
+	if (remove) {
 		free_anon_bdev(sbdev->anon_dev);
+		sbdev->anon_dev = 0;
+	}
 }
 EXPORT_SYMBOL_GPL(remove_anon_sbdev);
 
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -2389,6 +2389,8 @@ void free_anon_bdev(dev_t);
 
 /* These two are to be used only by btrfs */
 int insert_anon_sbdev(struct super_block *sb, struct super_block_dev *sbdev);
+void insert_prealloc_anon_sbdev(struct super_block *sb,
+		struct super_block_dev *sbdev, dev_t preallocated);
 void remove_anon_sbdev(struct super_block_dev *sbdev);
 static inline void init_anon_sbdev(struct super_block_dev *sbdev)
 {
