From: Takashi Iwai <tiwai@suse.de>
Subject: Add kABI placeholders for sound core
Patch-mainline: Never, kABI padding
References: git-fixes

Proactive coverage for potential kABI breakage in future.

Signed-off-by: Takashi Iwai <tiwai@suse.de>

---
 include/sound/control.h       |    2 ++
 include/sound/core.h          |    2 ++
 include/sound/dmaengine_pcm.h |    3 +++
 include/sound/hwdep.h         |    1 +
 include/sound/pcm.h           |    5 +++++
 include/sound/rawmidi.h       |    4 ++++
 include/sound/timer.h         |    3 +++
 include/sound/ump.h           |    2 ++
 8 files changed, 22 insertions(+)

--- a/include/sound/control.h
+++ b/include/sound/control.h
@@ -60,6 +60,7 @@ struct snd_kcontrol_new {
 		const unsigned int *p;
 	} tlv;
 	unsigned long private_value;
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 struct snd_kcontrol_volatile {
@@ -81,6 +82,7 @@ struct snd_kcontrol {
 	unsigned long private_value;
 	void *private_data;
 	void (*private_free)(struct snd_kcontrol *kcontrol);
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 	struct snd_kcontrol_volatile vd[] __counted_by(count);	/* volatile data */
 };
 
--- a/include/sound/core.h
+++ b/include/sound/core.h
@@ -145,6 +145,8 @@ struct snd_card {
 	struct snd_mixer_oss *mixer_oss;
 	int mixer_oss_change_count;
 #endif
+
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 #define dev_to_snd_card(p)	container_of(p, struct snd_card, card_dev)
--- a/include/sound/dmaengine_pcm.h
+++ b/include/sound/dmaengine_pcm.h
@@ -82,6 +82,7 @@ struct snd_dmaengine_dai_dma_data {
 	unsigned int flags;
 	void *peripheral_config;
 	size_t peripheral_size;
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 void snd_dmaengine_pcm_set_config_from_dai_data(
@@ -152,6 +153,7 @@ struct snd_dmaengine_pcm_config {
 
 	const struct snd_pcm_hardware *pcm_hardware;
 	unsigned int prealloc_buffer_size;
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 int snd_dmaengine_pcm_register(struct device *dev,
@@ -174,6 +176,7 @@ struct dmaengine_pcm {
 	const struct snd_dmaengine_pcm_config *config;
 	struct snd_soc_component component;
 	unsigned int flags;
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 static inline struct dmaengine_pcm *soc_component_to_pcm(struct snd_soc_component *p)
--- a/include/sound/hwdep.h
+++ b/include/sound/hwdep.h
@@ -59,6 +59,7 @@ struct snd_hwdep {
 	int used;			/* reference counter */
 	unsigned int dsp_loaded;	/* bit fields of loaded dsp indices */
 	unsigned int exclusive:1;	/* exclusive access mode */
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 extern int snd_hwdep_new(struct snd_card *card, char *id, int device,
--- a/include/sound/pcm.h
+++ b/include/sound/pcm.h
@@ -44,6 +44,7 @@ struct snd_pcm_hardware {
 	unsigned int periods_min;	/* min # of periods */
 	unsigned int periods_max;	/* max # of periods */
 	size_t fifo_size;		/* fifo size in bytes */
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 struct snd_pcm_status64;
@@ -450,6 +451,7 @@ struct snd_pcm_runtime {
 	/* -- OSS things -- */
 	struct snd_pcm_oss_runtime oss;
 #endif
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 struct snd_pcm_group {		/* keep linked substreams */
@@ -505,6 +507,7 @@ struct snd_pcm_substream {
 #ifdef CONFIG_SND_PCM_XRUN_DEBUG
 	unsigned int xrun_counter; /* number of times xrun happens */
 #endif /* CONFIG_SND_PCM_XRUN_DEBUG */
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 #define SUBSTREAM_BUSY(substream) ((substream)->ref_count > 0)
@@ -529,6 +532,7 @@ struct snd_pcm_str {
 #endif
 	struct snd_kcontrol *chmap_kctl; /* channel-mapping controls */
 	struct device *dev;
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 struct snd_pcm {
@@ -551,6 +555,7 @@ struct snd_pcm {
 #if IS_ENABLED(CONFIG_SND_PCM_OSS)
 	struct snd_pcm_oss oss;
 #endif
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 /*
--- a/include/sound/rawmidi.h
+++ b/include/sound/rawmidi.h
@@ -77,6 +77,7 @@ struct snd_rawmidi_runtime {
 	/* private data */
 	void *private_data;
 	void (*private_free)(struct snd_rawmidi_substream *substream);
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 struct snd_rawmidi_substream {
@@ -98,6 +99,7 @@ struct snd_rawmidi_substream {
 	struct pid *pid;
 	/* hardware layer */
 	const struct snd_rawmidi_ops *ops;
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 struct snd_rawmidi_file {
@@ -111,6 +113,7 @@ struct snd_rawmidi_str {
 	unsigned int substream_count;
 	unsigned int substream_opened;
 	struct list_head substreams;
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 struct snd_rawmidi {
@@ -142,6 +145,7 @@ struct snd_rawmidi {
 #if IS_ENABLED(CONFIG_SND_SEQUENCER)
 	struct snd_seq_device *seq_dev;
 #endif
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 /* main rawmidi functions */
--- a/include/sound/timer.h
+++ b/include/sound/timer.h
@@ -52,6 +52,7 @@ struct snd_timer_hardware {
 	int (*stop) (struct snd_timer * timer);
 	int (*set_period) (struct snd_timer * timer, unsigned long period_num, unsigned long period_den);
 	int (*precise_resolution) (struct snd_timer * timer, unsigned long *num, unsigned long *den);
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 struct snd_timer {
@@ -77,6 +78,7 @@ struct snd_timer {
 	struct work_struct task_work;
 	int max_instances;	/* upper limit of timer instances */
 	int num_instances;	/* current number of timer instances */
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 struct snd_timer_instance {
@@ -106,6 +108,7 @@ struct snd_timer_instance {
 	struct list_head slave_list_head;
 	struct list_head slave_active_head;
 	struct snd_timer_instance *master;
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 /*
--- a/include/sound/ump.h
+++ b/include/sound/ump.h
@@ -69,6 +69,7 @@ struct snd_ump_endpoint {
 	const struct snd_seq_ump_ops *seq_ops;
 	void *seq_client;
 #endif
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 /* ops filled by UMP drivers */
@@ -96,6 +97,7 @@ struct snd_ump_block {
 	void (*private_free)(struct snd_ump_block *blk);
 
 	struct list_head list;
+	void *suse_kabi_padding;	/* XXX SLE-specific kABI placeholder */
 };
 
 #define rawmidi_to_ump(rmidi)	container_of(rmidi, struct snd_ump_endpoint, core)
