From: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date: Fri, 22 Nov 2024 18:35:57 +0100
Subject: sched/core: Update kernel boot parameters for LAZY preempt.
Git-commit: f66e4a996582d59b6f5ce88078b0ad2a328aa532
Patch-mainline: v6.13-rc3
References: bsc#1234370

Update the documentation for the `preempt=' parameter which now also
accepts `lazy'.

Fixes: 7c70cb94d29cd ("sched: Add Lazy preemption model")
Reported-by: Shrikanth Hegde <sshegde@linux.ibm.com>
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Reviewed-by: Shrikanth Hegde <sshegde@linux.ibm.com>
Link: https://lore.kernel.org/r/20241122173557.MYOtT95Q@linutronix.de

Acked-by: Petr Tesarik <ptesarik@suse.com>
---
 Documentation/admin-guide/kernel-parameters.txt |    5 +++++
 1 file changed, 5 insertions(+)

--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@ -4810,6 +4810,11 @@
 			       can be preempted anytime.  Tasks will also yield
 			       contended spinlocks (if the critical section isn't
 			       explicitly preempt disabled beyond the lock itself).
+			lazy - Scheduler controlled. Similar to full but instead
+			       of preempting the task immediately, the task gets
+			       one HZ tick time to yield itself before the
+			       preemption will be forced. One preemption is when the
+			       task returns to user space.
 
 	print-fatal-signals=
 			[KNL] debug: print fatal signals
