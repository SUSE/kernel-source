From f7697d70d76b19b324e25ce5bee4a3bb05f18e0c Mon Sep 17 00:00:00 2001
From: Baowen Zheng <baowen.zheng@corigine.com>
Date: Tue, 12 Oct 2021 14:48:50 +0200
Subject: [PATCH] nfp: flow_offload: move flow_indr_dev_register from app init to app start
Git-commit: 60d950f443a52d950126ad664fbd4a1eb8353dc9
Patch-mainline: v5.15-rc6
References: stable-5.14.14

commit 60d950f443a52d950126ad664fbd4a1eb8353dc9 upstream.

In commit 74fc4f828769 ("net: Fix offloading indirect devices dependency
on qdisc order creation"), it adds a process to trigger the callback to
setup the bo callback when the driver regists a callback.

In our current implement, we are not ready to run the callback when nfp
call the function flow_indr_dev_register, then there will be error
message as:

Kernel: Oops: 0000 [#1] SMP PTI
Kernel: CPU: 0 PID: 14119 Comm: kworker/0:0 Tainted: G
Kernel: Workqueue: events work_for_cpu_fn
Kernel: RIP: 0010:nfp_flower_indr_setup_tc_cb+0x258/0x410
Kernel: RSP: 0018:ffffbc1e02c57bf8 EFLAGS: 00010286
Kernel: RAX: 0000000000000000 RBX: ffff9c761fabc000 RCX: 0000000000000001
Kernel: RDX: 0000000000000001 RSI: fffffffffffffff0 RDI: ffffffffc0be9ef1
Kernel: RBP: ffffbc1e02c57c58 R08: ffffffffc08f33aa R09: ffff9c6db7478800
Kernel: R10: 0000009c003f6e00 R11: ffffbc1e02800000 R12: ffffbc1e000d9000
Kernel: R13: ffffbc1e000db428 R14: ffff9c6db7478800 R15: ffff9c761e884e80
Kernel: CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
Kernel: CR2: fffffffffffffff0 CR3: 00000009e260a004 CR4: 00000000007706f0
Kernel: DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
Kernel: DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
Kernel: PKRU: 55555554
Kernel: Call Trace:
Kernel: ? flow_indr_dev_register+0xab/0x210
Kernel: ? __cond_resched+0x15/0x30
Kernel: ? kmem_cache_alloc_trace+0x44/0x4b0
Kernel: ? nfp_flower_setup_tc+0x1d0/0x1d0 [nfp]
Kernel: flow_indr_dev_register+0x158/0x210
Kernel: ? tcf_block_unbind+0xe0/0xe0
Kernel: nfp_flower_init+0x40b/0x650 [nfp]
Kernel: nfp_net_pci_probe+0x25f/0x960 [nfp]
Kernel: ? nfp_rtsym_read_le+0x76/0x130 [nfp]
Kernel: nfp_pci_probe+0x6a9/0x820 [nfp]
Kernel: local_pci_probe+0x45/0x80

So we need to call flow_indr_dev_register in app start process instead of
init stage.

Fixes: 74fc4f828769 ("net: Fix offloading indirect devices dependency on qdisc order creation")
Signed-off-by: Baowen Zheng <baowen.zheng@corigine.com>
Signed-off-by: Simon Horman <simon.horman@corigine.com>
Signed-off-by: Louis Peens <louis.peens@corigine.com>
Link: https://lore.kernel.org/r/20211012124850.13025-1-louis.peens@corigine.com
Signed-off-by: Jakub Kicinski <kuba@kernel.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Acked-by: Takashi Iwai <tiwai@suse.de>

---
 .../net/ethernet/netronome/nfp/flower/main.c  | 19 ++++++++++++++-----
 1 file changed, 14 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/netronome/nfp/flower/main.c b/drivers/net/ethernet/netronome/nfp/flower/main.c
index c029950a81e2..ac1dcfa1d179 100644
--- a/drivers/net/ethernet/netronome/nfp/flower/main.c
+++ b/drivers/net/ethernet/netronome/nfp/flower/main.c
@@ -830,10 +830,6 @@ static int nfp_flower_init(struct nfp_app *app)
 	if (err)
 		goto err_cleanup;
 
-	err = flow_indr_dev_register(nfp_flower_indr_setup_tc_cb, app);
-	if (err)
-		goto err_cleanup;
-
 	if (app_priv->flower_ext_feats & NFP_FL_FEATS_VF_RLIM)
 		nfp_flower_qos_init(app);
 
@@ -942,7 +938,20 @@ static int nfp_flower_start(struct nfp_app *app)
 			return err;
 	}
 
-	return nfp_tunnel_config_start(app);
+	err = flow_indr_dev_register(nfp_flower_indr_setup_tc_cb, app);
+	if (err)
+		return err;
+
+	err = nfp_tunnel_config_start(app);
+	if (err)
+		goto err_tunnel_config;
+
+	return 0;
+
+err_tunnel_config:
+	flow_indr_dev_unregister(nfp_flower_indr_setup_tc_cb, app,
+				 nfp_flower_setup_indr_tc_release);
+	return err;
 }
 
 static void nfp_flower_stop(struct nfp_app *app)
-- 
2.26.2

