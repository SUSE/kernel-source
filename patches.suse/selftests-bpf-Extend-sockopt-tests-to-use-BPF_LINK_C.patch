From: Stanislav Fomichev <sdf@google.com>
Date: Fri, 26 Apr 2024 16:16:19 -0700
Subject: selftests/bpf: Extend sockopt tests to use BPF_LINK_CREATE
Patch-mainline: v6.10-rc1
Git-commit: d70b2660e75b85bdaa9d75f9c4224c2f6f89cf23
References: bsc#1226789 CVE-2024-38564
X-Info: deviation from upstream's run_test() function signature because commit b9ec913212e6e "selftests/bpf/sockopt: Add io_uring support" is not backported

Run all existing test cases with the attachment created via
BPF_LINK_CREATE. Next commit will add extra test cases to verify
link_create attach_type enforcement.

Signed-off-by: Stanislav Fomichev <sdf@google.com>
Acked-by: Eduard Zingerman <eddyz87@gmail.com>
Link: https://lore.kernel.org/r/20240426231621.2716876-3-sdf@google.com
Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
Acked-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
---
 tools/testing/selftests/bpf/prog_tests/sockopt.c |   21 ++++++++++++++++-----
 1 file changed, 16 insertions(+), 5 deletions(-)

--- a/tools/testing/selftests/bpf/prog_tests/sockopt.c
+++ b/tools/testing/selftests/bpf/prog_tests/sockopt.c
@@ -940,9 +940,9 @@ static int load_prog(const struct bpf_in
 	return fd;
 }
 
-static int run_test(int cgroup_fd, struct sockopt_test *test)
+static int run_test(int cgroup_fd, struct sockopt_test *test, bool use_link)
 {
-	int sock_fd, err, prog_fd;
+	int sock_fd, err, prog_fd, link_fd = -1;
 	void *optval = NULL;
 	int ret = 0;
 
@@ -955,7 +955,12 @@ static int run_test(int cgroup_fd, struc
 		return -1;
 	}
 
-	err = bpf_prog_attach(prog_fd, cgroup_fd, test->attach_type, 0);
+	if (use_link) {
+		err = bpf_link_create(prog_fd, cgroup_fd, test->attach_type, NULL);
+		link_fd = err;
+	} else {
+		err = bpf_prog_attach(prog_fd, cgroup_fd, test->attach_type, 0);
+	}
 	if (err < 0) {
 		if (test->error == DENY_ATTACH)
 			goto close_prog_fd;
@@ -1045,7 +1050,12 @@ free_optval:
 close_sock_fd:
 	close(sock_fd);
 detach_prog:
-	bpf_prog_detach2(prog_fd, cgroup_fd, test->attach_type);
+	if (use_link) {
+		if (link_fd >= 0)
+			close(link_fd);
+	} else {
+		bpf_prog_detach2(prog_fd, cgroup_fd, test->attach_type);
+	}
 close_prog_fd:
 	close(prog_fd);
 	return ret;
@@ -1063,7 +1073,8 @@ void test_sockopt(void)
 		if (!test__start_subtest(tests[i].descr))
 			continue;
 
-		ASSERT_OK(run_test(cgroup_fd, &tests[i]), tests[i].descr);
+		ASSERT_OK(run_test(cgroup_fd, &tests[i], false), tests[i].descr);
+		ASSERT_OK(run_test(cgroup_fd, &tests[i], true), tests[i].descr);
 	}
 
 	close(cgroup_fd);
