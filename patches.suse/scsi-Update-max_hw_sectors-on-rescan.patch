From 205dab4fe5cf49ee40ef78e934db19a289a58c88 Mon Sep 17 00:00:00 2001
From: Brian King <brking@linux.vnet.ibm.com>
Date: Wed, 25 Oct 2023 12:34:12 -0500
Subject: [PATCH] scsi: Update max_hw_sectors on rescan
Patch-mainline: Never, SUSE-specific
References: bsc#1216223

This addresses an issue discovered on ibmvfc LUNs. For this driver,
max_sectors is negotiated with the VIOS. This gets done at initialization
time, then LUNs get scanned and things generally work fine. However,
this attribute can be changed on the VIOS, either due to a sysadmin
change or potentially a VIOS code level change. If this decreases
to a smaller value, due to one of these reasons, the next time the
ibmvfc driver performs an NPIV login, it will only be able to use
the smaller value. In the case of a VIOS reboot, when the VIOS goes
down, all paths through that VIOS will go to devloss state. When
the VIOS comes back up, ibmvfc negotiates max_sectors and will only
be able to get the smaller value and it will update shost->max_sectors.
However, when LUNs are scanned, the devloss paths will be found
and brought back online, still using the old max_hw_sectors. This
change ensures that max_hw_sectors gets updated.

Signed-off-by: Brian King <brking@linux.vnet.ibm.com>
Acked-by: Hannes Reinecke <hare@suse.de>
---
 drivers/scsi/scsi_scan.c |    5 +++++
 1 file changed, 5 insertions(+)

--- a/drivers/scsi/scsi_scan.c
+++ b/drivers/scsi/scsi_scan.c
@@ -1127,6 +1127,7 @@ static int scsi_probe_and_add_lun(struct
 	blist_flags_t bflags;
 	int res = SCSI_SCAN_NO_RESPONSE, result_len = 256;
 	struct Scsi_Host *shost = dev_to_shost(starget->dev.parent);
+	struct request_queue *q;
 
 	/*
 	 * The rescan flag is used as an optimization, the first scan of a
@@ -1147,6 +1148,10 @@ static int scsi_probe_and_add_lun(struct
 				*bflagsp = scsi_get_device_flags(sdev,
 								 sdev->vendor,
 								 sdev->model);
+			q = sdev->request_queue;
+			if (queue_max_hw_sectors(q) > shost->max_sectors)
+				blk_queue_max_hw_sectors(q, shost->max_sectors);
+
 			return SCSI_SCAN_LUN_PRESENT;
 		}
 		scsi_device_put(sdev);
