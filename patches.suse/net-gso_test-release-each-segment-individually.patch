From: Florian Westphal <fw@strlen.de>
Date: Thu, 12 Oct 2023 14:02:37 +0200
Subject: net: gso_test: release each segment individually
Patch-mainline: v6.7-rc1
Git-commit: 1b2d3b45c1941453703d70f46b70ab8985303b5d
References: jsc#PED-9947

consume_skb() doesn't walk the segment list, so segments other than
the first are leaked.

Move this skb_consume call into the loop.

Cc: Willem de Bruijn <willemb@google.com>
Fixes: b3098d32ed6e ("net: add skb_segment kunit test")
Signed-off-by: Florian Westphal <fw@strlen.de>
Reviewed-by: Willem de Bruijn <willemb@google.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Acked-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
---
 net/core/gso_test.c |   14 +++++++++-----
 1 file changed, 9 insertions(+), 5 deletions(-)

--- a/net/core/gso_test.c
+++ b/net/core/gso_test.c
@@ -144,8 +144,8 @@ KUNIT_ARRAY_PARAM(gso_test, cases, gso_t
 static void gso_test_func(struct kunit *test)
 {
 	const int shinfo_size = SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
+	struct sk_buff *skb, *segs, *cur, *next, *last;
 	const struct gso_test_case *tcase;
-	struct sk_buff *skb, *segs, *cur;
 	netdev_features_t features;
 	struct page *page;
 	int i;
@@ -236,7 +236,10 @@ static void gso_test_func(struct kunit *
 		goto free_gso_skb;
 	}
 
-	for (cur = segs, i = 0; cur; cur = cur->next, i++) {
+	last = segs->prev;
+	for (cur = segs, i = 0; cur; cur = next, i++) {
+		next = cur->next;
+
 		KUNIT_ASSERT_EQ(test, cur->len, sizeof(hdr) + tcase->segs[i]);
 
 		/* segs have skb->data pointing to the mac header */
@@ -247,13 +250,14 @@ static void gso_test_func(struct kunit *
 		KUNIT_ASSERT_EQ(test, memcmp(skb_mac_header(cur), hdr, sizeof(hdr)), 0);
 
 		/* last seg can be found through segs->prev pointer */
-		if (!cur->next)
-			KUNIT_ASSERT_PTR_EQ(test, cur, segs->prev);
+		if (!next)
+			KUNIT_ASSERT_PTR_EQ(test, cur, last);
+
+		consume_skb(cur);
 	}
 
 	KUNIT_ASSERT_EQ(test, i, tcase->nr_segs);
 
-	consume_skb(segs);
 free_gso_skb:
 	consume_skb(skb);
 }
