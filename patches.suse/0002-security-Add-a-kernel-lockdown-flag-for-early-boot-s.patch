From 8590e50095f5de31f7083ebd1fd0df5b52ea4b4b Mon Sep 17 00:00:00 2001
From: Chun-Yi Lee <jlee@suse.com>
Date: Thu, 19 Dec 2024 13:49:09 +0800
Subject: [PATCH 2/5] security: Add a kernel lockdown flag for early boot stage
Patch-mainline: Never, temporary solution
References: bsc#1234646

This is a a temporary solution. After the patch '77b644c39d6a init/main.c:
Initialize early LSMs after arch code, static keys and calls' be introduced
to v6.12 kernel. The early_security_init() be moved behine setup_arch(). It
causes that thee original code of CONFIG_LOCK_DOWN_IN_EFI_SECURE_BOOT in
setup_arch() is invalid.

The lockdown_early.c file includes two functions which are copied from
security/lockdown/lockdown.c and just simply modified for keeping the
original calling habits. For filling in the gap, I go back to use a
lock flag in early boot stage before the lockdown LSM be initial after
setup_arch(). The reason for creating a new C files instead of direct
modifing lockdown.c is to avoid compromising the security of lockdown LSM.

This solution only be used in limited lock-down functions in setup_arch()
or even in early_initcall stage. I will removed this temporary solution
after the real solution shows on kernel mainline.

References: https://bugzilla.opensuse.org/show_bug.cgi?id=1234646
Signed-off-by: Chun-Yi Lee <jlee@suse.com>
---
 include/linux/kernel.h    |    9 ++++++
 include/linux/security.h  |    9 ++++++
 security/Kconfig          |    8 +++++
 security/Makefile         |    3 ++
 security/lockdown_early.c |   63 ++++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 92 insertions(+)
 create mode 100644 security/lockdown_early.c

--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@ -402,4 +402,13 @@ static inline void ftrace_dump(enum ftra
 	 /* OTHER_WRITABLE?  Generally considered a bad idea. */		\
 	 BUILD_BUG_ON_ZERO((perms) & 2) +					\
 	 (perms))
+
+#ifdef CONFIG_LOCK_DOWN_KERNEL_EARLY
+int kernel_is_locked_down_early(int what);
+#else
+static inline int kernel_is_locked_down_early(int what)
+{
+	return 0;
+}
+#endif
 #endif
--- a/include/linux/security.h
+++ b/include/linux/security.h
@@ -2381,4 +2381,13 @@ static inline void security_initramfs_po
 }
 #endif /* CONFIG_SECURITY */
 
+#ifdef CONFIG_LOCK_DOWN_KERNEL_EARLY
+int __init lock_kernel_down_early(const char *where, enum lockdown_reason level);
+#else
+static inline int lock_kernel_down_early(const char *where, enum lockdown_reason level)
+{
+	return 0;
+}
+#endif
+
 #endif /* ! __LINUX_SECURITY_H */
--- a/security/Kconfig
+++ b/security/Kconfig
@@ -215,6 +215,14 @@ config STATIC_USERMODEHELPER_PATH
 	  If you wish for all usermode helper programs to be disabled,
 	  specify an empty string here (i.e. "").
 
+config LOCK_DOWN_KERNEL_EARLY
+       bool "Allow the kernel to be 'locked down' in early boot stage"
+       help
+         Allow the kernel to be locked down under certain circumstances in
+         early boot stagse, for instance if UEFI secure boot is enabled.
+         Locking down the kernel turns off various features that might
+         otherwise allow access to the kernel image.
+
 source "security/selinux/Kconfig"
 source "security/smack/Kconfig"
 source "security/tomoyo/Kconfig"
--- a/security/Makefile
+++ b/security/Makefile
@@ -29,3 +29,6 @@ obj-$(CONFIG_SECURITY_IPE)		+= ipe/
 
 # Object integrity file lists
 obj-$(CONFIG_INTEGRITY)			+= integrity/
+
+# Allow the kernel to be locked down in early boot stage
+obj-$(CONFIG_LOCK_DOWN_KERNEL_EARLY)	+= lockdown_early.o
--- /dev/null
+++ b/security/lockdown_early.c
@@ -0,0 +1,63 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Lock down flag of the kernel in early stage
+ *
+ * Copyright (c) 2024 SUSE LLC. All Rights Reserved.
+ * Written by Joey Lee (jlee@suse.com)
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public Licence
+ * as published by the Free Software Foundation; either version
+ * 2 of the Licence, or (at your option) any later version.
+ */
+/* This is a a temporary solution. After the patch '77b644c39d6a init/main.c:
+ * Initialize early LSMs after arch code, static keys and calls' be introduced
+ * to v6.12 kernel. The early_security_init() be moved behine setup_arch().
+ * It causes that thee original code of CONFIG_LOCK_DOWN_IN_EFI_SECURE_BOOT in
+ * setup_arch() is invalid.
+ *
+ * This file includes two functions which are copied from
+ * security/lockdown/lockdown.c and just simply modified for keeping the
+ * original calling habits. For filling in the gap, I go back to use a lock
+ * flag in early boot stage before the lockdown LSM be initial after
+ * setup_arch(). The reason for creating a new C files instead of direct
+ * modifing lockdown.c is to avoid compromising the security of lockdown LSM.
+ *
+ * This solution only be used in limited lock-down functions in setup_arch()
+ * or even in early_initcall stage. I will removed this temporary solution
+ * after the real solution shows on kernel mainline.
+ */
+
+#include <linux/security.h>
+
+static enum lockdown_reason kernel_locked_down_early __ro_after_init;
+
+static const enum lockdown_reason early_lockdown_levels[] = {LOCKDOWN_NONE,
+						 LOCKDOWN_INTEGRITY_MAX,
+						 LOCKDOWN_CONFIDENTIALITY_MAX};
+
+int __init lock_kernel_down_early(const char *where, enum lockdown_reason level)
+{
+	if (kernel_locked_down_early >= level)
+		return -EPERM;
+
+	kernel_locked_down_early = level;
+	pr_notice("Kernel is early locked down from %s; see man kernel_lockdown.7\n",
+		  where);
+	return 0;
+}
+
+int kernel_is_locked_down_early(int what)
+{
+	if (WARN(what >= LOCKDOWN_CONFIDENTIALITY_MAX,
+		 "Invalid lockdown reason"))
+		return -EPERM;
+
+	if (kernel_locked_down_early >= what) {
+		if (lockdown_reasons[what])
+			pr_notice_ratelimited("Lockdown early: %s: %s is restricted; see man kernel_lockdown.7\n",
+				  current->comm, lockdown_reasons[what]);
+		return -EPERM;
+	}
+
+	return 0;
+}
