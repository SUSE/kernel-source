From: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Date: Fri, 29 Dec 2023 18:17:44 +0800
Subject: selftests/bpf: user_ringbuf.c define c_ringbuf_size
Patch-mainline: never, SUSE-specific
References: jsc#PED-6811

Fix build error that only occur on GCC <= 7, where `static const` variable
cannot be used in initializer element.

  TEST-OBJ [test_progs] user_ringbuf.test.o
/usr/src/linux-6.4.0-150600.5/tools/testing/selftests/bpf/prog_tests/user_ringbuf.c:24:35: error: initializer element is not constant
 static const long c_max_entries = c_ringbuf_size / c_sample_size;
                                   ^~~~~~~~~~~~~~

Use #define to declare such constants instead.

Signed-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
---
 tools/testing/selftests/bpf/prog_tests/user_ringbuf.c |   24 +++++++++---------
 1 file changed, 12 insertions(+), 12 deletions(-)

--- a/tools/testing/selftests/bpf/prog_tests/user_ringbuf.c
+++ b/tools/testing/selftests/bpf/prog_tests/user_ringbuf.c
@@ -19,9 +19,9 @@
 
 #include "../progs/test_user_ringbuf.h"
 
-static const long c_sample_size = sizeof(struct sample) + BPF_RINGBUF_HDR_SZ;
-static const long c_ringbuf_size = 1 << 12; /* 1 small page */
-static const long c_max_entries = c_ringbuf_size / c_sample_size;
+#define C_SAMPLE_SIZE  (sizeof(struct sample) + BPF_RINGBUF_HDR_SZ)
+#define C_RINGBUF_SIZE (1 << 12) /* 1 small page */
+#define C_MAX_ENTRIES  (C_RINGBUF_SIZE / C_SAMPLE_SIZE)
 
 static void drain_current_samples(void)
 {
@@ -76,11 +76,11 @@ static struct user_ringbuf_success *open
 	if (!ASSERT_OK_PTR(skel, "skel_open"))
 		return NULL;
 
-	err = bpf_map__set_max_entries(skel->maps.user_ringbuf, c_ringbuf_size);
+	err = bpf_map__set_max_entries(skel->maps.user_ringbuf, C_RINGBUF_SIZE);
 	if (!ASSERT_OK(err, "set_max_entries"))
 		goto cleanup;
 
-	err = bpf_map__set_max_entries(skel->maps.kernel_ringbuf, c_ringbuf_size);
+	err = bpf_map__set_max_entries(skel->maps.kernel_ringbuf, C_RINGBUF_SIZE);
 	if (!ASSERT_OK(err, "set_max_entries"))
 		goto cleanup;
 
@@ -269,7 +269,7 @@ static void test_user_ringbuf_post_large
 	struct user_ringbuf_success *skel;
 	struct user_ring_buffer *ringbuf;
 	int err;
-	__u32 size = c_ringbuf_size;
+	__u32 size = C_RINGBUF_SIZE;
 
 	err = load_skel_create_user_ringbuf(&skel, &ringbuf);
 	if (!ASSERT_OK(err, "huge_sample_skel"))
@@ -314,7 +314,7 @@ static void test_user_ringbuf_sample_ful
 	if (!ASSERT_OK(err, "ringbuf_full_sample_skel"))
 		return;
 
-	sample = user_ring_buffer__reserve(ringbuf, c_ringbuf_size - BPF_RINGBUF_HDR_SZ);
+	sample = user_ring_buffer__reserve(ringbuf, C_RINGBUF_SIZE - BPF_RINGBUF_HDR_SZ);
 	if (!ASSERT_OK_PTR(sample, "full_sample"))
 		goto cleanup;
 
@@ -362,9 +362,9 @@ static void test_user_ringbuf_overfill(v
 	if (err)
 		return;
 
-	err = write_samples(ringbuf, c_max_entries * 5);
+	err = write_samples(ringbuf, C_MAX_ENTRIES * 5);
 	ASSERT_ERR(err, "write_samples");
-	ASSERT_EQ(skel->bss->read, c_max_entries, "max_entries");
+	ASSERT_EQ(skel->bss->read, C_MAX_ENTRIES, "max_entries");
 
 	user_ring_buffer__free(ringbuf);
 	user_ringbuf_success__destroy(skel);
@@ -423,7 +423,7 @@ static void test_user_ringbuf_loop(void)
 	uint32_t remaining_samples = total_samples;
 	int err;
 
-	BUILD_BUG_ON(total_samples <= c_max_entries);
+	BUILD_BUG_ON(total_samples <= C_MAX_ENTRIES);
 	err = load_skel_create_user_ringbuf(&skel, &ringbuf);
 	if (err)
 		return;
@@ -431,8 +431,8 @@ static void test_user_ringbuf_loop(void)
 	do  {
 		uint32_t curr_samples;
 
-		curr_samples = remaining_samples > c_max_entries
-			? c_max_entries : remaining_samples;
+		curr_samples = remaining_samples > C_MAX_ENTRIES
+			? C_MAX_ENTRIES : remaining_samples;
 		err = write_samples(ringbuf, curr_samples);
 		if (err != 0) {
 			/* Assert inside of if statement to avoid flooding logs
