From 7addb4724db6fb1cdf02f5a04cbd296d9b53c26e Mon Sep 17 00:00:00 2001
From: Oliver Neukum <oneukum@suse.de>
Date: Thu, 7 Feb 2013 17:29:03 +0100
Subject: [PATCH 2/3] Add a void* suse_kabi_padding placeholder to some USB
 structures
Patch-mainline: Never, kabi
References: fate#312013

---
 include/linux/usb.h        |   14 ++++++++++++++
 include/linux/usb/hcd.h    |    3 +++
 include/linux/usb/usbnet.h |    3 +++
 3 files changed, 20 insertions(+)

--- a/include/linux/usb.h
+++ b/include/linux/usb.h
@@ -268,6 +268,7 @@ struct usb_interface {
 	struct device dev;		/* interface specific device info */
 	struct device *usb_dev;
 	struct work_struct reset_ws;	/* for resets in atomic context */
+	void *suse_kabi_padding;
 };
 
 #define to_usb_interface(__dev)	container_of_const(__dev, struct usb_interface, dev)
@@ -429,6 +430,7 @@ struct usb_host_bos {
 	struct usb_ssp_cap_descriptor	*ssp_cap;
 	struct usb_ss_container_id_descriptor	*ss_id;
 	struct usb_ptm_cap_descriptor	*ptm_cap;
+	void *suse_kabi_padding;
 };
 
 int __usb_get_extra_descriptor(char *buffer, unsigned size,
@@ -487,6 +489,7 @@ struct usb_bus {
 	struct mon_bus *mon_bus;	/* non-null when associated */
 	int monitored;			/* non-zero when monitored */
 #endif
+	void *suse_kabi_padding;
 };
 
 struct usb_dev_state;
@@ -731,6 +734,8 @@ struct usb_device {
 
 	u16 hub_delay;
 	unsigned use_generic_driver:1;
+
+	void *suse_kabi_padding;
 };
 
 #define to_usb_device(__dev)	container_of_const(__dev, struct usb_device, dev)
@@ -1238,6 +1243,9 @@ struct usb_driver {
 
 	struct usb_dynids dynids;
 	struct device_driver driver;
+
+	void *suse_kabi_padding;
+
 	unsigned int no_dynamic_id:1;
 	unsigned int supports_autosuspend:1;
 	unsigned int disable_hub_initiated_lpm:1;
@@ -1291,6 +1299,9 @@ struct usb_device_driver {
 	const struct attribute_group **dev_groups;
 	struct device_driver driver;
 	const struct usb_device_id *id_table;
+
+	void *suse_kabi_padding;
+
 	unsigned int supports_autosuspend:1;
 	unsigned int generic_subclass:1;
 };
@@ -1631,6 +1642,9 @@ struct urb {
 	int error_count;		/* (return) number of ISO errors */
 	void *context;			/* (in) context for completion */
 	usb_complete_t complete;	/* (in) completion routine */
+
+	void *suse_kabi_padding;
+
 	struct usb_iso_packet_descriptor iso_frame_desc[];
 					/* (in) ISO ONLY */
 };
--- a/include/linux/usb/hcd.h
+++ b/include/linux/usb/hcd.h
@@ -213,6 +213,7 @@ struct usb_hcd {
 	 * (ohci 32, uhci 1024, ehci 256/512/1024).
 	 */
 
+	void *suse_kabi_padding;
 	/* The HC driver's private data is stored at the end of
 	 * this structure.
 	 */
@@ -404,6 +405,8 @@ struct hc_driver {
 #define EHSET_TEST_SINGLE_STEP_SET_FEATURE 0x06
 	int	(*submit_single_step_set_feature)(struct usb_hcd *,
 			struct urb *, int);
+
+	void *suse_kabi_padding;
 };
 
 static inline int hcd_giveback_urb_in_bh(struct usb_hcd *hcd)
--- a/include/linux/usb/usbnet.h
+++ b/include/linux/usb/usbnet.h
@@ -81,6 +81,8 @@ struct usbnet {
  * that must be broken
  */
 #		define EVENT_UNPLUG		31
+
+	void *suse_kabi_padding;
 };
 
 static inline bool usbnet_going_away(struct usbnet *ubn)
@@ -180,6 +182,7 @@ struct driver_info {
 	int		out;		/* tx endpoint */
 
 	unsigned long	data;		/* Misc driver specific data */
+	void *suse_kabi_padding;
 };
 
 /* Minidrivers are just drivers using the "usbnet" core as a powerful
