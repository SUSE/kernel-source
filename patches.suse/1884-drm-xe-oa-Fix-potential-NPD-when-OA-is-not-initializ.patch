From c372c355dc85be751a7e843094eb65a2f963107b Mon Sep 17 00:00:00 2001
From: Michal Wajdeczko <michal.wajdeczko@intel.com>
Date: Wed, 19 Jun 2024 19:54:27 +0200
Subject: drm/xe/oa: Fix potential NPD when OA is not initialized
Git-commit: cb925d31f091467dee09dd49eab8bcd2c9b3e73e
Patch-mainline: v6.11-rc1
References: jsc#PED-9898 jsc#PED-10191 jsc#PED-10197 jsc#PED-10226 jsc#PED-10237 jsc#PED-10340 jsc#PED-10852 jsc#PED-11022

If oa->xe can be NULL then we shall not use it as a valid pointer.

Fixes: cdf02fe1a94a ("drm/xe/oa/uapi: Add/remove OA config perf ops")
Fixes: b6fd51c62119 ("drm/xe/oa/uapi: Define and parse OA stream properties")
Signed-off-by: Michal Wajdeczko <michal.wajdeczko@intel.com>
Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
Cc: Ashutosh Dixit <ashutosh.dixit@intel.com>
Cc: Umesh Nerlige Ramappa <umesh.nerlige.ramappa@intel.com>
Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
Reviewed-by: Ashutosh Dixit <ashutosh.dixit@intel.com>
Signed-off-by: Ashutosh Dixit <ashutosh.dixit@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20240619175427.861-1-michal.wajdeczko@intel.com
Acked-by: Patrik Jakobsson <pjakobsson@suse.de>
---
 drivers/gpu/drm/xe/xe_oa.c | 15 +++++++++------
 1 file changed, 9 insertions(+), 6 deletions(-)

diff --git a/drivers/gpu/drm/xe/xe_oa.c b/drivers/gpu/drm/xe/xe_oa.c
index 34206e0b6a08..2277af816a34 100644
--- a/drivers/gpu/drm/xe/xe_oa.c
+++ b/drivers/gpu/drm/xe/xe_oa.c
@@ -1725,7 +1725,8 @@ static int xe_oa_user_extensions(struct xe_oa *oa, u64 extension, int ext_number
  */
 int xe_oa_stream_open_ioctl(struct drm_device *dev, u64 data, struct drm_file *file)
 {
-	struct xe_oa *oa = &to_xe_device(dev)->oa;
+	struct xe_device *xe = to_xe_device(dev);
+	struct xe_oa *oa = &xe->oa;
 	struct xe_file *xef = to_xe_file(file);
 	struct xe_oa_open_param param = {};
 	const struct xe_oa_format *f;
@@ -1733,7 +1734,7 @@ int xe_oa_stream_open_ioctl(struct drm_device *dev, u64 data, struct drm_file *f
 	int ret;
 
 	if (!oa->xe) {
-		drm_dbg(&oa->xe->drm, "xe oa interface not available for this system\n");
+		drm_dbg(&xe->drm, "xe oa interface not available for this system\n");
 		return -ENODEV;
 	}
 
@@ -2005,7 +2006,8 @@ static int create_dynamic_oa_sysfs_entry(struct xe_oa *oa,
  */
 int xe_oa_add_config_ioctl(struct drm_device *dev, u64 data, struct drm_file *file)
 {
-	struct xe_oa *oa = &to_xe_device(dev)->oa;
+	struct xe_device *xe = to_xe_device(dev);
+	struct xe_oa *oa = &xe->oa;
 	struct drm_xe_oa_config param;
 	struct drm_xe_oa_config *arg = &param;
 	struct xe_oa_config *oa_config, *tmp;
@@ -2013,7 +2015,7 @@ int xe_oa_add_config_ioctl(struct drm_device *dev, u64 data, struct drm_file *fi
 	int err, id;
 
 	if (!oa->xe) {
-		drm_dbg(&oa->xe->drm, "xe oa interface not available for this system\n");
+		drm_dbg(&xe->drm, "xe oa interface not available for this system\n");
 		return -ENODEV;
 	}
 
@@ -2106,13 +2108,14 @@ int xe_oa_add_config_ioctl(struct drm_device *dev, u64 data, struct drm_file *fi
  */
 int xe_oa_remove_config_ioctl(struct drm_device *dev, u64 data, struct drm_file *file)
 {
-	struct xe_oa *oa = &to_xe_device(dev)->oa;
+	struct xe_device *xe = to_xe_device(dev);
+	struct xe_oa *oa = &xe->oa;
 	struct xe_oa_config *oa_config;
 	u64 arg, *ptr = u64_to_user_ptr(data);
 	int ret;
 
 	if (!oa->xe) {
-		drm_dbg(&oa->xe->drm, "xe oa interface not available for this system\n");
+		drm_dbg(&xe->drm, "xe oa interface not available for this system\n");
 		return -ENODEV;
 	}
 
-- 
2.46.1

