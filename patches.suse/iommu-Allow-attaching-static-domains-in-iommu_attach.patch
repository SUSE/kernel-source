From: Lu Baolu <baolu.lu@linux.intel.com>
Subject: [PATCH v2 1/1] iommu: Allow attaching static domains in iommu_attach_device_pasid()
Date: Wed, 23 Apr 2025 10:18:39 +0800
Message-id: <20250423021839.2189204-1-baolu.lu@linux.intel.com>
Patch-mainline: Submitted, linux-iommu ML
References: bsc#1241193

The idxd driver attaches the default domain to a PASID of the device to
perform kernel DMA using that PASID. The domain is attached to the
device's PASID through iommu_attach_device_pasid(), which checks if the
domain->owner matches the iommu_ops retrieved from the device. If they
do not match, it returns a failure.

        if (ops != domain->owner || pasid == IOMMU_NO_PASID)
                return -EINVAL;

The static identity domain implemented by the intel iommu driver doesn't
specify the domain owner. Therefore, kernel DMA with PASID doesn't work
for the idxd driver if the device translation mode is set to passthrough.

Generally the owner field of static domains are not set because they are
already part of iommu ops. Add a helper domain_iommu_ops_compatible()
that checks if a domain is compatible with the device's iommu ops. This
helper explicitly allows the static blocked and identity domains associated
with the device's iommu_ops to be considered compatible.

Fixes: 2031c469f816 ("iommu/vt-d: Add support for static identity domain")
Closes: https://bugzilla.kernel.org/show_bug.cgi?id=220031
Cc: stable@vger.kernel.org
Suggested-by: Jason Gunthorpe <jgg@nvidia.com>
Link: https://lore.kernel.org/linux-iommu/20250422191554.GC1213339@ziepe.ca/
Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
Acked-by: Takashi Iwai <tiwai@suse.de>

---
 drivers/iommu/iommu.c |   18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

Change log:
-v2:
 - Make the solution generic for all static domains as suggested by
   Jason.
-v1: https://lore.kernel.org/linux-iommu/20250422075422.2084548-1-baolu.lu@linux.intel.com/

--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@ -3363,6 +3363,19 @@ static void __iommu_remove_group_pasid(s
 	}
 }
 
+static bool domain_iommu_ops_compatible(const struct iommu_ops *ops,
+					struct iommu_domain *domain)
+{
+	if (domain->owner == ops)
+		return true;
+
+	/* For static domains, owner isn't set. */
+	if (domain == ops->blocked_domain || domain == ops->identity_domain)
+		return true;
+
+	return false;
+}
+
 /*
  * iommu_attach_device_pasid() - Attach a domain to pasid of device
  * @domain: the iommu domain.
@@ -3387,8 +3400,9 @@ int iommu_attach_device_pasid(struct iom
 	if (!group)
 		return -ENODEV;
 
-	if (!dev_has_iommu(dev) || dev_iommu_ops(dev) != domain->owner ||
-	    pasid == IOMMU_NO_PASID)
+	if (!dev_has_iommu(dev) ||
+	   !domain_iommu_ops_compatible(dev_iommu_ops(dev), domain) ||
+	   pasid == IOMMU_NO_PASID)
 		return -EINVAL;
 
 	mutex_lock(&group->mutex);
