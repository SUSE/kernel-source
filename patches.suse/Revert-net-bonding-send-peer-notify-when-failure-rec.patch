From: Jiri Slaby <jslaby@suse.cz>
Date: Tue, 14 Oct 2025 10:37:48 +0200
Subject: Revert "net: bonding: send peer notify when failure recovery"
References: bsc#1250894
Patch-mainline: never, temporary revert

This reverts commit 2f9afffc399d450c68a4dbebd7865b8e631a3cff.

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 Documentation/networking/bonding.rst |    5 ++---
 drivers/net/bonding/bond_3ad.c       |   13 -------------
 drivers/net/bonding/bond_main.c      |   25 +++++--------------------
 3 files changed, 7 insertions(+), 36 deletions(-)

--- a/Documentation/networking/bonding.rst
+++ b/Documentation/networking/bonding.rst
@@ -773,9 +773,8 @@ num_unsol_na
 	greater than 1.
 
 	The valid range is 0 - 255; the default value is 1.  These options
-	affect the active-backup or 802.3ad (broadcast_neighbor enabled) mode.
-	These options were added for bonding versions 3.3.0 and 3.4.0
-	respectively.
+	affect only the active-backup mode.  These options were added for
+	bonding versions 3.3.0 and 3.4.0 respectively.
 
 	From Linux 3.0 and bonding version 3.7.1, these notifications
 	are generated by the ipv4 and ipv6 code and the numbers of
--- a/drivers/net/bonding/bond_3ad.c
+++ b/drivers/net/bonding/bond_3ad.c
@@ -982,17 +982,6 @@ static int ad_marker_send(struct port *p
 	return 0;
 }
 
-static void ad_cond_set_peer_notif(struct port *port)
-{
-	struct bonding *bond = port->slave->bond;
-
-	if (bond->params.broadcast_neighbor && rtnl_trylock()) {
-		bond->send_peer_notif = bond->params.num_peer_notif *
-			max(1, bond->params.peer_notif_delay);
-		rtnl_unlock();
-	}
-}
-
 /**
  * ad_mux_machine - handle a port's mux state machine
  * @port: the port we're looking at
@@ -2079,8 +2068,6 @@ static void ad_enable_collecting_distrib
 		__enable_port(port);
 		/* Slave array needs update */
 		*update_slave_arr = true;
-		/* Should notify peers if possible */
-		ad_cond_set_peer_notif(port);
 	}
 }
 
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -1237,32 +1237,17 @@ static struct slave *bond_find_best_slav
 /* must be called in RCU critical section or with RTNL held */
 static bool bond_should_notify_peers(struct bonding *bond)
 {
-	struct bond_up_slave *usable;
-	struct slave *slave = NULL;
+	struct slave *slave = rcu_dereference_rtnl(bond->curr_active_slave);
 
-	if (!bond->send_peer_notif ||
+	if (!slave || !bond->send_peer_notif ||
 	    bond->send_peer_notif %
 	    max(1, bond->params.peer_notif_delay) != 0 ||
-	    !netif_carrier_ok(bond->dev))
+	    !netif_carrier_ok(bond->dev) ||
+	    test_bit(__LINK_STATE_LINKWATCH_PENDING, &slave->dev->state))
 		return false;
 
-	/* The send_peer_notif is set by active-backup or 8023ad
-	 * mode, and cleared in bond_close() when changing mode.
-	 * It is safe to only check bond mode here.
-	 */
-	if (BOND_MODE(bond) == BOND_MODE_8023AD) {
-		usable = rcu_dereference_rtnl(bond->usable_slaves);
-		if (!usable || !READ_ONCE(usable->count))
-			return false;
-	} else {
-		slave = rcu_dereference_rtnl(bond->curr_active_slave);
-		if (!slave || test_bit(__LINK_STATE_LINKWATCH_PENDING,
-				       &slave->dev->state))
-			return false;
-	}
-
 	netdev_dbg(bond->dev, "bond_should_notify_peers: slave %s\n",
-		   slave ? slave->dev->name : "all");
+		   slave ? slave->dev->name : "NULL");
 
 	return true;
 }
