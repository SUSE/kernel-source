From: John Ogness <john.ogness@linutronix.de>
Date: Mon, 17 Jul 2023 21:52:07 +0206
Subject: printk: Rename abandon_console_lock_in_panic() to
 other_cpu_in_panic()
Git-commit: 132a90d1527fedba2d95085c951ccf00dbbebe41
Patch-mainline: v6.6-rc1
References: bsc#1223574

Currently abandon_console_lock_in_panic() is only used to determine if
the current CPU should immediately release the console lock because
another CPU is in panic. However, later this function will be used by
the CPU to immediately release other resources in this situation.

Rename the function to other_cpu_in_panic(), which is a better
description and does not assume it is related to the console lock.

Signed-off-by: John Ogness <john.ogness@linutronix.de>
Reviewed-by: Sergey Senozhatsky <senozhatsky@chromium.org>
Reviewed-by: Petr Mladek <pmladek@suse.com>
Signed-off-by: Petr Mladek <pmladek@suse.com>
Link: https://lore.kernel.org/r/20230717194607.145135-8-john.ogness@linutronix.de

[pmladek@suse.com: Backported to 5.14 before the code has been
	refactored for nbcon consoles.
]

---
 kernel/printk/internal.h |    2 ++
 kernel/printk/printk.c   |   13 +++++++------
 2 files changed, 9 insertions(+), 6 deletions(-)

--- a/kernel/printk/internal.h
+++ b/kernel/printk/internal.h
@@ -42,3 +42,5 @@ void defer_console_output(void);
 
 static inline bool printk_percpu_data_ready(void) { return false; }
 #endif /* CONFIG_PRINTK */
+
+bool other_cpu_in_panic(void);
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -2622,11 +2622,12 @@ static int have_callable_console(void)
 }
 
 /*
- * Return true when this CPU should unlock console_sem without pushing all
- * messages to the console. This reduces the chance that the console is
- * locked when the panic CPU tries to use it.
+ * Return true if a panic is in progress on a remote CPU.
+ *
+ * On true, the local CPU should immediately release any printing resources
+ * that may be needed by the panic CPU.
  */
-static bool abandon_console_lock_in_panic(void)
+bool other_cpu_in_panic(void)
 {
 	if (!panic_in_progress())
 		return false;
@@ -2784,7 +2785,7 @@ skip:
 			return;
 
 		/* Allow panic_cpu to take over the consoles safely */
-		if (abandon_console_lock_in_panic())
+		if (other_cpu_in_panic())
 			break;
 
 		if (do_cond_resched)
@@ -2804,7 +2805,7 @@ skip:
 	 * flush, no worries.
 	 */
 	retry = prb_read_valid(prb, next_seq, NULL);
-	if (retry && !abandon_console_lock_in_panic() && console_trylock())
+	if (retry && !other_cpu_in_panic() && console_trylock())
 		goto again;
 }
 EXPORT_SYMBOL(console_unlock);
