From ffd1cf0443a208b80e40100ed02892d2ec74c7e9 Mon Sep 17 00:00:00 2001
From: Andreas Gruenbacher <agruenba@redhat.com>
Date: Tue, 19 Nov 2024 12:15:26 +0100
Subject: [PATCH] gfs2: Prevent inode creation race
Git-commit: ffd1cf0443a208b80e40100ed02892d2ec74c7e9
Patch-mainline: v6.13-rc1
References: bsc#1247220

When a request to evict an inode comes in over the network, we are
trying to grab an inode reference via the iopen glock's gl_object
pointer.  There is a very small probability that by the time such a
request comes in, inode creation hasn't completed and the I_NEW flag is
still set.  To deal with that, wait for the inode and then check if
inode creation was successful.

Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
Signed-off-by: Su Yue <glass.su@suse.com>
---
 fs/gfs2/glock.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/fs/gfs2/glock.c b/fs/gfs2/glock.c
index 64bc168c062b..bac2f90b1217 100644
--- a/fs/gfs2/glock.c
+++ b/fs/gfs2/glock.c
@@ -982,6 +982,13 @@ static void gfs2_try_evict(struct gfs2_glock *gl)
 	if (ip && !igrab(&ip->i_inode))
 		ip = NULL;
 	spin_unlock(&gl->gl_lockref.lock);
+	if (ip) {
+		wait_on_inode(&ip->i_inode);
+		if (is_bad_inode(&ip->i_inode)) {
+			iput(&ip->i_inode);
+			ip = NULL;
+		}
+	}
 	if (ip) {
 		set_bit(GIF_DEFER_DELETE, &ip->i_flags);
 		d_prune_aliases(&ip->i_inode);
-- 
2.43.0

