From 03819abbeb11117dcbba40bfe322b88c0c88a6b6 Mon Sep 17 00:00:00 2001
From: Oleksij Rempel <o.rempel@pengutronix.de>
Date: Sat, 16 Nov 2024 14:05:57 +0100
Subject: [PATCH] net: usb: lan78xx: Fix double free issue with interrupt
 buffer allocation
Git-commit: 03819abbeb11117dcbba40bfe322b88c0c88a6b6
References: CVE-2024-53213 bsc#1234973
Patch-mainline: v6.13-rc1

In lan78xx_probe(), the buffer `buf` was being freed twice: once
implicitly through `usb_free_urb(dev->urb_intr)` with the
`URB_FREE_BUFFER` flag and again explicitly by `kfree(buf)`. This caused
a double free issue.

To resolve this, reordered `kmalloc()` and `usb_alloc_urb()` calls to
simplify the initialization sequence and removed the redundant
`kfree(buf)`.  Now, `buf` is allocated after `usb_alloc_urb()`, ensuring
it is correctly managed by  `usb_fill_int_urb()` and freed by
`usb_free_urb()` as intended.

Fixes: a6df95cae40b ("lan78xx: Fix memory allocation bug")
Cc: John Efstathiades <john.efstathiades@pebblebay.com>
Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
Link: https://patch.msgid.link/20241116130558.1352230-1-o.rempel@pengutronix.de
Signed-off-by: Jakub Kicinski <kuba@kernel.org>
Signed-off-by: Oliver Neukum <oneukum@suse.com>

---
 drivers/net/usb/lan78xx.c |   15 +++++++++------
 1 file changed, 9 insertions(+), 6 deletions(-)

--- a/drivers/net/usb/lan78xx.c
+++ b/drivers/net/usb/lan78xx.c
@@ -4126,11 +4126,6 @@ static int lan78xx_probe(struct usb_inte
 	if (!dev->urb_intr) {
 		ret = -ENOMEM;
 		goto out4;
-	} else {
-		usb_fill_int_urb(dev->urb_intr, dev->udev,
-				 dev->pipe_intr, buf, maxp,
-				 intr_complete, dev, period);
-		dev->urb_intr->transfer_flags |= URB_FREE_BUFFER;
 	}
 
 	dev->maxpacket = usb_maxpacket(dev->udev, dev->pipe_out, 1);
@@ -4141,16 +4136,24 @@ static int lan78xx_probe(struct usb_inte
 		goto out5;
 	}
 
+	usb_fill_int_urb(dev->urb_intr, dev->udev,
+			dev->pipe_intr, buf, maxp,
+			intr_complete, dev, period);
+	dev->urb_intr->transfer_flags |= URB_FREE_BUFFER;
+
 	/* driver requires remote-wakeup capability during autosuspend. */
 	intf->needs_remote_wakeup = 1;
 
 	ret = lan78xx_phy_init(dev);
-	if (ret < 0)
+	if (ret < 0) {
+		dev->urb_intr->transfer_flags &= ~URB_FREE_BUFFER;
 		goto out5;
+	}
 
 	ret = register_netdev(netdev);
 	if (ret != 0) {
 		netif_err(dev, probe, netdev, "couldn't register the device\n");
+		dev->urb_intr->transfer_flags &= ~URB_FREE_BUFFER;
 		goto out6;
 	}
 
