From 0179488ca992d79908b8e26b9213f1554fc5bacc Mon Sep 17 00:00:00 2001
From: Takashi Iwai <tiwai@suse.de>
Date: Mon, 30 Dec 2024 12:05:35 +0100
Subject: [PATCH] ALSA: seq: oss: Fix races at processing SysEx messages
Git-commit: 0179488ca992d79908b8e26b9213f1554fc5bacc
Patch-mainline: v6.13-rc6
References: CVE-2024-57893 bsc#1235920

[ backport note: replaced guard() with manual mutex_lock/unlock -- tiwai ]

OSS sequencer handles the SysEx messages split in 6 bytes packets, and
ALSA sequencer OSS layer tries to combine those.  It stores the data
in the internal buffer and this access is racy as of now, which may
lead to the out-of-bounds access.

As a temporary band-aid fix, introduce a mutex for serializing the
process of the SysEx message packets.

Reported-by: Kun Hu <huk23@m.fudan.edu.cn>
Closes: https://lore.kernel.org/2B7E93E4-B13A-4AE4-8E87-306A8EE9BBB7@m.fudan.edu.cn
Cc: <stable@vger.kernel.org>
Link: https://patch.msgid.link/20241230110543.32454-1-tiwai@suse.de
Signed-off-by: Takashi Iwai <tiwai@suse.de>

---
 sound/core/seq/oss/seq_oss_synth.c |   13 +++++++++++--
 1 file changed, 11 insertions(+), 2 deletions(-)

--- a/sound/core/seq/oss/seq_oss_synth.c
+++ b/sound/core/seq/oss/seq_oss_synth.c
@@ -66,6 +66,7 @@ static struct seq_oss_synth midi_synth_d
 };
 
 static DEFINE_SPINLOCK(register_lock);
+static DEFINE_MUTEX(sysex_mutex);
 
 /*
  * prototypes
@@ -497,11 +498,14 @@ snd_seq_oss_synth_sysex(struct seq_oss_d
 	if (!info)
 		return -ENXIO;
 
+	mutex_lock(&sysex_mutex);
 	sysex = info->sysex;
 	if (sysex == NULL) {
 		sysex = kzalloc(sizeof(*sysex), GFP_KERNEL);
-		if (sysex == NULL)
+		if (sysex == NULL) {
+			mutex_unlock(&sysex_mutex);
 			return -ENOMEM;
+		}
 		info->sysex = sysex;
 	}
 
@@ -526,18 +530,23 @@ snd_seq_oss_synth_sysex(struct seq_oss_d
 		if (sysex->skip) {
 			sysex->skip = 0;
 			sysex->len = 0;
+			mutex_unlock(&sysex_mutex);
 			return -EINVAL; /* skip */
 		}
 		/* copy the data to event record and send it */
 		ev->flags = SNDRV_SEQ_EVENT_LENGTH_VARIABLE;
-		if (snd_seq_oss_synth_addr(dp, dev, ev))
+		if (snd_seq_oss_synth_addr(dp, dev, ev)) {
+			mutex_unlock(&sysex_mutex);
 			return -EINVAL;
+		}
 		ev->data.ext.len = sysex->len;
 		ev->data.ext.ptr = sysex->buf;
 		sysex->len = 0;
+		mutex_unlock(&sysex_mutex);
 		return 0;
 	}
 
+	mutex_unlock(&sysex_mutex);
 	return -EINVAL; /* skip */
 }
 
