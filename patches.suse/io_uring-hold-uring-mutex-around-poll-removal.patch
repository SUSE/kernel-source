From 0e388fce7aec40992eadee654193cad345d62663 Mon Sep 17 00:00:00 2001
From: Jens Axboe <axboe@kernel.dk>
Date: Fri, 16 Jun 2023 21:12:06 -0600
Subject: [PATCH] io_uring: hold uring mutex around poll removal
Patch-mainline: Never, 5.15.y stable-tree patch
References: bsc#1212838 CVE-2023-3389

Snipped from commit 9ca9fb24d5febccea354089c41f96a8ad0d853f8 upstream.

While reworking the poll hashing in the v6.0 kernel, we ended up
grabbing the ctx->uring_lock in poll update/removal. This also fixed
a bug with linked timeouts racing with timeout expiry and poll
removal.

Bring back just the locking fix for that.

Reported-and-tested-by: Querijn Voet <querijnqyn@gmail.com>
Signed-off-by: Jens Axboe <axboe@kernel.dk>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Signed-off-by: Gabriel Krisman Bertazi <krisman@suse.de>
[mkoutny: Transferred the lock from io_poll_update() to io_poll_remove(),
 see also
 patches.suse/io_uring-make-prep-and-issue-side-of-req-handlers-na.patch ]
---
 fs/io_uring.c |    3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@ -7151,7 +7151,7 @@ static int io_poll_remove(struct io_kioc
 	int ret2, ret = 0;
 	bool locked = true;
 
-	io_ring_submit_lock(ctx, issue_flags);
+	io_ring_submit_lock(ctx, !(issue_flags & IO_URING_F_NONBLOCK));
 
 	spin_lock(&ctx->completion_lock);
 	preq = io_poll_find(ctx, true, &cd);
@@ -7187,6 +7187,7 @@ out:
 		req_set_fail(req);
 	/* complete update request, we're done with it */
 	__io_req_complete(req, issue_flags, ret, 0);
+	io_ring_submit_unlock(ctx, !(issue_flags & IO_URING_F_NONBLOCK));
 	return 0;
 }
 
