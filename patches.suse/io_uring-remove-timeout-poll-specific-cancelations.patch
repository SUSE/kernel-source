From 29f858a7c6e06060bbadee6d8502df36eed888bf Mon Sep 17 00:00:00 2001
From: Jens Axboe <axboe@kernel.dk>
Date: Sat, 16 Mar 2024 11:10:21 -0600
Subject: [PATCH] io_uring: remove timeout/poll specific cancelations
Git-commit: 29f858a7c6e06060bbadee6d8502df36eed888bf
Patch-mainline: v6.10-rc1
References: bsc#1230569

For historical reasons these were special cased, as they were the only
ones that needed cancelation. But now we handle cancelations generally,
and hence there's no need to check for these in
io_ring_ctx_wait_and_kill() when io_uring_try_cancel_requests() handles
both these and the rest as well.

Signed-off-by: Jens Axboe <axboe@kernel.dk>
Signed-off-by: Gabriel Krisman Bertazi <krisman@suse.de>
---
 io_uring/io_uring.c | 9 ---------
 1 file changed, 9 deletions(-)

diff --git a/io_uring/io_uring.c b/io_uring/io_uring.c
index 805adebe19be..e6e7794d497f 100644
--- a/io_uring/io_uring.c
+++ b/io_uring/io_uring.c
@@ -3068,17 +3068,8 @@ static __cold void io_ring_ctx_wait_and_kill(struct io_ring_ctx *ctx)
 	percpu_ref_kill(&ctx->refs);
 	xa_for_each(&ctx->personalities, index, creds)
 		io_unregister_personality(ctx, index);
-	if (ctx->rings)
-		io_poll_remove_all(ctx, NULL, true);
 	mutex_unlock(&ctx->uring_lock);
 
-	/*
-	 * If we failed setting up the ctx, we might not have any rings
-	 * and therefore did not submit any requests
-	 */
-	if (ctx->rings)
-		io_kill_timeouts(ctx, NULL, true);
-
 	flush_delayed_work(&ctx->fallback_work);
 
 	INIT_WORK(&ctx->exit_work, io_ring_exit_work);
-- 
2.47.0

