From ea514c95f5dc9f6c45014e599e28b4f02ec597df Mon Sep 17 00:00:00 2001
From: David Disseldorp <ddiss@suse.de>
Date: Tue, 4 Jul 2023 00:10:13 +0200
Subject: [PATCH 3/3] target_core_rbd: fix leak and reduce kmalloc calls
References: bsc#1212873
Patch-mainline: Never, legacy SES clustered LIO/RBD

59e542c869895 ("rbd: embed image request in blk-mq pdu") drops separate
rbd_img_request allocations, with the structure instead nested in the
blk-mq PDU. suse-commit de4c7ec6917360df73a9dac6903380ee2d79dfb0
subsequently readded rbd_img_request_create(), so that target_core_rbd
could continue to allocate and init rbd_img_request structs via a single
helper.
rbd_img_request objects allocated via the new rbd_img_request_create()
helper result in memory leaks:
unreferenced object 0xffff88800a1589d8 (size 168):
  comm "kworker/1:1", pid 23, jiffies 4294895646 (age 2311.456s)
  hex dump (first 32 bytes):
    00 48 a7 0a 80 88 ff ff 01 00 00 00 03 00 00 00  .H..............
    00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00  ................
  backtrace:
    [<000000008dbb35ec>] rbd_img_request_create+0x20/0xa0
    [<000000002a9d7bea>] tcm_rbd_execute_cmd+0xdd/0x310 [target_core_rbd]
    [<000000003124002f>] tcm_rbd_execute_rw+0x64/0xa0 [target_core_rbd]
    [<0000000081d7ec3b>] __target_execute_cmd+0x20/0xa0 [target_core_mod]
    [<0000000035fa319f>] transport_generic_new_cmd+0x219/0x340 [target_core_mod]
    [<0000000055664480>] transport_handle_cdb_direct+0x2a/0x50 [target_core_mod]
    [<00000000dcf27a19>] target_queued_submit_work+0x40/0x100 [target_core_mod]
    [<0000000055339551>] process_one_work+0x1b4/0x310
    [<00000000e6d2a2c6>] worker_thread+0x45/0x3c0
    [<00000000726280bf>] kthread+0x153/0x180
    [<0000000091131799>] ret_from_fork+0x22/0x30

target_core_rbd already allocates a per SCSI request tcm_rbd_cmd struct,
so similar to krbd this can be extended to carry the rbd_img_request,
using the new rbd_img_request_init() helper. Similarly,
tcm_rbd_cmd.bvecs can be converted to a flexible array member and
allocated alongside the parent structure, to further reduce kmalloc
calls.

With this change the leaky rbd_img_request_create() can be removed.

Signed-off-by: David Disseldorp <ddiss@suse.de>
[ddiss: remove unused rbd_img_request_create() from 15SP6 kABI]
---
 drivers/block/rbd.c              |   20 -------
 drivers/target/target_core_rbd.c |  107 ++++++++++++++-------------------------
 include/linux/ceph/librbd.h      |    8 +-
 3 files changed, 46 insertions(+), 89 deletions(-)

--- a/drivers/block/rbd.c
+++ b/drivers/block/rbd.c
@@ -1369,7 +1369,7 @@ static bool rbd_dev_parent_get(struct rb
 	return counter > 0;
 }
 
-static void rbd_img_request_init(struct rbd_img_request *img_request,
+void rbd_img_request_init(struct rbd_img_request *img_request,
 				 struct rbd_device *rbd_dev,
 				 enum obj_operation_type op_type,
 				 rbd_img_request_end_cb_t end_cb)
@@ -1384,23 +1384,7 @@ static void rbd_img_request_init(struct
 	mutex_init(&img_request->state_mutex);
 	img_request->callback = end_cb;
 }
-
-/* This is for use by LIO RBD so we don't export the caches directly */
-struct rbd_img_request *rbd_img_request_create(
-					struct rbd_device *rbd_dev,
-					enum obj_operation_type op_type,
-					rbd_img_request_end_cb_t end_cb)
-{
-	struct rbd_img_request *img_request;
-
-	img_request = kmem_cache_alloc(rbd_img_request_cache, GFP_NOIO);
-	if (!img_request)
-		return NULL;
-
-	rbd_img_request_init(img_request, rbd_dev, op_type, end_cb);
-	return img_request;
-}
-EXPORT_SYMBOL(rbd_img_request_create);
+EXPORT_SYMBOL(rbd_img_request_init);
 
 /*
  * Only snap_id is captured here, for reads.  For writes, snapshot
--- a/drivers/target/target_core_rbd.c
+++ b/drivers/target/target_core_rbd.c
@@ -186,9 +186,9 @@ static sector_t tcm_rbd_get_blocks(struc
 }
 
 struct tcm_rbd_cmd {
-	struct rbd_img_request *img_request;
+	struct rbd_img_request img_request;
 	/* for sgl->bvec conversion */
-	struct bio_vec *bvecs;
+	struct bio_vec bvecs[];
 };
 
 static sense_reason_t tcm_rbd_execute_sync_cache(struct se_cmd *cmd)
@@ -198,17 +198,11 @@ static sense_reason_t tcm_rbd_execute_sy
 	return 0;
 }
 
-static int tcm_rbd_sgl_to_bvecs(struct scatterlist *sgl, u32 sgl_nents,
-				struct bio_vec **_bvecs)
+static void tcm_rbd_sgl_to_bvecs(struct scatterlist *sgl, u32 sgl_nents,
+				 struct bio_vec *bvecs)
 {
 	int i;
 	struct scatterlist *sg;
-	struct bio_vec *bvecs;
-
-	bvecs = kcalloc(sgl_nents, sizeof(struct bio_vec), GFP_KERNEL);
-	if (!bvecs) {
-		return -ENOMEM;
-	}
 
 	for_each_sg(sgl, sg, sgl_nents, i) {
 		pr_debug("sg %d: %u@%u\n", i, sg->length, sg->offset);
@@ -217,9 +211,6 @@ static int tcm_rbd_sgl_to_bvecs(struct s
 		bvecs[i].bv_offset = sg->offset;
 		bvecs[i].bv_len = sg->length;
 	}
-	*_bvecs = bvecs;
-
-	return 0;
 }
 
 /*
@@ -259,8 +250,7 @@ static void tcm_rbd_async_callback(struc
 	cmd->priv = NULL;
 	target_complete_cmd(cmd, status);
 	if (trc) {
-		rbd_img_request_destroy(trc->img_request);
-		kfree(trc->bvecs);
+		rbd_img_request_destroy(&trc->img_request);
 		kfree(trc);
 	}
 }
@@ -316,19 +306,16 @@ tcm_rbd_execute_cmd(struct se_cmd *cmd,
 		goto err;	/* Shouldn't happen */
 	}
 
-	trc = kzalloc(sizeof(struct tcm_rbd_cmd), GFP_KERNEL);
+	trc = kzalloc(sizeof(*trc) + sgl_nents * sizeof(trc->bvecs[0]),
+		      GFP_NOIO);
 	if (!trc) {
 		sense = TCM_OUT_OF_RESOURCES;
 		goto err;
 	}
 
-	img_request = rbd_img_request_create(rbd_dev, op_type,
+	img_request = &trc->img_request;
+	rbd_img_request_init(img_request, rbd_dev, op_type,
 			sync ? tcm_rbd_sync_callback : tcm_rbd_async_callback);
-	if (!img_request) {
-		sense = TCM_OUT_OF_RESOURCES;
-		goto err_trc;
-	}
-	trc->img_request = img_request;
 
 	down_read(&rbd_dev->header_rwsem);
 	mapping_size = rbd_dev->mapping.size;
@@ -347,19 +334,17 @@ tcm_rbd_execute_cmd(struct se_cmd *cmd,
 	pr_debug("rbd_dev %p img_req %p %d %llu~%llu\n", rbd_dev,
 	     img_request, op_type, offset, length);
 
-	if (op_type == OBJ_OP_DISCARD || op_type == OBJ_OP_ZEROOUT)
+	if (op_type == OBJ_OP_DISCARD || op_type == OBJ_OP_ZEROOUT) {
 		result = rbd_img_fill_nodata(img_request, offset, length);
-	else {
+	} else {
 		struct ceph_file_extent img_extent = {
 			.fe_off = offset,
 			.fe_len = length,
 		};
-		result = tcm_rbd_sgl_to_bvecs(sgl, sgl_nents, &trc->bvecs);
-		if (!result) {
-			result = rbd_img_fill_from_bvecs(img_request,
-							 &img_extent, 1,
-							 trc->bvecs);
-		}
+		tcm_rbd_sgl_to_bvecs(sgl, sgl_nents, trc->bvecs);
+		result = rbd_img_fill_from_bvecs(img_request,
+						 &img_extent, 1,
+						 trc->bvecs);
 	}
 	if (result == -ENOMEM) {
 		sense = TCM_OUT_OF_RESOURCES;
@@ -391,8 +376,6 @@ tcm_rbd_execute_cmd(struct se_cmd *cmd,
 
 err_img_request:
 	rbd_img_request_destroy(img_request);
-err_trc:
-	kfree(trc->bvecs);
 	kfree(trc);
 	if (sense)
 		pr_warn("RBD op type %d %llx at %llx sense %d",
@@ -528,8 +511,7 @@ static void tcm_rbd_cmp_and_write_callba
 	}
 
 	if (trc) {
-		rbd_img_request_destroy(trc->img_request);
-		kfree(trc->bvecs);
+		rbd_img_request_destroy(&trc->img_request);
 		kfree(trc);
 	}
 }
@@ -546,6 +528,10 @@ tcm_rbd_execute_cmp_and_write(struct se_
 	sense_reason_t sense = TCM_NO_SENSE;
 	u64 offset = rbd_lba_shift(dev, cmd->t_task_lba);
 	u64 length = rbd_lba_shift(dev, cmd->t_task_nolb);
+	struct ceph_file_extent img_extent = {
+		.fe_off = offset,
+		.fe_len = length,
+	};
 	int result;
 
 	if (!length) {
@@ -566,30 +552,33 @@ tcm_rbd_execute_cmp_and_write(struct se_
 		goto err;	/* Shouldn't happen */
 	}
 
-	trc = kzalloc(sizeof(struct tcm_rbd_cmd), GFP_KERNEL);
-	if (!trc) {
-		sense = TCM_OUT_OF_RESOURCES;
+	/*
+	 * No need to take dev->caw_sem here, as the IO is mapped to a compound
+	 * compare+write OSD request, which is handled atomically by the OSD.
+	 */
+
+	/* need twice as much data for each compare & write operation */
+	if (cmd->data_length < length * 2) {
+		sense = TCM_INVALID_CDB_FIELD;
 		goto err;
 	}
 
-	img_request = rbd_img_request_create(rbd_dev, OBJ_OP_CMP_AND_WRITE,
-					     tcm_rbd_cmp_and_write_callback);
-	if (!img_request) {
+	trc = kzalloc(sizeof(*trc) + cmd->t_data_nents * sizeof(trc->bvecs[0]),
+		      GFP_NOIO);
+	if (!trc) {
 		sense = TCM_OUT_OF_RESOURCES;
-		goto err_trc;
+		goto err;
 	}
-	trc->img_request = img_request;
+
+	img_request = &trc->img_request;
+	rbd_img_request_init(img_request, rbd_dev, OBJ_OP_CMP_AND_WRITE,
+			     tcm_rbd_cmp_and_write_callback);
 
 	down_read(&rbd_dev->header_rwsem);
 	mapping_size = rbd_dev->mapping.size;
 	rbd_img_capture_header(img_request);
 	up_read(&rbd_dev->header_rwsem);
 
-	/*
-	 * No need to take dev->caw_sem here, as the IO is mapped to a compound
-	 * compare+write OSD request, which is handled atomically by the OSD.
-	 */
-
 	if (offset + length > mapping_size) {
 		pr_warn("beyond EOD (%llu~%llu > %llu)", offset,
 			length, mapping_size);
@@ -599,12 +588,6 @@ tcm_rbd_execute_cmp_and_write(struct se_
 		}
 	}
 
-	/* need twice as much data for each compare & write operation */
-	if (cmd->data_length < length * 2) {
-		sense = TCM_INVALID_CDB_FIELD;
-		goto err_img_request;
-	}
-
 	pr_debug("rbd_dev %p compare-and-write img_req %p %llu~%llu\n",
 		 rbd_dev, img_request, offset, length);
 
@@ -612,18 +595,10 @@ tcm_rbd_execute_cmp_and_write(struct se_
 	 * data in cmd->t_data_sg is arrange as:
 	 * [len * data for compare | len * data for write]
 	 */
-	result = tcm_rbd_sgl_to_bvecs(cmd->t_data_sg, cmd->t_data_nents,
-				      &trc->bvecs);
-	if (!result) {
-		struct ceph_file_extent img_extent = {
-			.fe_off = offset,
-			.fe_len = length,
-		};
-		result = rbd_img_fill_cmp_and_write_from_bvecs(img_request,
-						      &img_extent,
-						      trc->bvecs);
-	}
-
+	tcm_rbd_sgl_to_bvecs(cmd->t_data_sg, cmd->t_data_nents, trc->bvecs);
+	result = rbd_img_fill_cmp_and_write_from_bvecs(img_request,
+					      &img_extent,
+					      trc->bvecs);
 	if (result == -ENOMEM) {
 		sense = TCM_OUT_OF_RESOURCES;
 		goto err_img_request;
@@ -641,8 +616,6 @@ tcm_rbd_execute_cmp_and_write(struct se_
 
 err_img_request:
 	rbd_img_request_destroy(img_request);
-err_trc:
-	kfree(trc->bvecs);
 	kfree(trc);
 	if (sense)
 		pr_warn("RBD compare-and-write %llx at %llx sense %d",
--- a/include/linux/ceph/librbd.h
+++ b/include/linux/ceph/librbd.h
@@ -240,10 +240,10 @@ enum rbd_dev_flags {
 	RBD_DEV_FLAG_READONLY,	/* -o ro or snapshot */
 };
 
-extern struct rbd_img_request *rbd_img_request_create(
-					struct rbd_device *rbd_dev,
-					enum obj_operation_type op_type,
-					rbd_img_request_end_cb_t end_cb);
+extern void rbd_img_request_init(struct rbd_img_request *img_request,
+				 struct rbd_device *rbd_dev,
+				 enum obj_operation_type op_type,
+				 rbd_img_request_end_cb_t end_cb);
 extern void rbd_img_capture_header(struct rbd_img_request *img_req);
 extern int rbd_img_fill_nodata(struct rbd_img_request *img_req,
 			       u64 off, u64 len);
