From: Lu Baolu <baolu.lu@linux.intel.com>
Date: Tue, 12 Jul 2022 08:08:57 +0800
Subject: iommu/vt-d: Acquiring lock in domain ID allocation helpers
Git-commit: 2c3262f9e881ae403b6d92a7e4824531cdb63829
Patch-mainline: v6.0-rc1
References: bsc#1200301

The iommu->lock is used to protect the per-IOMMU domain ID resource.
Moving the lock into the ID alloc/free helpers makes the code more
compact. At the same time, the device_domain_lock is irrelevant to
the domain ID resource, remove its assertion as well.

Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
Reviewed-by: Kevin Tian <kevin.tian@intel.com>
Link: https://lore.kernel.org/r/20220706025524.2904370-7-baolu.lu@linux.intel.com
Signed-off-by: Joerg Roedel <jroedel@suse.de>
---
 drivers/iommu/intel/iommu.c |   24 +++++++++---------------
 1 file changed, 9 insertions(+), 15 deletions(-)

--- a/drivers/iommu/intel/iommu.c
+++ b/drivers/iommu/intel/iommu.c
@@ -1837,16 +1837,13 @@ static struct dmar_domain *alloc_domain(
 	return domain;
 }
 
-/* Must be called with iommu->lock */
 static int domain_attach_iommu(struct dmar_domain *domain,
 			       struct intel_iommu *iommu)
 {
 	unsigned long ndomains;
-	int num;
-
-	assert_spin_locked(&device_domain_lock);
-	assert_spin_locked(&iommu->lock);
+	int num, ret = 0;
 
+	spin_lock(&iommu->lock);
 	domain->iommu_refcnt[iommu->seq_id] += 1;
 	if (domain->iommu_refcnt[iommu->seq_id] == 1) {
 		ndomains = cap_ndoms(iommu->cap);
@@ -1855,7 +1852,8 @@ static int domain_attach_iommu(struct dm
 		if (num >= ndomains) {
 			pr_err("%s: No free domain ids\n", iommu->name);
 			domain->iommu_refcnt[iommu->seq_id] -= 1;
-			return -ENOSPC;
+			ret = -ENOSPC;
+			goto out_unlock;
 		}
 
 		set_bit(num, iommu->domain_ids);
@@ -1864,7 +1862,9 @@ static int domain_attach_iommu(struct dm
 		domain_update_iommu_cap(domain);
 	}
 
-	return 0;
+out_unlock:
+	spin_unlock(&iommu->lock);
+	return ret;
 }
 
 static void domain_detach_iommu(struct dmar_domain *domain,
@@ -1872,9 +1872,7 @@ static void domain_detach_iommu(struct d
 {
 	int num;
 
-	assert_spin_locked(&device_domain_lock);
-	assert_spin_locked(&iommu->lock);
-
+	spin_lock(&iommu->lock);
 	domain->iommu_refcnt[iommu->seq_id] -= 1;
 	if (domain->iommu_refcnt[iommu->seq_id] == 0) {
 		num = domain->iommu_did[iommu->seq_id];
@@ -1882,6 +1880,7 @@ static void domain_detach_iommu(struct d
 		domain_update_iommu_cap(domain);
 		domain->iommu_did[iommu->seq_id] = 0;
 	}
+	spin_unlock(&iommu->lock);
 }
 
 static inline int guestwidth_to_adjustwidth(int gaw)
@@ -2565,9 +2564,7 @@ static struct dmar_domain *dmar_insert_o
 		return found;
 	}
 
-	spin_lock(&iommu->lock);
 	ret = domain_attach_iommu(domain, iommu);
-	spin_unlock(&iommu->lock);
 
 	if (ret) {
 		spin_unlock_irqrestore(&device_domain_lock, flags);
@@ -4598,7 +4595,6 @@ static int aux_domain_add_dev(struct dma
 	 * iommu->lock must be held to attach domain to iommu and setup the
 	 * pasid entry for second level translation.
 	 */
-	spin_lock(&iommu->lock);
 	ret = domain_attach_iommu(domain, iommu);
 	if (ret)
 		goto attach_failed;
@@ -4613,7 +4609,6 @@ static int aux_domain_add_dev(struct dma
 	if (ret)
 		goto table_failed;
 
-	spin_unlock(&iommu->lock);
 out:
 	spin_unlock_irqrestore(&device_domain_lock, flags);
 
@@ -4622,7 +4617,6 @@ out:
 table_failed:
 	domain_detach_iommu(domain, iommu);
 attach_failed:
-	spin_unlock(&iommu->lock);
 	auxiliary_unlink_device(domain, dev);
 link_failed:
 	spin_unlock_irqrestore(&device_domain_lock, flags);
