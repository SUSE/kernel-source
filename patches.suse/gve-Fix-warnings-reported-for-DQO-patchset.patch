From: Bailey Forrest <bcf@google.com>
Date: Thu, 24 Jun 2021 15:08:52 -0700
Subject: gve: Fix warnings reported for DQO patchset
Patch-mainline: v5.14-rc1
Git-commit: e8192476de58f044576adb2179dd1a05e3a9e903
References: bsc#1176940

https://patchwork.kernel.org/project/netdevbpf/list/?series=506637&state=*

- Remove unused variable
- Use correct integer type for string formatting.
- Remove `inline` in C files

Fixes: 9c1a59a2f4bc ("gve: DQO: Add ring allocation and initialization")
Fixes: a57e5de476be ("gve: DQO: Add TX path")
Signed-off-by: Bailey Forrest <bcf@google.com>
Reviewed-by: Willem de Bruijn <willemb@google.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Acked-by: Thomas Bogendoerfer <tbogendoerfer@suse.de>
---
 drivers/net/ethernet/google/gve/gve_main.c   |    2 +-
 drivers/net/ethernet/google/gve/gve_tx_dqo.c |    9 ++++-----
 2 files changed, 5 insertions(+), 6 deletions(-)

--- a/drivers/net/ethernet/google/gve/gve_main.c
+++ b/drivers/net/ethernet/google/gve/gve_main.c
@@ -696,7 +696,7 @@ static int gve_destroy_rings(struct gve_
 	return 0;
 }
 
-static inline void gve_rx_free_rings(struct gve_priv *priv)
+static void gve_rx_free_rings(struct gve_priv *priv)
 {
 	if (gve_is_gqi(priv))
 		gve_rx_free_rings_gqi(priv);
--- a/drivers/net/ethernet/google/gve/gve_tx_dqo.c
+++ b/drivers/net/ethernet/google/gve/gve_tx_dqo.c
@@ -261,7 +261,7 @@ void gve_tx_free_rings_dqo(struct gve_pr
 }
 
 /* Returns the number of slots available in the ring */
-static inline u32 num_avail_tx_slots(const struct gve_tx_ring *tx)
+static u32 num_avail_tx_slots(const struct gve_tx_ring *tx)
 {
 	u32 num_used = (tx->dqo_tx.tail - tx->dqo_tx.head) & tx->mask;
 
@@ -727,9 +727,8 @@ static void remove_from_list(struct gve_
 			     struct gve_index_list *list,
 			     struct gve_tx_pending_packet_dqo *pending_packet)
 {
-	s16 index, prev_index, next_index;
+	s16 prev_index, next_index;
 
-	index = pending_packet - tx->dqo.pending_packets;
 	prev_index = pending_packet->prev;
 	next_index = pending_packet->next;
 
@@ -890,9 +889,9 @@ static void remove_miss_completions(stru
 		dev_kfree_skb_any(pending_packet->skb);
 		pending_packet->skb = NULL;
 		tx->dropped_pkt++;
-		net_err_ratelimited("%s: No reinjection completion was received for: %ld.\n",
+		net_err_ratelimited("%s: No reinjection completion was received for: %d.\n",
 				    priv->dev->name,
-				    (pending_packet - tx->dqo.pending_packets));
+				    (int)(pending_packet - tx->dqo.pending_packets));
 
 		pending_packet->state = GVE_PACKET_STATE_TIMED_OUT_COMPL;
 		pending_packet->timeout_jiffies =
