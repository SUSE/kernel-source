From: Filipe Manana <fdmanana@suse.com>
Date: Mon, 28 Aug 2023 09:06:43 +0100
Patch-mainline: v6.6-rc2
Git-commit: 2c58c3931ede7cd08cbecf1f1a4acaf0a04a41a9
References: bsc#1220918 CVE-2023-52569
Subject: [PATCH] btrfs: remove BUG() after failure to insert delayed dir index
 item

Instead of calling BUG() when we fail to insert a delayed dir index item
into the delayed node's tree, we can just release all the resources we
have allocated/acquired before and return the error to the caller. This is
fine because all existing call chains undo anything they have done before
calling btrfs_insert_delayed_dir_index() or BUG_ON (when creating pending
snapshots in the transaction commit path).

So remove the BUG() call and do proper error handling.

This relates to a syzbot report linked below, but does not fix it because
it only prevents hitting a BUG(), it does not fix the issue where somehow
we attempt to use twice the same index number for different index items.

Link: https://lore.kernel.org/linux-btrfs/00000000000036e1290603e097e0@google.com/
CC: stable@vger.kernel.org # 5.4+
Reviewed-by: Qu Wenruo <wqu@suse.com>
Signed-off-by: Filipe Manana <fdmanana@suse.com>
Reviewed-by: David Sterba <dsterba@suse.com>
Signed-off-by: David Sterba <dsterba@suse.com>
---
 fs/btrfs/delayed-inode.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/fs/btrfs/delayed-inode.c b/fs/btrfs/delayed-inode.c
index 7e53ef461..77617b910 100644
--- a/fs/btrfs/delayed-inode.c
+++ b/fs/btrfs/delayed-inode.c
@@ -1400,7 +1400,7 @@ void btrfs_balance_delayed_items(struct btrfs_fs_info *fs_info)
 	btrfs_wq_run_delayed_node(delayed_root, fs_info, BTRFS_DELAYED_BATCH);
 }
 
-/* Will return 0 or -ENOMEM */
+/* Will return 0, -ENOMEM or -EEXIST (index number collision, unexpected). */
 int btrfs_insert_delayed_dir_index(struct btrfs_trans_handle *trans,
 				   const char *name, int name_len,
 				   struct btrfs_inode *dir,
@@ -1449,7 +1449,10 @@ int btrfs_insert_delayed_dir_index(struct btrfs_trans_handle *trans,
 			  name_len, name, index, delayed_node->root->root_key.objectid,
 			  delayed_node->inode_id, dir->index_cnt,
 			  delayed_node->index_cnt, ret);
-		BUG();
+		btrfs_delayed_item_release_metadata(dir->root, delayed_item);
+		btrfs_release_delayed_item(delayed_item);
+		mutex_unlock(&delayed_node->mutex);
+		goto release_node;
 	}
 	mutex_unlock(&delayed_node->mutex);
 
-- 
2.35.3

