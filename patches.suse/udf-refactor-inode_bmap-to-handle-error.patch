From c226964ec786f3797ed389a16392ce4357697d24 Mon Sep 17 00:00:00 2001
From: Zhao Mengmeng <zhaomengmeng@kylinos.cn>
Date: Tue, 1 Oct 2024 19:54:25 +0800
Subject: [PATCH] udf: refactor inode_bmap() to handle error
Git-commit: c226964ec786f3797ed389a16392ce4357697d24
Patch-mainline: v6.12-rc2
References: bsc#1234242 bsc#1233096 CVE-2024-50211

Refactor inode_bmap() to handle error since udf_next_aext() can return
error now. On situations like ftruncate, udf_extend_file() can now
detect errors and bail out early without resorting to checking for
particular offsets and assuming internal behavior of these functions.

Reported-by: syzbot+7a4842f0b1801230a989@syzkaller.appspotmail.com
Closes: https://syzkaller.appspot.com/bug?extid=7a4842f0b1801230a989
Tested-by: syzbot+7a4842f0b1801230a989@syzkaller.appspotmail.com
Signed-off-by: Zhao Mengmeng <zhaomengmeng@kylinos.cn>
Suggested-by: Jan Kara <jack@suse.cz>
Signed-off-by: Jan Kara <jack@suse.cz>
Link: https://patch.msgid.link/20241001115425.266556-4-zhaomzhao@126.com
Acked-by: Jan Kara <jack@suse.cz>

---
 fs/udf/dir.c       |   11 +++++++----
 fs/udf/inode.c     |   27 ++++++++++++++++-----------
 fs/udf/namei.c     |   19 ++++++++++++++-----
 fs/udf/partition.c |    6 ++++--
 fs/udf/truncate.c  |    6 ++++--
 fs/udf/udfdecl.h   |    5 +++--
 6 files changed, 48 insertions(+), 26 deletions(-)

--- a/fs/udf/dir.c
+++ b/fs/udf/dir.c
@@ -55,6 +55,7 @@ static int udf_readdir(struct file *file
 	struct buffer_head *tmp, *bha[16];
 	struct kernel_lb_addr eloc;
 	uint32_t elen;
+	int8_t etype;
 	sector_t offset;
 	int i, num, ret = 0;
 	struct extent_position epos = { NULL, 0, {0, 0} };
@@ -96,10 +97,12 @@ static int udf_readdir(struct file *file
 
 	fibh.soffset = fibh.eoffset = nf_pos & (sb->s_blocksize - 1);
 	if (iinfo->i_alloc_type != ICBTAG_FLAG_AD_IN_ICB) {
-		if (inode_bmap(dir, nf_pos >> sb->s_blocksize_bits,
-		    &epos, &eloc, &elen, &offset)
-		    != (EXT_RECORDED_ALLOCATED >> 30)) {
-			ret = -ENOENT;
+		ret = inode_bmap(dir, nf_pos >> sb->s_blocksize_bits,
+		    		 &epos, &eloc, &elen, &offset, &etype);
+		if (ret < 0)
+			goto out;
+		if (ret == 0 || etype != (EXT_RECORDED_ALLOCATED >> 30)) {
+			ret = -EIO;
 			goto out;
 		}
 		block = udf_get_lb_pblock(sb, &eloc, offset);
--- a/fs/udf/inode.c
+++ b/fs/udf/inode.c
@@ -649,8 +649,10 @@ static int udf_extend_file(struct inode
 	 */
 	udf_discard_prealloc(inode);
 
-	etype = inode_bmap(inode, first_block, &epos, &eloc, &elen, &offset);
-	within_last_ext = (etype != -1);
+	err = inode_bmap(inode, first_block, &epos, &eloc, &elen, &offset, &etype);
+	if (err < 0)
+		goto out;
+	within_last_ext = (err == 1);
 	/* We don't expect extents past EOF... */
 	WARN_ON_ONCE(within_last_ext &&
 		     elen > ((loff_t)offset + 1) << inode->i_blkbits);
@@ -2381,13 +2383,15 @@ int8_t udf_delete_aext(struct inode *ino
 	return (elen >> 30);
 }
 
-int8_t inode_bmap(struct inode *inode, sector_t block,
-		  struct extent_position *pos, struct kernel_lb_addr *eloc,
-		  uint32_t *elen, sector_t *offset)
+/*
+ * Returns 1 on success, -errno on error, 0 on hit EOF.
+ */
+int inode_bmap(struct inode *inode, sector_t block, struct extent_position *pos,
+	       struct kernel_lb_addr *eloc, uint32_t *elen, sector_t *offset,
+	       int8_t *etype)
 {
 	unsigned char blocksize_bits = inode->i_sb->s_blocksize_bits;
 	loff_t lbcount = 0, bcount = (loff_t) block << blocksize_bits;
-	int8_t etype;
 	struct udf_inode_info *iinfo;
 	int err = 0;
 
@@ -2399,13 +2403,13 @@ int8_t inode_bmap(struct inode *inode, s
 	}
 	*elen = 0;
 	do {
-		err = udf_next_aext(inode, pos, eloc, elen, &etype, 1);
+		err = udf_next_aext(inode, pos, eloc, elen, etype, 1);
 		if (err <= 0) {
 			if (err == 0) {
 				*offset = (bcount - lbcount) >> blocksize_bits;
 				iinfo->i_lenExtents = lbcount;
 			}
-			return -1;
+			return err;
 		}
 		lbcount += *elen;
 	} while (lbcount <= bcount);
@@ -2413,7 +2417,7 @@ int8_t inode_bmap(struct inode *inode, s
 	udf_update_extent_cache(inode, lbcount - *elen, pos);
 	*offset = (bcount + *elen - lbcount) >> blocksize_bits;
 
-	return etype;
+	return 1;
 }
 
 udf_pblk_t udf_block_map(struct inode *inode, sector_t block)
@@ -2423,11 +2427,12 @@ udf_pblk_t udf_block_map(struct inode *i
 	sector_t offset;
 	struct extent_position epos = {};
 	udf_pblk_t ret;
+	int8_t etype;
 
 	down_read(&UDF_I(inode)->i_data_sem);
 
-	if (inode_bmap(inode, block, &epos, &eloc, &elen, &offset) ==
-						(EXT_RECORDED_ALLOCATED >> 30))
+	if (inode_bmap(inode, block, &epos, &eloc, &elen, &offset, &etype) > 0 &&
+	    etype == (EXT_RECORDED_ALLOCATED >> 30))
 		ret = udf_get_lb_pblock(inode->i_sb, &eloc, offset);
 	else
 		ret = 0;
--- a/fs/udf/namei.c
+++ b/fs/udf/namei.c
@@ -176,6 +176,7 @@ static struct fileIdentDesc *udf_find_en
 	loff_t size;
 	struct kernel_lb_addr eloc;
 	uint32_t elen;
+	int8_t etype;
 	sector_t offset;
 	struct extent_position epos = {};
 	struct udf_inode_info *dinfo = UDF_I(dir);
@@ -190,7 +191,8 @@ static struct fileIdentDesc *udf_find_en
 	fibh->soffset = fibh->eoffset = f_pos & (sb->s_blocksize - 1);
 	if (dinfo->i_alloc_type != ICBTAG_FLAG_AD_IN_ICB) {
 		if (inode_bmap(dir, f_pos >> sb->s_blocksize_bits, &epos,
-		    &eloc, &elen, &offset) != (EXT_RECORDED_ALLOCATED >> 30)) {
+		    	       &eloc, &elen, &offset, &etype) <= 0 ||
+		    etype != (EXT_RECORDED_ALLOCATED >> 30)) {
 			fi = ERR_PTR(-EIO);
 			goto out_err;
 		}
@@ -346,6 +348,7 @@ static struct fileIdentDesc *udf_add_ent
 	sector_t offset;
 	struct extent_position epos = {};
 	struct udf_inode_info *dinfo;
+	int ret;
 
 	fibh->sbh = fibh->ebh = NULL;
 	name = kmalloc(UDF_NAME_LEN_CS0, GFP_NOFS);
@@ -377,8 +380,13 @@ static struct fileIdentDesc *udf_add_ent
 	fibh->soffset = fibh->eoffset = f_pos & (dir->i_sb->s_blocksize - 1);
 	dinfo = UDF_I(dir);
 	if (dinfo->i_alloc_type != ICBTAG_FLAG_AD_IN_ICB) {
-		if (inode_bmap(dir, f_pos >> dir->i_sb->s_blocksize_bits, &epos,
-		    &eloc, &elen, &offset) != (EXT_RECORDED_ALLOCATED >> 30)) {
+		ret = inode_bmap(dir, f_pos >> dir->i_sb->s_blocksize_bits, &epos,
+		    		 &eloc, &elen, &offset, &etype);
+		if (ret < 0) {
+			*err = ret;
+			goto out_err;
+		}
+		if (ret == 0 || etype != (EXT_RECORDED_ALLOCATED >> 30)) {
 			block = udf_get_lb_pblock(dir->i_sb,
 					&dinfo->i_location, 0);
 			fibh->soffset = fibh->eoffset = sb->s_blocksize;
@@ -734,6 +742,7 @@ static int empty_dir(struct inode *dir)
 	udf_pblk_t block;
 	struct kernel_lb_addr eloc;
 	uint32_t elen;
+	int8_t etype;
 	sector_t offset;
 	struct extent_position epos = {};
 	struct udf_inode_info *dinfo = UDF_I(dir);
@@ -744,8 +753,8 @@ static int empty_dir(struct inode *dir)
 	if (dinfo->i_alloc_type == ICBTAG_FLAG_AD_IN_ICB)
 		fibh.sbh = fibh.ebh = NULL;
 	else if (inode_bmap(dir, f_pos >> dir->i_sb->s_blocksize_bits,
-			      &epos, &eloc, &elen, &offset) ==
-					(EXT_RECORDED_ALLOCATED >> 30)) {
+			      &epos, &eloc, &elen, &offset, &etype) > 0 &&
+		 etype == (EXT_RECORDED_ALLOCATED >> 30)) {
 		block = udf_get_lb_pblock(dir->i_sb, &eloc, offset);
 		if ((++offset << dir->i_sb->s_blocksize_bits) < elen) {
 			if (dinfo->i_alloc_type == ICBTAG_FLAG_AD_SHORT)
--- a/fs/udf/partition.c
+++ b/fs/udf/partition.c
@@ -287,9 +287,11 @@ static uint32_t udf_try_read_meta(struct
 	sector_t ext_offset;
 	struct extent_position epos = {};
 	uint32_t phyblock;
+	int8_t etype;
+	int err = 0;
 
-	if (inode_bmap(inode, block, &epos, &eloc, &elen, &ext_offset) !=
-						(EXT_RECORDED_ALLOCATED >> 30))
+	err = inode_bmap(inode, block, &epos, &eloc, &elen, &ext_offset, &etype);
+	if (err <= 0 || etype != (EXT_RECORDED_ALLOCATED >> 30))
 		phyblock = 0xFFFFFFFF;
 	else {
 		map = &UDF_SB(sb)->s_partmaps[partition];
--- a/fs/udf/truncate.c
+++ b/fs/udf/truncate.c
@@ -218,10 +218,12 @@ int udf_truncate_extents(struct inode *i
 	else
 		BUG();
 
-	etype = inode_bmap(inode, first_block, &epos, &eloc, &elen, &offset);
+	ret = inode_bmap(inode, first_block, &epos, &eloc, &elen, &offset, &etype);
+	if (ret < 0)
+		return ret;
 	byte_offset = (offset << sb->s_blocksize_bits) +
 		(inode->i_size & (sb->s_blocksize - 1));
-	if (etype == -1) {
+	if (ret == 0) {
 		/* We should extend the file? */
 		WARN_ON(byte_offset);
 		return 0;
--- a/fs/udf/udfdecl.h
+++ b/fs/udf/udfdecl.h
@@ -154,9 +154,10 @@ extern struct buffer_head *udf_bread(str
 extern int udf_setsize(struct inode *, loff_t);
 extern void udf_evict_inode(struct inode *);
 extern int udf_write_inode(struct inode *, struct writeback_control *wbc);
+extern int inode_bmap(struct inode *inode, sector_t block,
+		      struct extent_position *pos, struct kernel_lb_addr *eloc,
+		      uint32_t *elen, sector_t *offset, int8_t *etype);
 extern udf_pblk_t udf_block_map(struct inode *inode, sector_t block);
-extern int8_t inode_bmap(struct inode *, sector_t, struct extent_position *,
-			 struct kernel_lb_addr *, uint32_t *, sector_t *);
 extern int udf_setup_indirect_aext(struct inode *inode, udf_pblk_t block,
 				   struct extent_position *epos);
 extern int __udf_add_aext(struct inode *inode, struct extent_position *epos,
