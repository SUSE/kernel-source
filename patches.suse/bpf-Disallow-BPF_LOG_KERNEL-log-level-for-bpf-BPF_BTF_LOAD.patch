From: Hou Tao <houtao1@huawei.com>
Date: Fri, 3 Dec 2021 13:30:01 +0800
Subject: bpf: Disallow BPF_LOG_KERNEL log level for bpf(BPF_BTF_LOAD)
Git-commit: 866de407444398bc8140ea70de1dba5f91cc34ac
Patch-mainline: v5.17-rc1
References: git-fixes
X-Info: adjust for context, include/linux/bpf_verifier.h no efc68158c429f37d87fd02ee9a26913c78546fc9

BPF_LOG_KERNEL is only used internally, so disallow bpf_btf_load()
to set log level as BPF_LOG_KERNEL. The same checking has already
been done in bpf_check(), so factor out a helper to check the
validity of log attributes and use it in both places.

Fixes: 8580ac9404f6 ("bpf: Process in-kernel BTF")
Signed-off-by: Hou Tao <houtao1@huawei.com>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Acked-by: Yonghong Song <yhs@fb.com>
Acked-by: Martin KaFai Lau <kafai@fb.com>
Link: https://lore.kernel.org/bpf/20211203053001.740945-1-houtao1@huawei.com

Signed-off-by: Tony Jones <tonyj@suse.de>
---
 include/linux/bpf_verifier.h |    7 +++++++
 kernel/bpf/btf.c             |    3 +--
 kernel/bpf/verifier.c        |    6 +++---
 3 files changed, 11 insertions(+), 5 deletions(-)

--- a/include/linux/bpf_verifier.h
+++ b/include/linux/bpf_verifier.h
@@ -352,6 +352,13 @@ static inline bool bpf_verifier_log_need
 		log->level == BPF_LOG_KERNEL;
 }
 
+static inline bool
+bpf_verifier_log_attr_valid(const struct bpf_verifier_log *log)
+{
+	return log->len_total >= 128 && log->len_total <= UINT_MAX >> 2 &&
+	       log->level && log->ubuf && !(log->level & ~BPF_LOG_MASK);
+}
+
 #define BPF_MAX_SUBPROGS 256
 
 struct bpf_subprog_info {
--- a/kernel/bpf/btf.c
+++ b/kernel/bpf/btf.c
@@ -3420,8 +3420,7 @@ static struct btf *btf_parse(void __user
 		log->len_total = log_size;
 
 		/* log attributes have to be sane */
-		if (log->len_total < 128 || log->len_total > UINT_MAX >> 2 ||
-		    !log->level || !log->ubuf) {
+		if (!bpf_verifier_log_attr_valid(log)) {
 			err = -EINVAL;
 			goto errout;
 		}
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@ -11405,11 +11405,11 @@ int bpf_check(struct bpf_prog **prog, un
 		log->ubuf = (char __user *) (unsigned long) attr->log_buf;
 		log->len_total = attr->log_size;
 
-		ret = -EINVAL;
 		/* log attributes have to be sane */
-		if (log->len_total < 128 || log->len_total > UINT_MAX >> 2 ||
-		    !log->level || !log->ubuf || log->level & ~BPF_LOG_MASK)
+		if (!bpf_verifier_log_attr_valid(log)) {
+			ret = -EINVAL;
 			goto err_unlock;
+		}
 	}
 
 	if (IS_ERR(btf_vmlinux)) {
