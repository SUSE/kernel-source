From: Petr Tesarik <ptesarik@suse.com>
Subject: sched: add a sched_ttwu_queue sysctl
References: bsc#1247963, jsc#PED-13659
Patch-mainline: never, probably too hackish

If the scheduler features can be modifid at run-time (i.e. the kernel is
built with CONFIG_SCHED_DEBUG), expose the TTWU_QUEUE feature as a sysctl.

Signed-off-by: Petr Tesarik <ptesarik@suse.com>
---
 kernel/sched/core.c  |   47 ++++++++++++++++++++++++++++++++++++++++-------
 kernel/sched/debug.c |   25 +++----------------------
 kernel/sched/sched.h |   24 ++++++++++++++++++++++++
 3 files changed, 67 insertions(+), 29 deletions(-)

--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -4088,6 +4088,28 @@ static inline bool ttwu_queue_wakelist(s
 
 #endif /* CONFIG_SMP */
 
+#if defined(CONFIG_PROC_SYSCTL) && defined(CONFIG_SCHED_DEBUG)
+static int sysctl_ttwu_queue(struct ctl_table *table, int write, void *buffer,
+		size_t *lenp, loff_t *ppos)
+{
+	struct ctl_table t;
+	int err;
+	int state = sched_feat(TTWU_QUEUE);
+
+	if (write && !capable(CAP_SYS_ADMIN))
+		return -EPERM;
+
+	t = *table;
+	t.data = &state;
+	err = proc_dointvec_minmax(&t, write, buffer, lenp, ppos);
+	if (err < 0)
+		return err;
+	if (write)
+		sched_feat_set(__SCHED_FEAT_TTWU_QUEUE, state);
+	return err;
+}
+#endif /* CONFIG_PROC_SYSCTL && CONFIG_SCHED_DEBUG */
+
 static void ttwu_queue(struct task_struct *p, int cpu, int wake_flags)
 {
 	struct rq *rq = cpu_rq(cpu);
@@ -4746,15 +4768,26 @@ static int sysctl_schedstats(struct ctl_
 static struct ctl_table sched_core_sysctls[] = {
 #ifdef CONFIG_SCHEDSTATS
 	{
-		.procname       = "sched_schedstats",
-		.data           = NULL,
-		.maxlen         = sizeof(unsigned int),
-		.mode           = 0644,
-		.proc_handler   = sysctl_schedstats,
-		.extra1         = SYSCTL_ZERO,
-		.extra2         = SYSCTL_ONE,
+		.procname = "sched_schedstats",
+		.data = NULL,
+		.maxlen = sizeof(unsigned int),
+		.mode = 0644,
+		.proc_handler = sysctl_schedstats,
+		.extra1 = SYSCTL_ZERO,
+		.extra2 = SYSCTL_ONE,
 	},
 #endif /* CONFIG_SCHEDSTATS */
+#ifdef CONFIG_SCHED_DEBUG
+	{
+		.procname = "sched_ttwu_queue",
+		.data = NULL,
+		.maxlen = sizeof(unsigned int),
+		.mode = 0644,
+		.proc_handler = sysctl_ttwu_queue,
+		.extra1 = SYSCTL_ZERO,
+		.extra2 = SYSCTL_ONE,
+	},
+#endif	/* CONFIG_SCHED_DEBUG */
 #ifdef CONFIG_UCLAMP_TASK
 	{
 		.procname       = "sched_util_clamp_min",
--- a/kernel/sched/debug.c
+++ b/kernel/sched/debug.c
@@ -81,21 +81,9 @@ struct static_key sched_feat_keys[__SCHE
 
 #undef SCHED_FEAT
 
-static void sched_feat_disable(int i)
-{
-	static_key_disable_cpuslocked(&sched_feat_keys[i]);
-}
-
-static void sched_feat_enable(int i)
-{
-	static_key_enable_cpuslocked(&sched_feat_keys[i]);
-}
-#else
-static void sched_feat_disable(int i) { };
-static void sched_feat_enable(int i) { };
 #endif /* CONFIG_JUMP_LABEL */
 
-static int sched_feat_set(char *cmp)
+static int sched_feat_parse(char *cmp)
 {
 	int i;
 	int neg = 0;
@@ -109,14 +97,7 @@ static int sched_feat_set(char *cmp)
 	if (i < 0)
 		return i;
 
-	if (neg) {
-		sysctl_sched_features &= ~(1UL << i);
-		sched_feat_disable(i);
-	} else {
-		sysctl_sched_features |= (1UL << i);
-		sched_feat_enable(i);
-	}
-
+	sched_feat_set(i, !neg);
 	return 0;
 }
 
@@ -142,7 +123,7 @@ sched_feat_write(struct file *filp, cons
 	inode = file_inode(filp);
 	cpus_read_lock();
 	inode_lock(inode);
-	ret = sched_feat_set(cmp);
+	ret = sched_feat_parse(cmp);
 	inode_unlock(inode);
 	cpus_read_unlock();
 	if (ret < 0)
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -2075,12 +2075,36 @@ static __always_inline bool static_branc
 extern struct static_key sched_feat_keys[__SCHED_FEAT_NR];
 #define sched_feat(x) (static_branch_##x(&sched_feat_keys[__SCHED_FEAT_##x]))
 
+static inline void sched_feat_disable(int i)
+{
+	static_key_disable_cpuslocked(&sched_feat_keys[i]);
+}
+
+static inline void sched_feat_enable(int i)
+{
+	static_key_enable_cpuslocked(&sched_feat_keys[i]);
+}
+
 #else /* !CONFIG_JUMP_LABEL */
 
 #define sched_feat(x) (sysctl_sched_features & (1UL << __SCHED_FEAT_##x))
 
+static inline void sched_feat_disable(int i) { };
+static inline void sched_feat_enable(int i) { };
+
 #endif /* CONFIG_JUMP_LABEL */
 
+static inline void sched_feat_set(int i, bool val)
+{
+	if (val) {
+		sysctl_sched_features |= (1UL << i);
+		sched_feat_enable(i);
+	} else {
+		sysctl_sched_features &= ~(1UL << i);
+		sched_feat_disable(i);
+	}
+}
+
 #else /* !SCHED_DEBUG */
 
 /*
