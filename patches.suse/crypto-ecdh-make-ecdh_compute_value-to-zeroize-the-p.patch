From 08da9f6f16f6fbcd2394a49ee6b61fc319d61649 Mon Sep 17 00:00:00 2001
From: Nicolai Stange <nstange@suse.de>
Date: Mon, 8 Jul 2024 10:42:53 +0200
Patch-mainline: Not yet, wait for positive feedback before submitting
References: bsc#1222768
Subject: crypto/ecdh: make ecdh_compute_value() to zeroize the public key

FIPS 140-3 requires that there is a mechanism to zeroize Sensitive
Security Parameters ("SSP"), which are further subcategorized as Public
Security Parameters ("PSP"), i.e. public keys, and Critical Security
Parameters ("CSP"), i.e. private keys. Thus, the public keys must get
zeroized, apparently, and this has been brought up in an actual
FIPS 140-3 validation round.

For further proof that's a FIPS requirement, see e.g. the
IG 9.7.A ("Zeroisation of One Time Programmable (OTP) Memory") section,
which gives references to the primary standard (the latter not being
available free of charge).

I'm still scratching my head what the rationale for zeroizing public
key material could be, I guess it's more related to concerns about
accidental reassociation of public keys with unverified identities due
to bugs in the implementation or so -- but I really don't know.

On the other hand, zeroization doesn't cost an arm and a leg, whereas
others seeking FIPS certification might benefit from having a patch
readily available upstream.

So, make ecdh_compute_value() to free its local public key copy
with kfree_sensitive().

Signed-off-by: Nicolai Stange <nstange@suse.de>
---
 crypto/ecdh.c |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

--- a/crypto/ecdh.c
+++ b/crypto/ecdh.c
@@ -144,7 +144,7 @@ static int ecdh_compute_value(struct kpp
 free_all:
 	kfree_sensitive(shared_secret);
 free_pubkey:
-	kfree(public_key);
+	kfree_sensitive(public_key);
 	return ret;
 }
 
