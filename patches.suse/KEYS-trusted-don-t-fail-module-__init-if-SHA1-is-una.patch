From 2d710fe0bfe9d9e63b388efaf28dc33c3af02786 Mon Sep 17 00:00:00 2001
From: Nicolai Stange <nstange@suse.de>
Date: Fri, 20 Jun 2025 11:23:00 +0200
References: bsc#1240423 jsc#PED-12225
Patch-mainline: Not yet, time critical bandaid fix
Subject: [PATCH] KEYS: trusted: don't fail module __init if SHA1 is
 unavailable

NIST announced to sunset SHA1 by 2030, from when on any attempts to
instantiate it would have to fail with -ENOENT.

Currently, trusted_tpm_init() would propagate any SHA1 instantiation
failures back to the caller, ultimately resulting in init_trusted(),
i.e. the 'trusted' module's module_init(), to fail.

SHA1 is needed only for operating on a TPM1 though. If on a TPM1,
transform a -ENOENT SHA1 instantiation failure into -ENODEV, so that
the trusted module would still load and provide access to other,
non-TPM key sources, if any. If not on a TPM1, ignore a -ENOENT from
the SHA1 instantiation alltogether.

Signed-off-by: Nicolai Stange <nstange@suse.de>
---
 security/keys/trusted-keys/trusted_tpm1.c |   39 +++++++++++++++++++++++++++++-
 1 file changed, 38 insertions(+), 1 deletion(-)

--- a/security/keys/trusted-keys/trusted_tpm1.c
+++ b/security/keys/trusted-keys/trusted_tpm1.c
@@ -40,6 +40,9 @@ static struct sdesc *init_sdesc(struct c
 	struct sdesc *sdesc;
 	int size;
 
+	if (!alg)
+		return ERR_PTR(-ENOENT);
+
 	size = sizeof(struct shash_desc) + crypto_shash_descsize(alg);
 	sdesc = kmalloc(size, GFP_KERNEL);
 	if (!sdesc)
@@ -1005,7 +1008,30 @@ static int __init trusted_shash_alloc(vo
 	if (IS_ERR(hmacalg)) {
 		pr_info("could not allocate crypto %s\n",
 			hmac_alg);
-		return PTR_ERR(hmacalg);
+		ret = PTR_ERR(hmacalg);
+		/*
+		 * SHA1 instantiation fails with ENOENT in FIPS mode.
+		 * However, it's needed only for TPM1. Don't fail the
+		 * module initialization on TPM2 if SHA1 support is
+		 * missing.
+		 */
+		if (ret == -ENOENT) {
+			hmacalg = NULL;
+			/*
+			 * chip is always non-NULL here, but be extra-cautious.
+			 */
+			if (chip && tpm_is_tpm2(chip) == 0) {
+				/* TPM1 is unusable without SHA1. */
+				ret = -ENODEV;
+			} else {
+				/*
+				 * SHA1 is not needed for TPM2, ignore
+				 * the instantiation failure.
+				 */
+				ret = 0;
+			}
+		}
+		return ret;
 	}
 
 	hashalg = crypto_alloc_shash(hash_alg, 0, 0);
@@ -1013,6 +1039,16 @@ static int __init trusted_shash_alloc(vo
 		pr_info("could not allocate crypto %s\n",
 			hash_alg);
 		ret = PTR_ERR(hashalg);
+		/*
+		 * See above regarding SHA1 instantiation failures in FIPS mode.
+		 */
+		if (ret == -ENOENT) {
+			hashalg = NULL;
+			if (chip && tpm_is_tpm2(chip) == 0)
+				ret = -ENODEV;
+			else
+				ret = 0;
+		}
 		goto hashalg_fail;
 	}
 
@@ -1020,6 +1056,7 @@ static int __init trusted_shash_alloc(vo
 
 hashalg_fail:
 	crypto_free_shash(hmacalg);
+	hmacalg = NULL;
 	return ret;
 }
 
