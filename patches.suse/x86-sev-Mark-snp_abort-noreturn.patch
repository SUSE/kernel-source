From: Borislav Petkov <bp@suse.de>
Date: Wed, 24 Aug 2022 17:13:26 +0200
Subject: x86/sev: Mark snp_abort() noreturn
Git-commit: c93c296fff6b369a7115916145047c8a3db6e27f
Patch-mainline: v6.0-rc3
References: jsc#PED-7167

Mark both the function prototype and definition as noreturn in order to
prevent the compiler from doing transformations which confuse objtool
like so:

  vmlinux.o: warning: objtool: sme_enable+0x71: unreachable instruction

This triggers with gcc-12.

Add it and sev_es_terminate() to the objtool noreturn tracking array
too. Sort it while at it.

Suggested-by: Michael Matz <matz@suse.de>
Signed-off-by: Borislav Petkov <bp@suse.de>
Acked-by: Peter Zijlstra <peterz@infradead.org>
Link: https://lore.kernel.org/r/20220824152420.20547-1-bp@alien8.de

Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
---
 arch/x86/include/asm/sev.h |    2 +-
 arch/x86/kernel/sev.c      |    2 +-
 tools/objtool/check.c      |   20 +++++++++++---------
 3 files changed, 13 insertions(+), 11 deletions(-)

--- a/arch/x86/include/asm/sev.h
+++ b/arch/x86/include/asm/sev.h
@@ -194,7 +194,7 @@ void snp_set_memory_shared(unsigned long
 void snp_set_memory_private(unsigned long vaddr, unsigned int npages);
 void snp_set_wakeup_secondary_cpu(void);
 bool snp_init(struct boot_params *bp);
-void snp_abort(void);
+void __init __noreturn snp_abort(void);
 int snp_issue_guest_request(u64 exit_code, struct snp_req_data *input, unsigned long *fw_err);
 #else
 static inline void sev_es_ist_enter(struct pt_regs *regs) { }
--- a/arch/x86/kernel/sev.c
+++ b/arch/x86/kernel/sev.c
@@ -2112,7 +2112,7 @@ bool __init snp_init(struct boot_params
 	return true;
 }
 
-void __init snp_abort(void)
+void __init __noreturn snp_abort(void)
 {
 	sev_es_terminate(SEV_TERM_SET_GEN, GHCB_SNP_UNSUPPORTED);
 }
--- a/tools/objtool/check.c
+++ b/tools/objtool/check.c
@@ -164,22 +164,24 @@ static bool __dead_end_function(struct o
 	 * attribute isn't provided in ELF data.
 	 */
 	static const char * const global_noreturns[] = {
+		"__module_put_and_exit",
+		"__reiserfs_panic",
 		"__stack_chk_fail",
-		"panic",
+		"complete_and_exit",
+		"cpu_bringup_and_idle",
 		"do_exit",
 		"do_task_dead",
-		"make_task_dead",
-		"__module_put_and_exit",
-		"complete_and_exit",
-		"__reiserfs_panic",
-		"lbug_with_loc",
 		"fortify_panic",
-		"usercopy_abort",
+		"kunit_try_catch_throw",
+		"lbug_with_loc",
 		"machine_real_restart",
+		"make_task_dead",
+		"panic",
 		"rewind_stack_and_make_dead",
-		"kunit_try_catch_throw",
+		"sev_es_terminate",
+		"snp_abort",
+		"usercopy_abort",
 		"xen_start_kernel",
-		"cpu_bringup_and_idle",
 	};
 
 	if (!func)
