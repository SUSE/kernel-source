From e1df1a87da15120c377a2c1e6c378db7dd7893a6 Mon Sep 17 00:00:00 2001
From: Jamie Hill-Daniel <jamie@hill-daniel.co.uk>
Date: Tue, 11 Jan 2022 10:38:38 +0000
Subject: [PATCH] vfs: Out-of-bounds write of heap buffer in fs_context.c
References: CVE-2022-0185 bsc#1194517
Patch-mainline: Not yet, EMBARGOED until (at least) 2022-01-18

The "PAGE_SIZE - 2 - size" calculation is is an unsigned type so
a large value of "size" results in a high positive value. This
results in heap overflow which can be exploited by a standard
user for privilege escalation.

Signed-off-by: Jamie Hill-Daniel <jamie@hill-daniel.co.uk>
Signed-off-by: William Liu <willsroot@protonmail.com>
Acked-by: David Disseldorp <ddiss@suse.de>

---
 fs/fs_context.c |    4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

--- a/fs/fs_context.c
+++ b/fs/fs_context.c
@@ -548,7 +548,9 @@ static int legacy_parse_param(struct fs_
 			      param->key);
 	}
 
-	if (len > PAGE_SIZE - 2 - size)
+	// Subtracting 'size' from PAGE_SIZE can lead to integer underflow,
+	// so check bounds using addition instead
+	if (size + len + 2 > PAGE_SIZE)
 		return invalf(fc, "VFS: Legacy: Cumulative options too large");
 	if (strchr(param->key, ',') ||
 	    (param->type == fs_value_is_string &&
