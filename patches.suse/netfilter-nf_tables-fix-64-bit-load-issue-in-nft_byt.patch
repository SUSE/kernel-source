From: Michal Kubecek <mkubecek@suse.cz>
Date: Tue, 6 Feb 2024 11:43:36 +0100
Subject: netfilter: nf_tables: fix 64-bit load issue in nft_byteorder_eval()
Patch-mainline: Never, see commit message for details
References: CVE-2024-0607 bsc#1218915

Recent fix for a 64-bit array access in nft_byteorder_eval() was incomplete
as it only fixes the register store indices but the same problem exists for
load. Fix those too to complete the fix.

Note: the upstream discussion

  https://lore.kernel.org/all/20240206104336.ctigqpkunom2ufmn@lion.mk-sys.cz/

came to the conclusion that as userspace never actually uses multivalue
access and it's unlikely to never need it, the solution should rather be
dropping this feature. However, this seems to be too intrusive for released
products so that we are going with this non-upstream fix instead.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>

------------------------------------------------------------------------------
---
 include/net/netfilter/nf_tables.h |  4 ++--
 net/netfilter/nft_byteorder.c     | 13 +++++++------
 2 files changed, 9 insertions(+), 8 deletions(-)

--- a/include/net/netfilter/nf_tables.h
+++ b/include/net/netfilter/nf_tables.h
@@ -148,9 +148,9 @@ static inline void nft_reg_store64(u64 *dreg, u64 val)
 	put_unaligned(val, dreg);
 }
 
-static inline u64 nft_reg_load64(const u32 *sreg)
+static inline u64 nft_reg_load64(const u64 *sreg)
 {
-	return get_unaligned((u64 *)sreg);
+	return get_unaligned(sreg);
 }
 
 static inline void nft_data_copy(u32 *dst, const struct nft_data *src,
--- a/net/netfilter/nft_byteorder.c
+++ b/net/netfilter/nft_byteorder.c
@@ -39,20 +39,21 @@ void nft_byteorder_eval(const struct nft_expr *expr,
 	switch (priv->size) {
 	case 8: {
 		u64 *dst64 = (void *)dst;
-		u64 src64;
+		u64 *src64 = (void *)src;
+		u64 val64;
 
 		switch (priv->op) {
 		case NFT_BYTEORDER_NTOH:
 			for (i = 0; i < priv->len / 8; i++) {
-				src64 = nft_reg_load64(&src[i]);
-				nft_reg_store64(&dst64[i], be64_to_cpu(src64));
+				val64 = nft_reg_load64(&src64[i]);
+				nft_reg_store64(&dst64[i], be64_to_cpu(val64));
 			}
 			break;
 		case NFT_BYTEORDER_HTON:
 			for (i = 0; i < priv->len / 8; i++) {
-				src64 = (__force __u64)
-					cpu_to_be64(nft_reg_load64(&src[i]));
-				nft_reg_store64(&dst64[i], src64);
+				val64 = (__force __u64)
+					cpu_to_be64(nft_reg_load64(&src64[i]));
+				nft_reg_store64(&dst64[i], val64);
 			}
 			break;
 		}
