From: Steffen Jaeckel <sjaeckel@suse.de>
Date: Wed, 11 Dec 2024 12:28:42 +0100
Subject: kABI fix for netfilter: bridge: replace physindev with physinif in
 nf_bridge_info
References: CVE-2024-35839 bsc#1224726
Patch-mainline: Never, kABI workaround

Upstream commit 9874808878d9 ("netfilter: bridge: replace
physindev with physinif in nf_bridge_info") is based
on commit a54e72197037 ("netfilter: propagate net to
nf_bridge_get_physindev") which changed the signature of the
function `nf_bridge_get_physindev()`.

This patch re-introduces the original kABI function with the old
behavior, but retains the patched behavior for the updated parts of the
kernel.

This also requires to re-introduce the `physindev` field and hide the
newly introduced `physinif` field, which luckily fits into the hole.

```
        __u16                      frag_max_size;        /*     2     2 */

        /* XXX 4 bytes hole, try to pack */

        struct net_device *        physindev;            /*     8     8 */
        struct net_device *        physoutdev;           /*    16     8 */
```

Signed-off-by: Steffen Jaeckel <sjaeckel@suse.de>

---
 include/linux/netfilter_bridge.h           | 10 +++++++++-
 include/linux/skbuff.h                     |  3 +++
 net/bridge/br_netfilter_hooks.c            |  9 +++++----
 net/bridge/br_netfilter_ipv6.c             |  2 +-
 net/ipv4/netfilter/nf_reject_ipv4.c        |  2 +-
 net/ipv6/netfilter/nf_reject_ipv6.c        |  2 +-
 net/netfilter/ipset/ip_set_hash_netiface.c |  2 +-
 net/netfilter/nf_log_syslog.c              |  2 +-
 net/netfilter/nf_queue.c                   |  2 +-
 net/netfilter/xt_physdev.c                 |  2 +-
 10 files changed, 24 insertions(+), 12 deletions(-)

diff --git a/include/linux/netfilter_bridge.h b/include/linux/netfilter_bridge.h
index 743475ca7e9d5..ffca31c581982 100644
--- a/include/linux/netfilter_bridge.h
+++ b/include/linux/netfilter_bridge.h
@@ -56,7 +56,15 @@ static inline int nf_bridge_get_physoutif(const struct sk_buff *skb)
 }
 
 static inline struct net_device *
-nf_bridge_get_physindev(const struct sk_buff *skb, struct net *net)
+nf_bridge_get_physindev(const struct sk_buff *skb)
+{
+	const struct nf_bridge_info *nf_bridge = nf_bridge_info_get(skb);
+
+	return nf_bridge ? nf_bridge->physindev : NULL;
+}
+
+static inline struct net_device *
+__nf_bridge_get_physindev(const struct sk_buff *skb, struct net *net)
 {
 	const struct nf_bridge_info *nf_bridge = nf_bridge_info_get(skb);
 
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 1389e6d1efcb9..d90d45204cb06 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -295,7 +295,10 @@ struct nf_bridge_info {
 	u8			bridged_dnat:1;
 	u8			sabotage_in_done:1;
 	__u16			frag_max_size;
+#ifndef __GENKSYMS__
 	int			physinif;
+#endif
+	struct net_device *     physindev;
 
 	/* always valid & non-NULL from FORWARD on, for physdev match */
 	struct net_device	*physoutdev;
diff --git a/net/bridge/br_netfilter_hooks.c b/net/bridge/br_netfilter_hooks.c
index 21ff776ca78b6..684df70d7252d 100644
--- a/net/bridge/br_netfilter_hooks.c
+++ b/net/bridge/br_netfilter_hooks.c
@@ -282,7 +282,7 @@ int br_nf_pre_routing_finish_bridge(struct net *net, struct sock *sk, struct sk_
 		    READ_ONCE(neigh->hh.hh_len)) {
 			struct net_device *br_indev;
 
-			br_indev = nf_bridge_get_physindev(skb, net);
+			br_indev = __nf_bridge_get_physindev(skb, net);
 			if (!br_indev) {
 				neigh_release(neigh);
 				goto free_skb;
@@ -368,7 +368,7 @@ static int br_nf_pre_routing_finish(struct net *net, struct sock *sk, struct sk_
 	struct rtable *rt;
 	int err;
 
-	br_indev = nf_bridge_get_physindev(skb, net);
+	br_indev = __nf_bridge_get_physindev(skb, net);
 	if (!br_indev) {
 		kfree_skb(skb);
 		return 0;
@@ -472,6 +472,7 @@ struct net_device *setup_pre_routing(struct sk_buff *skb, const struct net *net)
 	}
 
 	nf_bridge->in_prerouting = 1;
+	nf_bridge->physindev = skb->dev;
 	nf_bridge->physinif = skb->dev->ifindex;
 	skb->dev = brnf_get_logical_dev(skb, skb->dev, net);
 
@@ -569,7 +570,7 @@ static int br_nf_forward_finish(struct net *net, struct sock *sk, struct sk_buff
 		if (skb->protocol == htons(ETH_P_IPV6))
 			nf_bridge->frag_max_size = IP6CB(skb)->frag_max_size;
 
-		in = nf_bridge_get_physindev(skb, net);
+		in = __nf_bridge_get_physindev(skb, net);
 		if (!in) {
 			kfree_skb(skb);
 			return 0;
@@ -923,7 +924,7 @@ static void br_nf_pre_routing_finish_bridge_slow(struct sk_buff *skb)
 	struct nf_bridge_info *nf_bridge = nf_bridge_info_get(skb);
 	struct net_device *br_indev;
 
-	br_indev = nf_bridge_get_physindev(skb, dev_net(skb->dev));
+	br_indev = __nf_bridge_get_physindev(skb, dev_net(skb->dev));
 	if (!br_indev) {
 		kfree_skb(skb);
 		return;
diff --git a/net/bridge/br_netfilter_ipv6.c b/net/bridge/br_netfilter_ipv6.c
index ad268bd19d5b0..97c1079b1cc25 100644
--- a/net/bridge/br_netfilter_ipv6.c
+++ b/net/bridge/br_netfilter_ipv6.c
@@ -105,7 +105,7 @@ static int br_nf_pre_routing_finish_ipv6(struct net *net, struct sock *sk, struc
 	struct net_device *dev = skb->dev, *br_indev;
 	const struct nf_ipv6_ops *v6ops = nf_get_ipv6_ops();
 
-	br_indev = nf_bridge_get_physindev(skb, net);
+	br_indev = __nf_bridge_get_physindev(skb, net);
 	if (!br_indev) {
 		kfree_skb(skb);
 		return 0;
diff --git a/net/ipv4/netfilter/nf_reject_ipv4.c b/net/ipv4/netfilter/nf_reject_ipv4.c
index fc761915c5f6f..92acc97bd40dc 100644
--- a/net/ipv4/netfilter/nf_reject_ipv4.c
+++ b/net/ipv4/netfilter/nf_reject_ipv4.c
@@ -292,7 +292,7 @@ void nf_send_reset(struct net *net, struct sock *sk, struct sk_buff *oldskb,
 		struct ethhdr *oeth = eth_hdr(oldskb);
 		struct net_device *br_indev;
 
-		br_indev = nf_bridge_get_physindev(oldskb, net);
+		br_indev = __nf_bridge_get_physindev(oldskb, net);
 		if (!br_indev)
 			goto free_nskb;
 
diff --git a/net/ipv6/netfilter/nf_reject_ipv6.c b/net/ipv6/netfilter/nf_reject_ipv6.c
index 690d1c0476913..0ca0dead554e5 100644
--- a/net/ipv6/netfilter/nf_reject_ipv6.c
+++ b/net/ipv6/netfilter/nf_reject_ipv6.c
@@ -347,7 +347,7 @@ void nf_send_reset6(struct net *net, struct sock *sk, struct sk_buff *oldskb,
 		struct ethhdr *oeth = eth_hdr(oldskb);
 		struct net_device *br_indev;
 
-		br_indev = nf_bridge_get_physindev(oldskb, net);
+		br_indev = __nf_bridge_get_physindev(oldskb, net);
 		if (!br_indev) {
 			kfree_skb(nskb);
 			return;
diff --git a/net/netfilter/ipset/ip_set_hash_netiface.c b/net/netfilter/ipset/ip_set_hash_netiface.c
index 30a655e5c4fdc..ed7c20bd90561 100644
--- a/net/netfilter/ipset/ip_set_hash_netiface.c
+++ b/net/netfilter/ipset/ip_set_hash_netiface.c
@@ -140,7 +140,7 @@ hash_netiface4_data_next(struct hash_netiface4_elem *next,
 #if IS_ENABLED(CONFIG_BRIDGE_NETFILTER)
 static const char *get_physindev_name(const struct sk_buff *skb, struct net *net)
 {
-	struct net_device *dev = nf_bridge_get_physindev(skb, net);
+	struct net_device *dev = __nf_bridge_get_physindev(skb, net);
 
 	return dev ? dev->name : NULL;
 }
diff --git a/net/netfilter/nf_log_syslog.c b/net/netfilter/nf_log_syslog.c
index 58402226045e8..0c996fa4fbe53 100644
--- a/net/netfilter/nf_log_syslog.c
+++ b/net/netfilter/nf_log_syslog.c
@@ -122,7 +122,7 @@ nf_log_dump_packet_common(struct nf_log_buf *m, u8 pf,
 			in ? in->name : "",
 			out ? out->name : "");
 #if IS_ENABLED(CONFIG_BRIDGE_NETFILTER)
-	physindev = nf_bridge_get_physindev(skb, net);
+	physindev = __nf_bridge_get_physindev(skb, net);
 	if (physindev && in != physindev)
 		nf_log_buf_add(m, "PHYSIN=%s ", physindev->name);
 	physoutdev = nf_bridge_get_physoutdev(skb);
diff --git a/net/netfilter/nf_queue.c b/net/netfilter/nf_queue.c
index e2f334f70281f..6b7d5cc18b191 100644
--- a/net/netfilter/nf_queue.c
+++ b/net/netfilter/nf_queue.c
@@ -84,7 +84,7 @@ static void __nf_queue_entry_init_physdevs(struct nf_queue_entry *entry)
 	const struct sk_buff *skb = entry->skb;
 
 	if (nf_bridge_info_exists(skb)) {
-		entry->physin = nf_bridge_get_physindev(skb, entry->state.net);
+		entry->physin = __nf_bridge_get_physindev(skb, entry->state.net);
 		entry->physout = nf_bridge_get_physoutdev(skb);
 	} else {
 		entry->physin = NULL;
diff --git a/net/netfilter/xt_physdev.c b/net/netfilter/xt_physdev.c
index 343e65f377d44..21d4d386e377e 100644
--- a/net/netfilter/xt_physdev.c
+++ b/net/netfilter/xt_physdev.c
@@ -59,7 +59,7 @@ physdev_mt(const struct sk_buff *skb, struct xt_action_param *par)
 	    (!!outdev ^ !(info->invert & XT_PHYSDEV_OP_BRIDGED)))
 		return false;
 
-	physdev = nf_bridge_get_physindev(skb, xt_net(par));
+	physdev = __nf_bridge_get_physindev(skb, xt_net(par));
 	indev = physdev ? physdev->name : NULL;
 
 	if ((info->bitmask & XT_PHYSDEV_OP_ISIN &&
-- 
2.47.1

