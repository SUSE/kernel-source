From c4d1a9f9d11b5d7c5cf4fab33f86f7d7a978801e Mon Sep 17 00:00:00 2001
From: Masahiro Yamada <masahiroy@kernel.org>
Date: Wed, 20 Nov 2024 08:56:43 +0900
Subject: [PATCH] modpost: remove DEF_FIELD_ADDR_VAR() macro
Git-commit: c4d1a9f9d11b5d7c5cf4fab33f86f7d7a978801e
REferences: jsc#PED-10906
Patch-mainline: v6.13-rc1

With the former cleanups in do_pnp_card_entries(), this macro is no
longer used by anyone.

Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
Signed-off-by: Oliver Neukum <oneukum@suse.com>

---
 scripts/mod/file2alias.c | 9 +--------
 1 file changed, 1 insertion(+), 8 deletions(-)

diff --git a/scripts/mod/file2alias.c b/scripts/mod/file2alias.c
index 71dd5272013b..cd8be749260c 100644
--- a/scripts/mod/file2alias.c
+++ b/scripts/mod/file2alias.c
@@ -138,19 +138,12 @@ struct devtable {
 #define DEF_FIELD(m, devid, f) \
 	typeof(((struct devid *)0)->f) f = TO_NATIVE(*(typeof(f) *)((m) + OFF_##devid##_##f))
 
-/* Define a variable v that holds the address of field f of struct devid
- * based at address m.  Due to the way typeof works, for a field of type
- * T[N] the variable has type T(*)[N], _not_ T*.
- */
-#define DEF_FIELD_ADDR_VAR(m, devid, f, v) \
-	typeof(((struct devid *)0)->f) *v = ((m) + OFF_##devid##_##f)
-
 /* Define a variable f that holds the address of field f of struct devid
  * based at address m.  Due to the way typeof works, for a field of type
  * T[N] the variable has type T(*)[N], _not_ T*.
  */
 #define DEF_FIELD_ADDR(m, devid, f) \
-	DEF_FIELD_ADDR_VAR(m, devid, f, f)
+	typeof(((struct devid *)0)->f) *f = ((m) + OFF_##devid##_##f)
 
 #define ADD(str, sep, cond, field)                              \
 do {                                                            \
-- 
2.49.0

